// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["lovedna"] = $hx_exports["lovedna"] || {};
$hx_exports["lovedna"]["game"] = $hx_exports["lovedna"]["game"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var H5Game = function() {
	lovedna_resource_Assets.init("assets");
	this.game = new lovedna_game_Game();
	var debug = new lovedna_game_helper_DebugGame(this.game);
	this.game.color.set(0,0,0,0);
	this.game.onInit = $bind(this,this.onGameInit);
};
$hxClasses["H5Game"] = H5Game;
H5Game.__name__ = ["H5Game"];
H5Game.main = function() {
	new H5Game();
};
H5Game.prototype = {
	onGameInit: function() {
		lovedna_resource_Assets.init();
		lovedna_resource_Assets.loadMeta("version.data",$bind(this,this.onInit));
	}
	,onInit: function() {
		var world = new lovedna_game_World();
		this.game.addWorld(world);
		var actor = new lovedna_game_Actor();
		actor.name = "camera0";
		world.addChild(actor);
		actor.addComponent(lovedna_game_components_CameraControl).distance = 150;
		var camera = actor.addComponent(lovedna_game_components_Camera);
		actor.get_transform().position.set(200,100,200).scale(0.5);
		actor.get_transform().rotation.lookAt(actor.get_transform().position,new lovedna_math_Vector3());
		var actor1 = new lovedna_game_Actor();
		var light = actor1.addComponent(lovedna_game_components_Light);
		world.addChild(actor1);
		actor1.get_transform().rotation.lookAt(new lovedna_math_Vector3(1,0,0),new lovedna_math_Vector3());
		actor1 = new lovedna_game_Actor();
		var uiroot = actor1.addComponent(lovedna_game_components_UIRoot);
		camera.actor.get_transform().addChild(actor1.get_transform());
		actor1.get_transform().position.set(0,0,100);
		actor1 = new lovedna_game_Actor();
		var canvas = actor1.addComponent(lovedna_game_components_Canvas);
		canvas.width = 1138;
		canvas.height = 640;
		uiroot.actor.get_transform().addChild(actor1.get_transform());
		var actor2 = new jump_JumpMain();
		canvas.transform.addChild(actor2.get_transform());
		gameInit();
		return;
	}
	,__class__: H5Game
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js_Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Reflect.hasField(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	add: function(x) {
		this.b += Std.string(x);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js_Boot.getClass(o);
	}
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !js_Boot.isClass(cl)) {
		return null;
	}
	return cl;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.enumIndex = function(e) {
	return e[1];
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.prototype = {
	run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,initData: function() {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
	}
	,setFloat: function(pos,v) {
		this.initData();
		this.data.setFloat32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = Std["int"](b.length * 8 / nbits);
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0 ? 0 : 1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.get(buf >> curbits & mask));
		}
		if(curbits > 0) {
			out.set(pout++,base.get(buf << nbits - curbits & mask));
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = ["haxe","crypto","Crc32"];
haxe_crypto_Crc32.make = function(data) {
	var init = -1;
	var crc = init;
	var b = data.getData();
	var _g1 = 0;
	var _g = data.length;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp = (crc ^ haxe_io_Bytes.fastGet(b,i)) & 255;
		var _g2 = 0;
		while(_g2 < 8) {
			var j = _g2++;
			if((tmp & 1) == 1) {
				tmp = tmp >>> 1 ^ -306674912;
			} else {
				tmp >>>= 1;
			}
		}
		crc = crc >>> 8 ^ tmp;
	}
	return crc ^ init;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = haxe_ds_ObjectMap.getId(key) || haxe_ds_ObjectMap.assignId(key);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[haxe_ds_ObjectMap.getId(key)];
	}
	,exists: function(key) {
		return this.h.__keys__[haxe_ds_ObjectMap.getId(key)] != null;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	isReserved: function(key) {
		return __map_reserved[key] != null;
	}
	,set: function(key,value) {
		if(this.isReserved(key)) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(this.isReserved(key)) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(this.isReserved(key)) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(this.isReserved(key)) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = Std["int"](sig);
		var sig_h = Std["int"](sig / 4294967296.0);
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = ["haxe","rtti","Meta"];
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
haxe_rtti_Meta.getStatics = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.statics == null) {
		return { };
	} else {
		return meta.statics;
	}
};
haxe_rtti_Meta.getFields = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.fields == null) {
		return { };
	} else {
		return meta.fields;
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.__properties__ = {get_document:"get_document",get_window:"get_window"};
js_Browser.get_window = function() {
	return window;
};
js_Browser.get_document = function() {
	return window.document;
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = ["js","Lib"];
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.get_undefined = function() {
	return undefined;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(Std["is"](arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(Std["is"](arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lovedna_Object = function() {
	this.__constructed = false;
	this.construct();
};
$hxClasses["lovedna.Object"] = lovedna_Object;
lovedna_Object.__name__ = ["lovedna","Object"];
lovedna_Object.prototype = {
	construct: function() {
		if(this.__constructed) {
			return;
		}
		this.__constructed = true;
		this.instanceID = lovedna_Object._id++;
		this.onConstruct();
	}
	,toString: function() {
		return lovedna_utils_TypeUtil.getName(Type.getClass(this));
	}
	,onConstruct: function() {
	}
	,__class__: lovedna_Object
};
var lovedna_events_IEventDispatcher = function() { };
$hxClasses["lovedna.events.IEventDispatcher"] = lovedna_events_IEventDispatcher;
lovedna_events_IEventDispatcher.__name__ = ["lovedna","events","IEventDispatcher"];
lovedna_events_IEventDispatcher.prototype = {
	__class__: lovedna_events_IEventDispatcher
};
var lovedna_events_EventDispatcher = function(target) {
	lovedna_Object.call(this);
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["lovedna.events.EventDispatcher"] = lovedna_events_EventDispatcher;
lovedna_events_EventDispatcher.__name__ = ["lovedna","events","EventDispatcher"];
lovedna_events_EventDispatcher.__interfaces__ = [lovedna_events_IEventDispatcher];
lovedna_events_EventDispatcher.__super__ = lovedna_Object;
lovedna_events_EventDispatcher.prototype = $extend(lovedna_Object.prototype,{
	addEventListener: function(type,listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new lovedna_events__$EventDispatcher_Listener(listener,priority));
			this.__eventMap.set(type,list);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener)) {
					return;
				}
			}
			this.__addListenerByPriority(list1,new lovedna_events__$EventDispatcher_Listener(listener,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.get_type();
		var list = this.__eventMap.get(type);
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		var tlist = this.__getTempList();
		tlist.fromList(list);
		var len = tlist.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			event.currentTarget = this;
			event.target = this;
			tlist.getElement(i).callback(event);
		}
		lovedna_events_EventDispatcher._temp.push(tlist);
		return true;
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener) {
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.get(type);
		if(list == null) {
			return;
		}
		var len = list.length;
		while(len-- > 0) if(list[len].match(listener)) {
			list.splice(len,1);
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
		}
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		var _g = numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__getTempList: function() {
		if(lovedna_events_EventDispatcher._temp.length > 0) {
			return lovedna_events_EventDispatcher._temp.pop();
		}
		return new lovedna_ds_FastArray();
	}
	,__class__: lovedna_events_EventDispatcher
});
var lovedna_game_components_Component = function() {
	lovedna_events_EventDispatcher.call(this);
};
$hxClasses["lovedna.game.components.Component"] = lovedna_game_components_Component;
lovedna_game_components_Component.__name__ = ["lovedna","game","components","Component"];
lovedna_game_components_Component.__super__ = lovedna_events_EventDispatcher;
lovedna_game_components_Component.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	onConstruct: function() {
		lovedna_events_EventDispatcher.prototype.onConstruct.call(this);
	}
	,onAwake: function() {
	}
	,onStart: function() {
	}
	,onDestroy: function() {
	}
	,__connectActor: function(v) {
		this.actor = v;
		this.onAwake();
	}
	,__init: function() {
		this.classType = lovedna_utils_TypeUtil.getClassName(this);
		this.onStart();
	}
	,__disconnectActor: function() {
		if(this.__calbacks == null) {
			return;
		}
		var k = this.__calbacks.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			this.actor.removeEventListener(k1,this.__calbacks.get(k1));
			this.__calbacks.remove(k1);
		}
		this.__calbacks = null;
		this.onDestroy();
		this.actor = null;
	}
	,bindEvent: function(e,callback) {
		if(callback != null) {
			if(this.__calbacks == null) {
				this.__calbacks = new haxe_ds_StringMap();
			}
			if(this.__calbacks.exists(e.get_type())) {
				return;
			}
			this.__calbacks.set(e.get_type(),callback);
			this.actor.addEventListener(e.get_type(),callback);
		} else {
			if(this.__calbacks == null) {
				return;
			}
			if(!this.__calbacks.exists(e.get_type())) {
				return;
			}
			callback = this.__calbacks.get(e.get_type());
			this.__calbacks.remove(e.get_type());
			this.actor.removeEventListener(e.get_type(),callback);
		}
	}
	,__class__: lovedna_game_components_Component
});
var jump_ActorRoll = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["jump.ActorRoll"] = jump_ActorRoll;
jump_ActorRoll.__name__ = ["jump","ActorRoll"];
jump_ActorRoll.__super__ = lovedna_game_components_Component;
jump_ActorRoll.prototype = $extend(lovedna_game_components_Component.prototype,{
	start: function(speed) {
		this._r = 0;
		this.speed = speed;
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onupdate));
	}
	,stop: function() {
		this.actor.get_transform().rotation.setEulerAngles(0,0,0);
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,null);
	}
	,onupdate: function(e) {
		this._r += this.actor.deltaTime * 10 * this.speed;
		this.actor.get_transform().rotation.setEulerAngles(0,0,this._r);
	}
	,__class__: jump_ActorRoll
});
var lovedna_game_Actor = function(dontDestroy) {
	if(dontDestroy == null) {
		dontDestroy = false;
	}
	lovedna_events_EventDispatcher.call(this);
	this._dontDestroy = dontDestroy;
	this._enabled = true;
	this.visible = true;
	this.frame = 0;
	this.timeScale = 1;
	this.deltaTime = 0;
	this.layer = 0;
};
$hxClasses["lovedna.game.Actor"] = lovedna_game_Actor;
lovedna_game_Actor.__name__ = ["lovedna","game","Actor"];
lovedna_game_Actor.destory = function(v) {
	if(lovedna_game_Actor._destoryed == null) {
		lovedna_game_Actor._destoryed = new haxe_ds_IntMap();
		lovedna_game_Actor._destoryList = new lovedna_ds_FastArray();
	}
	if(lovedna_game_Actor._destoryed.exists(v.instanceID)) {
		return;
	}
	lovedna_game_Actor._destoryed.set(v.instanceID,v);
	lovedna_game_Actor._destoryCount++;
};
lovedna_game_Actor._endFrame = function() {
	if(lovedna_game_Actor._destoryCount < 1) {
		return;
	}
	lovedna_game_Actor._destoryCount = 0;
	var a = lovedna_game_Actor._destoryed.iterator();
	while(a.hasNext()) {
		var a1 = a.next();
		lovedna_game_Actor._destoryed.remove(a1.instanceID);
		lovedna_game_Actor._destoryList.push(a1);
	}
	var len = lovedna_game_Actor._destoryList.get_length();
	while(len-- > 0) lovedna_game_Actor._destoryList.getElement(len)._destory();
	lovedna_game_Actor._destoryList.clear();
};
lovedna_game_Actor.__super__ = lovedna_events_EventDispatcher;
lovedna_game_Actor.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	addComponent: function(type) {
		var component = null;
		if(this._components == null) {
			this._components = new lovedna_ds_FastArray();
		}
		var len = this._components.get_length();
		while(len-- > 0) {
			component = this._components.get(len);
			if(Std["is"](component,type)) {
				if(lovedna_rtti_ClassMetaInfo.get(type).getClassMeta("allowMulti",true) == null) {
					haxe_Log.trace("error",{ fileName : "Actor.hx", lineNumber : 103, className : "lovedna.game.Actor", methodName : "addComponent", customParams : ["can not add same  type component " + lovedna_utils_TypeUtil.getName(type)]});
					debugger;
					return component;
				}
			}
		}
		component = lovedna_utils_TypeUtil.createInstance(type);
		if(component == null) {
			return null;
		}
		this._components.push(component);
		component.__connectActor(this);
		if(this._componentStates == null) {
			this._componentStates = new lovedna_ds_FastArray();
		}
		this._componentStates.push(new lovedna_game__$Actor_ComponentState(component,0));
		if(Std["is"](component,lovedna_game_components_Transform)) {
			this._transform = component;
		}
		return component;
	}
	,removeComponent: function(type) {
		if(this._components == null) {
			return;
		}
		var len = this._components.get_length();
		while(len-- > 0) {
			var c = this._components.get(len);
			if(Std["is"](c,type)) {
				if(this._componentStates == null) {
					this._componentStates = new lovedna_ds_FastArray();
				}
				this._componentStates.push(new lovedna_game__$Actor_ComponentState(c,1));
				this._components.removeAt(len);
				if(Std["is"](c,lovedna_game_components_Transform)) {
					this._transform = null;
				}
			}
		}
	}
	,getComponent: function(type) {
		if(this._components == null) {
			return null;
		}
		var len = this._components.get_length();
		while(len-- > 0) {
			var c = this._components.get(len);
			if(Std["is"](c,type)) {
				return c;
			}
		}
		return null;
	}
	,getComponents: function(type) {
		return null;
	}
	,componentUpdate: function() {
		if(this._componentStates == null) {
			return;
		}
		var len = this._componentStates.get_length();
		if(len < 1) {
			return;
		}
		if(this._componentStatesTemp == null) {
			this._componentStatesTemp = new lovedna_ds_FastArray();
		}
		this._componentStatesTemp.clear();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._componentStatesTemp.push(this._componentStates.get(i));
		}
		this._componentStates.clear();
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var state = this._componentStatesTemp.get(i1);
			if(state.state == 0) {
				state.component.__init();
				this.world.addComponent(state.component);
			} else if(state.state == 1) {
				state.component.__disconnectActor();
				this._components.remove(state.component);
				this.world.removeComponent(state.component);
			}
		}
	}
	,_collectActors: function(list) {
		var len = this.get_transform().childCount;
		if(len < 1) {
			return;
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var child = this.get_transform().getChild(i).actor;
			if(!child.get_enabled()) {
				continue;
			}
			list.push(child);
			child._collectActors(list);
		}
	}
	,_collectComponent: function(b) {
		if(this.world == null) {
			return;
		}
		if(this._components == null) {
			return;
		}
		var len = this._components.get_length();
		while(len-- > 0) {
			var c = this._components.get(len);
			if(c.classType == null) {
				continue;
			}
			if(b) {
				this.world.addComponent(this._components.get(len));
			} else {
				this.world.removeComponent(this._components.get(len));
			}
		}
	}
	,_connectWorld: function(v) {
		this.world = v;
		this._collectComponent(true);
		this.onEnable();
		this.dispatchEvent(lovedna_game_events_ActorEvent.onEnable);
	}
	,_disconnectWorld: function() {
		this._collectComponent(false);
		this.onDisable();
		this.dispatchEvent(lovedna_game_events_ActorEvent.onDisable);
		this.world = null;
	}
	,onEnable: function() {
	}
	,onDisable: function() {
	}
	,_update: function(fixedCount) {
		this.componentUpdate();
		if(this.get_transform().parent != null) {
			this.deltaTime = this.get_transform().parent.actor.deltaTime * this.timeScale;
		}
		this.dispatchEvent(lovedna_game_events_ActorEvent.onUpdate);
		if(fixedCount > 0) {
			if(this.hasEventListener(lovedna_game_events_ActorEvent.onFixedUpdate.get_type())) {
				var d = this.deltaTime;
				this.deltaTime = 0.0166666666666667;
				while(fixedCount-- > 0) this.dispatchEvent(lovedna_game_events_ActorEvent.onFixedUpdate);
				this.deltaTime = d;
			}
		}
	}
	,_updateTransform: function(frame) {
		this.get_transform()._updateTransform(frame);
		this.frame = frame;
	}
	,_destory: function() {
		if(this._dontDestroy) {
			return;
		}
		if(this._components != null) {
			this._collectComponent(false);
			var len = this._components.get_length();
			while(len-- > 0) this._components.getElement(len).__disconnectActor();
		}
		this._components = null;
		this._componentStates = null;
	}
	,_setVisible: function(v) {
		if(this.visible != v) {
			this.visible = v;
		}
	}
	,get_transform: function() {
		if(this._transform == null) {
			this._transform = this.getComponent(lovedna_game_components_Transform);
			if(this._transform == null) {
				this._transform = this.addComponent(lovedna_game_components_Transform);
			}
		}
		return this._transform;
	}
	,get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(v) {
		if(this._enabled != v) {
			if(this.world != null) {
				this.world.set_dirty(true);
			}
		}
		return this._enabled = v;
	}
	,__class__: lovedna_game_Actor
	,__properties__: {get_transform:"get_transform",set_enabled:"set_enabled",get_enabled:"get_enabled"}
});
var jump_GameActor = function() {
	lovedna_game_Actor.call(this);
	this._offset = new lovedna_math_Vector2(0,0);
};
$hxClasses["jump.GameActor"] = jump_GameActor;
jump_GameActor.__name__ = ["jump","GameActor"];
jump_GameActor.__super__ = lovedna_game_Actor;
jump_GameActor.prototype = $extend(lovedna_game_Actor.prototype,{
	setOffset: function(x,y) {
		this._offset.set(x,y);
	}
	,setPosition: function(x,y) {
		this._setx = x;
		this._sety = y;
		var px = (this._setx + 0.5) * 60;
		var py = (10 - this._sety - 0.5) * 60;
		this.get_transform().position.set(px + this._offset.x,py + this._offset.y);
	}
	,__class__: jump_GameActor
});
var jump_MapActor = function() {
	this.type = 0;
	jump_GameActor.call(this);
	this._dir = new lovedna_math_Vector2(0,0);
	this.mapList = new haxe_ds_IntMap();
	this._control = jump_StageConfig.control;
	this._circle = new lovedna_geom_Circle(new lovedna_math_Vector2(),0);
	this.addEventListener(lovedna_game_events_ActorEvent.onRemoved.get_type(),$bind(this,this.onRemoved));
};
$hxClasses["jump.MapActor"] = jump_MapActor;
jump_MapActor.__name__ = ["jump","MapActor"];
jump_MapActor.__super__ = jump_GameActor;
jump_MapActor.prototype = $extend(jump_GameActor.prototype,{
	hit: function(other) {
		return this._circle.intersectsCircle(other._circle);
	}
	,hitMapCellAndBreak: function(v) {
		return true;
	}
	,hitMapCell: function() {
	}
	,loadAvatar: function(url) {
	}
	,set: function(x,y,size) {
		this.size = size;
		this._circle.radius = size;
		this.setPosition(x,y);
		this.updatePosition();
	}
	,addToStage: function() {
		jump_StageConfig.stage.addChild(this.get_transform());
	}
	,getMinPoint: function() {
		return lovedna_math_Vector2.instance.set(this.get_transform().position.x - this.size,this.get_transform().position.y - this.size);
	}
	,getMaxPoint: function() {
		return lovedna_math_Vector2.instance.set(this.get_transform().position.x + this.size,this.get_transform().position.y + this.size);
	}
	,getMoveDir: function() {
		return this._dir;
	}
	,updatePosition: function() {
		this._control.addUpdateActor(this);
		this._circle.getCenter().set(this.get_transform().position.x,this.get_transform().position.y);
	}
	,onRemoved: function(e) {
		this._control.removeActor(this);
		this.removeEventListener(lovedna_game_events_ActorEvent.onRemoved.get_type(),$bind(this,this.onRemoved));
	}
	,__class__: jump_MapActor
});
var jump_Bullet = function() {
	jump_MapActor.call(this);
	this.size = 30;
	this.halfSize = 15.;
	this._img = this.addComponent(lovedna_game_components_Image);
	this._img.material.renderQueue = 40001;
	var mr = this.addComponent(lovedna_game_components_MeshRenderer);
	mr.materials[0] = this._img.material;
	mr.mesh = new lovedna_game_Mesh().fromGeometry(this._img.geometry);
	this._move = this.addComponent(jump_BulletMove);
};
$hxClasses["jump.Bullet"] = jump_Bullet;
jump_Bullet.__name__ = ["jump","Bullet"];
jump_Bullet.__super__ = jump_MapActor;
jump_Bullet.prototype = $extend(jump_MapActor.prototype,{
	start: function(dir) {
		this._move.start(dir);
	}
	,loadAvatar: function(url) {
		jump_MapActor.prototype.loadAvatar.call(this,url);
		this._img.load(url);
	}
	,hitMapCell: function() {
		jump_MapActor.prototype.hitMapCell.call(this);
		this.get_transform().removeFromParent();
		lovedna_game_Actor.destory(this);
	}
	,__class__: jump_Bullet
});
var jump_BulletMove = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["jump.BulletMove"] = jump_BulletMove;
jump_BulletMove.__name__ = ["jump","BulletMove"];
jump_BulletMove.__super__ = lovedna_game_components_Component;
jump_BulletMove.prototype = $extend(lovedna_game_components_Component.prototype,{
	start: function(dir) {
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onUpdate));
		this._inc.copy(dir);
		this.actor.get_transform().rotation.setEulerAngles(0,0,dir.get_angle());
		this._scale = 0;
	}
	,onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this._inc = new lovedna_math_Vector2();
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		if(Std["is"](this.actor,jump_MapActor)) {
			this._actor = this.actor;
		}
	}
	,onUpdate: function(e) {
		var dt = this.actor.deltaTime;
		var pos = this.actor.get_transform().position;
		pos.x += this._inc.x * dt;
		pos.y += this._inc.y * dt;
		this._scale += dt * 6.283185307179586476925286766559 * 3;
		var sx = 1 + Math.sin(this._scale) * 0.1;
		var sy = 1 + Math.cos(this._scale) * 0.1;
		this.actor.get_transform().scale.set(sx,sy,1);
		if(this._actor != null) {
			this._actor.updatePosition();
		}
	}
	,__class__: jump_BulletMove
});
var jump_Cutter = function() {
	jump_MapActor.call(this);
	this.type = 2;
	this._img = this.addComponent(lovedna_game_components_Image);
	this._img.material.renderQueue = 40001;
	var mr = this.addComponent(lovedna_game_components_MeshRenderer);
	mr.materials[0] = this._img.material;
	mr.mesh = new lovedna_game_Mesh().fromGeometry(this._img.geometry);
	var roll = this.addComponent(jump_ActorRoll);
	roll.start(-20);
};
$hxClasses["jump.Cutter"] = jump_Cutter;
jump_Cutter.__name__ = ["jump","Cutter"];
jump_Cutter.__super__ = jump_MapActor;
jump_Cutter.prototype = $extend(jump_MapActor.prototype,{
	loadAvatar: function(url) {
		this._img.load(url);
	}
	,__class__: jump_Cutter
});
var jump_GameConfig = function() {
};
$hxClasses["jump.GameConfig"] = jump_GameConfig;
jump_GameConfig.__name__ = ["jump","GameConfig"];
jump_GameConfig.prototype = {
	__class__: jump_GameConfig
};
var jump_Hero = function() {
	jump_MapActor.call(this);
	this.type = 1;
	this.addComponent(jump_ActorRoll);
	var jump1 = this.addComponent(jump_Jump);
	jump1.stageData = jump_StageConfig.data;
	var img = this.addComponent(lovedna_game_components_Image);
	var mr = this.addComponent(lovedna_game_components_MeshRenderer);
	img.material.renderQueue = 40010;
	mr.materials[0] = img.material;
	mr.mesh = new lovedna_game_Mesh().fromGeometry(img.geometry);
};
$hxClasses["jump.Hero"] = jump_Hero;
jump_Hero.__name__ = ["jump","Hero"];
jump_Hero.__super__ = jump_MapActor;
jump_Hero.prototype = $extend(jump_MapActor.prototype,{
	loadAvatar: function(url) {
		jump_MapActor.prototype.loadAvatar.call(this,url);
		var img = this.getComponent(lovedna_game_components_Image);
		if(img == null) {
			return;
		}
		img.transform.width = 35;
		img.transform.height = 35;
		img.load(url);
	}
	,__class__: jump_Hero
});
var jump_MapActorComponent = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["jump.MapActorComponent"] = jump_MapActorComponent;
jump_MapActorComponent.__name__ = ["jump","MapActorComponent"];
jump_MapActorComponent.__super__ = lovedna_game_components_Component;
jump_MapActorComponent.prototype = $extend(lovedna_game_components_Component.prototype,{
	onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this._lastPosition = new lovedna_math_Vector3(-1,-1,-1);
		if(Std["is"](this.actor,jump_MapActor)) {
			this._actor = this.actor;
		}
	}
	,savePosition: function() {
		this._lastPosition.copy(this.actor.get_transform().position);
		if(this._actor != null) {
			this._actor.updatePosition();
		}
	}
	,__class__: jump_MapActorComponent
});
var jump_Jump = function() {
	jump_MapActorComponent.call(this);
};
$hxClasses["jump.Jump"] = jump_Jump;
jump_Jump.__name__ = ["jump","Jump"];
jump_Jump.__super__ = jump_MapActorComponent;
jump_Jump.prototype = $extend(jump_MapActorComponent.prototype,{
	onStart: function() {
		jump_MapActorComponent.prototype.onStart.call(this);
		this.stageData = jump_StageConfig.data;
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onUpdate));
		this._r = this.actor.getComponent(jump_ActorRoll);
		this._moveDir = new lovedna_math_Vector2(1,-1);
		this._moveValue = new lovedna_math_Vector2(230,0);
		this._size = 17.5;
		this._xStop = false;
	}
	,onUpdate: function(e) {
		if(lovedna_game_GameInput.touchDown(0)) {
			var dt = this.actor.deltaTime;
			var x = this.actor.get_transform().position.x;
			var y = this.actor.get_transform().position.y;
			var cell = this.stageData.getCell(x - this._moveDir.x * this._size,y - this._size - 1);
			if(cell != null && cell.isBlock(this._moveDir)) {
				this._moveValue.y = 9;
				this._moveDir.y = 1;
			} else {
				if(this._moveValue.y > 7.2) {
					return;
				}
				var cell1 = this.stageData.getCell(x + (this._size + 1) * this._moveDir.x,y);
				if(cell1 != null && cell1.isBlock(this._moveDir)) {
					this._moveDir.x = -this._moveDir.x;
					this.actor.get_transform().scale.set(this._moveDir.x,1,1);
					this._moveDir.y = 1;
					this._moveValue.x = 230;
					this._moveValue.y = 10.799999999999999;
					this._xStop = false;
					this.roll(this._moveDir);
				}
			}
		}
		this.onFixedUpdate();
	}
	,onFixedUpdate: function(e) {
		var dt = this.actor.deltaTime;
		var x = this.actor.get_transform().position.x;
		var y = this.actor.get_transform().position.y;
		var p = 34;
		if(this._xStop) {
			if(this._moveValue.y < 0) {
				p = 1;
				this._moveValue.y = -90. * dt;
			}
		} else {
			x += this._moveValue.x * dt * this._moveDir.x;
		}
		this._moveDir.y = this._moveValue.y > 0 ? 1 : -1;
		this._moveValue.y -= dt * p;
		if(this._moveValue.y < -18) {
			this._moveValue.y = -18;
		}
		y += this._moveValue.y;
		var cell = null;
		cell = this.stageData.getCell(x,y + this._moveDir.y * (this._size + 1));
		if(cell != null && cell.isBlock(this._moveDir)) {
			if(this._moveDir.y > 0) {
				y = cell.y * 60 - this._size;
				this._moveValue.y = 0;
				this.stopRoll();
			} else {
				y = (cell.y + 1) * 60 + this._size;
				this._moveValue.y = 0;
				this._moveValue.x = 230;
				this._xStop = false;
				this.stopRoll();
			}
		}
		cell = this.stageData.getCell(x + this._moveDir.x * (this._size + 1),y);
		if(cell != null && cell.isBlock(this._moveDir)) {
			this._xStop = true;
			if(this._moveDir.x > 0) {
				x = cell.x * 60 - this._size;
			} else {
				x = (cell.x + 1) * 60 + this._size;
			}
			this._moveValue.x = 115.;
			this.stopRoll();
		} else if(this._xStop) {
			this._xStop = false;
			var tmp = this._moveValue.y < 0;
		}
		this.actor.get_transform().position.x = x;
		this.actor.get_transform().position.y = y;
		if(!this._lastPosition.equals(this.actor.get_transform().position)) {
			this.savePosition();
		}
		if(this._actor != null) {
			var k = this._actor.mapList.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				var cell1 = this.stageData.getCellByIndex(k1);
				var actors = cell1.getActors();
				var a = actors.iterator();
				while(a.hasNext()) {
					var a1 = a.next();
					if(a1 == this._actor) {
						continue;
					}
					if(a1.type == 2 && this._actor.hit(a1)) {
						haxe_Log.trace("hit",{ fileName : "Jump.hx", lineNumber : 180, className : "jump.Jump", methodName : "onFixedUpdate"});
						a1.get_transform().removeFromParent();
					}
				}
			}
		}
	}
	,roll: function(dir) {
		if(this._r == null) {
			return;
		}
	}
	,stopRoll: function() {
		if(this._r == null) {
			return;
		}
	}
	,__class__: jump_Jump
});
var jump_JumpMain = $hx_exports["GameStage"] = function(dontDestroy) {
	if(dontDestroy == null) {
		dontDestroy = false;
	}
	lovedna_game_Actor.call(this,dontDestroy);
	jump_JumpMain.current = this;
	jump_StageConfig.control = this.addComponent(jump_StageControl);
	this.stagedata = new jump_StageData();
	jump_StageConfig.data = this.stagedata;
	var con = new lovedna_game_Actor();
	this.get_transform().addChild(con.get_transform());
	con.get_transform().position.set(-540.,-300.);
	jump_StageConfig.stage = con.get_transform();
	var hero = new jump_Hero();
	jump_StageConfig.hero = hero;
	var actor = new lovedna_game_Actor();
	var img = actor.addComponent(lovedna_game_components_Image);
	var mr = actor.addComponent(lovedna_game_components_MeshRenderer);
	mr.materials[0] = img.material;
	img.material.renderQueue = 39900;
	mr.mesh = new lovedna_game_Mesh().fromGeometry(img.geometry);
	this.get_transform().addChild(actor.get_transform());
	jump_StageConfig.background = img;
	var actor1 = new lovedna_game_Actor();
	jump_StageConfig.stage.addChild(actor1.get_transform());
	var mr1 = actor1.addComponent(lovedna_game_components_MeshRenderer);
	mr1.get_material().renderQueue = 40000;
	mr1.get_material().state.cullMode = -1;
	mr1.mesh = new lovedna_game_Mesh().fromGeometry(this.stagedata.geom);
	var offsetx = 29.;
	var offsety = 20.;
	actor1.get_transform().position.set(-offsetx,-offsety,0);
	jump_StageConfig.foreground = actor1;
};
$hxClasses["jump.JumpMain"] = jump_JumpMain;
jump_JumpMain.__name__ = ["jump","JumpMain"];
jump_JumpMain.__super__ = lovedna_game_Actor;
jump_JumpMain.prototype = $extend(lovedna_game_Actor.prototype,{
	load: function(url) {
		this.stagedata.load(url,$bind(this,this.loaded));
	}
	,loaded: function() {
		jump_StageConfig.background.load("map/bgr_ground_nordic.png");
		var x = 1;
		var y = 6;
		jump_StageConfig.hero.loadAvatar("atlas/hero0.png");
		jump_StageConfig.hero.set(x,y,14.);
		jump_StageConfig.hero.addToStage();
		var mr = jump_StageConfig.foreground.getComponent(lovedna_game_components_MeshRenderer);
		mr.mesh = new lovedna_game_Mesh().fromGeometry(this.stagedata.geom);
		mr.get_material().setTexture(lovedna_resource_Assets.texture.get("map/bgr_wall_castle.png").texture);
		var list = jump_StageConfig.data.objectList;
		var len = list.get_length();
		while(len-- > 0) {
			var set = list.get(len);
			var type = set.type;
			switch(type) {
			case "born":
				var x1 = set.x;
				var y1 = set.y;
				jump_StageConfig.hero.loadAvatar("atlas/hero0.png");
				jump_StageConfig.hero.set(x1,y1,14.);
				jump_StageConfig.hero.addToStage();
				break;
			case "cutter":
				var cutter = new jump_Cutter();
				cutter.loadAvatar("atlas/cutter.png");
				cutter.set(set.x,set.y,20);
				cutter.addToStage();
				break;
			case "shooter":
				var dirx = set.getInt("x");
				var diry = set.getInt("y");
				var dir = new lovedna_math_Vector2(dirx,diry);
				var shooter = new jump_Shooter();
				if(dir.get_lengthSq() == 0) {
					shooter.loadAvatar("atlas/target.png");
					shooter.delay = 2;
				} else {
					shooter.loadAvatar("atlas/look.png");
					shooter.delay = 2;
					shooter.dir = dir;
				}
				shooter.setPosition(set.x,set.y);
				shooter.start();
				shooter.addToStage();
				break;
			case "trace":
				var tracer = new jump_Trace();
				tracer.loadAvatar("atlas/trace.png");
				tracer.set(set.x,set.y,8);
				tracer.start();
				tracer.addToStage();
				break;
			}
		}
	}
	,__class__: jump_JumpMain
});
var jump_MapActorSet = function() {
};
$hxClasses["jump.MapActorSet"] = jump_MapActorSet;
jump_MapActorSet.__name__ = ["jump","MapActorSet"];
jump_MapActorSet.prototype = {
	parse: function(v) {
		this._values = new haxe_ds_StringMap();
		var px = lovedna_utils_DynamicUtil.getFloat(v,"x");
		var py = lovedna_utils_DynamicUtil.getFloat(v,"y");
		this.x = lovedna_utils_Helper.floor(px / 60);
		this.y = lovedna_utils_Helper.floor(py / 60);
		this.type = lovedna_utils_DynamicUtil.getString(v,"type");
		var properties = lovedna_utils_DynamicUtil.getArray(v,"properties");
		if(properties == null) {
			return;
		}
		var len = properties.length;
		while(len-- > 0) {
			var obj = properties[len];
			var name = lovedna_utils_DynamicUtil.getString(obj,"name");
			var value = lovedna_utils_DynamicUtil.getValue(obj,"value");
			this._values.set(name,value);
		}
	}
	,getInt: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(this._values.exists(name)) {
			var v = this._values.get(name);
			if(typeof(v) == "number" && ((v | 0) === v)) {
				return v;
			}
		}
		return defaultValue;
	}
	,getFloat: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = 0;
		}
		if(this._values.exists(name)) {
			var v = this._values.get(name);
			if(typeof(v) == "number") {
				return v;
			}
		}
		return defaultValue;
	}
	,getString: function(name,defaultValue) {
		if(defaultValue == null) {
			defaultValue = "";
		}
		if(this._values.exists(name)) {
			var v = this._values.get(name);
			if(typeof(v) == "string") {
				return v;
			}
		}
		return defaultValue;
	}
	,__class__: jump_MapActorSet
};
var jump_MapCell = function(x,y) {
	this.x = x;
	this.y = y;
	this.block = false;
	this._actors = new haxe_ds_IntMap();
};
$hxClasses["jump.MapCell"] = jump_MapCell;
jump_MapCell.__name__ = ["jump","MapCell"];
jump_MapCell.prototype = {
	getIndex: function() {
		return this.y * 18 + this.x;
	}
	,clear: function() {
		this.block = false;
		var k = this._actors.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			this._actors.remove(k1);
		}
	}
	,isBlock: function(dir) {
		return this.block;
	}
	,addActor: function(v) {
		this._actors.set(v.instanceID,v);
	}
	,existActor: function(v) {
		return this._actors.exists(v);
	}
	,removeActor: function(v) {
		this._actors.remove(v);
	}
	,getActors: function() {
		return this._actors;
	}
	,toString: function() {
		return "MapCell " + this.x + "," + this.y;
	}
	,__class__: jump_MapCell
};
var jump_Shooter = function() {
	jump_GameActor.call(this);
	this.delay = 1.5;
	this._time = 0;
	this._img = this.addComponent(lovedna_game_components_Image);
	this._img.material.renderQueue = 40001;
	var mr = this.addComponent(lovedna_game_components_MeshRenderer);
	mr.materials[0] = this._img.material;
	mr.mesh = new lovedna_game_Mesh().fromGeometry(this._img.geometry);
	this._target = new lovedna_math_Quaternion();
};
$hxClasses["jump.Shooter"] = jump_Shooter;
jump_Shooter.__name__ = ["jump","Shooter"];
jump_Shooter.__super__ = jump_GameActor;
jump_Shooter.prototype = $extend(jump_GameActor.prototype,{
	loadAvatar: function(url) {
		this._img.load(url);
	}
	,start: function() {
		this._time = 0.3;
		this._freezeTime = 0;
		this._traceHero = true;
		if(this.dir != null) {
			this._traceHero = false;
			this.get_transform().rotation.setEulerAngles(0,0,this.dir.get_angle());
		}
		this.addEventListener(lovedna_game_events_ActorEvent.onUpdate.get_type(),$bind(this,this.onUpdate));
	}
	,stop: function() {
		this.addEventListener(lovedna_game_events_ActorEvent.onUpdate.get_type(),null);
	}
	,addToStage: function() {
		jump_StageConfig.stage.addChild(this.get_transform());
	}
	,onUpdate: function(e) {
		if(this._traceHero) {
			if(this._freezeTime <= 0) {
				var hero = jump_StageConfig.hero;
				var v2 = lovedna_math_Vector2.instance;
				v2.set(hero.get_transform().position.x,hero.get_transform().position.y);
				v2.x -= this.get_transform().position.x;
				v2.y -= this.get_transform().position.y;
				this._target.setEulerAngles(0,0,v2.get_angle());
				this.get_transform().rotation.slerpTo(this._target,this.deltaTime * 2);
			} else {
				this._freezeTime -= this.deltaTime;
			}
		}
		this._time -= this.deltaTime;
		if(this._time <= 0) {
			this._time = this.delay;
			this.shoot();
		}
	}
	,shoot: function() {
		var v2 = lovedna_math_Vector2.instance;
		if(this.dir != null) {
			v2.copy(this.dir);
		} else {
			var v3 = lovedna_math_Vector3.instance.set(1,0);
			this.get_transform().rotation.rotate(v3);
			v2.set(v3.x,v3.y);
			this.get_transform().rotation.setEulerAngles(0,0,v2.get_angle());
		}
		v2.normalize();
		v2.scale(240.);
		var bullet = new jump_Bullet();
		bullet.type = 2;
		bullet.loadAvatar("bullet.png");
		var v = lovedna_math_Vector3.instance.set(20,0,0);
		this.get_transform().rotation.rotate(v);
		bullet.setOffset(v.x,v.y);
		bullet.set(this._setx,this._sety,8);
		bullet.addToStage();
		bullet.start(v2);
		this._freezeTime = this.delay * 0.1;
	}
	,__class__: jump_Shooter
});
var jump_StageConfig = function() {
};
$hxClasses["jump.StageConfig"] = jump_StageConfig;
jump_StageConfig.__name__ = ["jump","StageConfig"];
jump_StageConfig.prototype = {
	__class__: jump_StageConfig
};
var jump_StageControl = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["jump.StageControl"] = jump_StageControl;
jump_StageControl.__name__ = ["jump","StageControl"];
jump_StageControl.__super__ = lovedna_game_components_Component;
jump_StageControl.prototype = $extend(lovedna_game_components_Component.prototype,{
	addUpdateActor: function(v) {
		if(this._updateMap.exists(v.instanceID)) {
			return;
		}
		this._updateMap.set(v.instanceID,v);
		this.updateList.push(v);
	}
	,removeActor: function(actor) {
		var actorId = actor.instanceID;
		var k = actor.mapList.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var c = this._data.getCellByIndex(k1);
			actor.mapList.remove(k1);
			if(c.existActor(actorId)) {
				c.removeActor(actorId);
			}
		}
	}
	,onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this.updateList = new lovedna_ds_FastArray();
		this._updateMap = new haxe_ds_IntMap();
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this._data = jump_StageConfig.data;
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onUpdate));
	}
	,onUpdate: function(e) {
		var len = this.updateList.get_length();
		var f = this.actor.frame;
		if(len > 0) {
			while(len-- > 0) {
				var actor = this.updateList.get(len);
				if(actor == null) {
					continue;
				}
				if(actor.world == null) {
					continue;
				}
				var breakcheck = false;
				var dir = actor.getMoveDir();
				var actorId = actor.instanceID;
				this.updateList.removeAt(len);
				this._updateMap.remove(actorId);
				var p0 = actor.getMinPoint();
				var c0 = this._data.getCell(p0.x,p0.y);
				p0 = actor.getMaxPoint();
				var c1 = this._data.getCell(p0.x,p0.y);
				if(c0 != null && c1 != null) {
					var _g1 = c0.x;
					var _g = c1.x + 1;
					while(_g1 < _g) {
						var i = _g1++;
						var _g3 = c0.y;
						var _g2 = c1.y + 1;
						while(_g3 < _g2) {
							var j = _g3++;
							if(breakcheck) {
								continue;
							}
							var c = this._data.getCellByXY(i,j);
							if(c == null) {
								continue;
							}
							if(!c.existActor(actorId)) {
								c.addActor(actor);
							}
							actor.mapList.set(c.getIndex(),f);
							if(c.isBlock(dir)) {
								if(actor.hitMapCellAndBreak(c)) {
									breakcheck = true;
								}
							}
						}
					}
				} else if(c0 != null) {
					if(!c0.existActor(actorId)) {
						c0.addActor(actor);
					}
					actor.mapList.set(c0.getIndex(),f);
					if(c0.isBlock(dir)) {
						if(actor.hitMapCellAndBreak(c0)) {
							breakcheck = true;
						}
					}
				} else if(c1 != null) {
					if(!c1.existActor(actorId)) {
						c1.addActor(actor);
					}
					actor.mapList.set(c1.getIndex(),f);
					if(c1.isBlock(dir)) {
						if(actor.hitMapCellAndBreak(c1)) {
							breakcheck = true;
						}
					}
				}
				if(breakcheck) {
					actor.hitMapCell();
					continue;
				}
				var k = actor.mapList.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var lf = actor.mapList.get(k1);
					if(lf < f) {
						var c2 = this._data.getCellByIndex(k1);
						actor.mapList.remove(k1);
						if(c2.existActor(actorId)) {
							c2.removeActor(actorId);
						}
					}
				}
			}
		}
	}
	,__class__: jump_StageControl
});
var jump_StageData = function() {
	this.objectList = new lovedna_ds_FastArray();
	this.data = new lovedna_ds_Array2D(18,10);
	this.cellSize = 0.016666666666666666;
	this._edge = 10.5;
	this.geom = new lovedna_format_mesh_Geometry();
	var _g1 = 0;
	var _g = this.data.width;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = this.data.height;
		while(_g3 < _g2) {
			var j = _g3++;
			this.data.set(i,j,new jump_MapCell(i,j));
		}
	}
};
$hxClasses["jump.StageData"] = jump_StageData;
jump_StageData.__name__ = ["jump","StageData"];
jump_StageData.prototype = {
	load: function(url,callback) {
		this._callback = callback;
		lovedna_resource_Assets.bytes.get(url).addEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.loaded));
	}
	,getCell: function(x,y) {
		var ix = lovedna_utils_Helper.floor(x * this.cellSize);
		var iy = lovedna_utils_Helper.floor(y * this.cellSize);
		return this.getCellByXY(ix,iy);
	}
	,getCellByXY: function(x,y) {
		if(this.data.outside(x,y)) {
			return null;
		}
		return this.data.get(x,y);
	}
	,getCellByIndex: function(v) {
		return this.data.getElement(v);
	}
	,isEmpty: function(x,y) {
		var cell = this.data.get(x,y);
		if(cell == null) {
			return false;
		}
		return !cell.block;
	}
	,getIndex: function(x,y) {
		return this.data.getIndex(x,y);
	}
	,setCell: function(index,value) {
		if(value < 1) {
			return;
		}
		var x = this.data.getX(index);
		var y = this.data.getY(index);
		y = 10 - y - 1;
		var cell = this.data.get(x,y);
		if(cell == null) {
			return;
		}
		cell.block = true;
	}
	,loaded: function(e) {
		var res = e.target;
		if(!res.enabled) {
			return;
		}
		var str = res.bytes.toString();
		var json = JSON.parse(str);
		this.objectList.clear();
		var layers = lovedna_utils_DynamicUtil.getArray(json,"layers");
		var len = layers.length;
		while(len-- > 0) {
			var layer = layers[len];
			var type = lovedna_utils_DynamicUtil.getString(layer,"type");
			if(type == "tilelayer") {
				var data = lovedna_utils_DynamicUtil.getArray(layer,"data");
				var datalen = data.length;
				while(datalen-- > 0) {
					var v = data[datalen];
					this.setCell(datalen,v);
				}
			} else if(type == "objectgroup") {
				var objects = lovedna_utils_DynamicUtil.getArray(layer,"objects");
				var datalen1 = objects.length;
				while(datalen1-- > 0) {
					var object = objects[datalen1];
					var actorset = new jump_MapActorSet();
					actorset.parse(object);
					this.objectList.push(actorset);
				}
			}
		}
		this.drawMesh();
		if(this._callback != null) {
			this._callback();
		}
	}
	,clear: function() {
		var len = this.data.length;
		while(len-- > 0) this.data.getElement(len).clear();
	}
	,drawMesh: function() {
		this.geom.position = [];
		this.geom.uv = [];
		this._ilist = [];
		this._index = 0;
		var w = 1080;
		var h = 600;
		var offsetx = (1138 - w) * 0.5;
		var offsety = (640 - h) * 0.5;
		var addpos = lovedna_math_Vector3.get_temp().set(offsetx,offsety,0);
		var len = this.data.length;
		var pos = null;
		while(len-- > 0) {
			var cell = this.data.getElement(len);
			if(!cell.block) {
				continue;
			}
			var x = cell.x;
			var y = cell.y;
			var px = cell.x * 60;
			var py = cell.y * 60;
			var k = 4;
			if(this.isEmpty(x - 1,y) && this.isEmpty(x,y - 1) && this.isEmpty(x - 1,y - 1) && this._edge > 0) {
				++k;
				pos = new lovedna_math_Vector3(px,py + this._edge);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
				pos = new lovedna_math_Vector3(px + this._edge,py);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			} else {
				pos = new lovedna_math_Vector3(px,py);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			}
			if(this.isEmpty(x + 1,y) && this.isEmpty(x,y - 1) && this.isEmpty(x + 1,y - 1) && this._edge > 0) {
				++k;
				pos = new lovedna_math_Vector3(px + 60 - this._edge,py);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
				pos = new lovedna_math_Vector3(px + 60,py + this._edge);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			} else {
				pos = new lovedna_math_Vector3(px + 60,py);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			}
			if(this.isEmpty(x + 1,y) && this.isEmpty(x,y + 1) && this.isEmpty(x + 1,y + 1) && this._edge > 0) {
				++k;
				pos = new lovedna_math_Vector3(px + 60,py + 60 - this._edge);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
				pos = new lovedna_math_Vector3(px + 60 - this._edge,py + 60);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			} else {
				pos = new lovedna_math_Vector3(px + 60,py + 60);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			}
			if(this.isEmpty(x - 1,y) && this.isEmpty(x,y + 1) && this.isEmpty(x - 1,y + 1) && this._edge > 0) {
				++k;
				pos = new lovedna_math_Vector3(px + this._edge,py + 60);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
				pos = new lovedna_math_Vector3(px,py + 60 - this._edge);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			} else {
				pos = new lovedna_math_Vector3(px,py + 60);
				this.geom.position.push(pos.add(addpos));
				this.geom.uv.push(new lovedna_math_Vector2(pos.x / 1138,pos.y / 640));
			}
			var l = k - 2;
			var start = 0;
			while(l-- > 0) {
				this._ilist.push(this._index);
				this._ilist.push(this._index + start + 1);
				this._ilist.push(this._index + start + 2);
				++start;
			}
			this._index += k;
		}
		this.drawQuad(new lovedna_math_Vector3(0,0),new lovedna_math_Vector3(1138,0),new lovedna_math_Vector3(1138 - offsetx,offsety),new lovedna_math_Vector3(offsetx,offsety));
		this.drawQuad(new lovedna_math_Vector3(1138,0),new lovedna_math_Vector3(1138,640),new lovedna_math_Vector3(1138 - offsetx,640 - offsety),new lovedna_math_Vector3(1138 - offsetx,offsety));
		this.drawQuad(new lovedna_math_Vector3(1138,640),new lovedna_math_Vector3(0,640),new lovedna_math_Vector3(offsetx,640 - offsety),new lovedna_math_Vector3(1138 - offsetx,640 - offsety));
		this.drawQuad(new lovedna_math_Vector3(0,640),new lovedna_math_Vector3(0,0),new lovedna_math_Vector3(offsetx,offsety),new lovedna_math_Vector3(offsetx,640 - offsety));
		this.geom.addGroup(this._ilist);
	}
	,drawQuad: function(p0,p1,p2,p3) {
		this.geom.position.push(p0);
		this.geom.uv.push(new lovedna_math_Vector2(p0.x / 1138,p0.y / 640));
		this.geom.position.push(p1);
		this.geom.uv.push(new lovedna_math_Vector2(p1.x / 1138,p1.y / 640));
		this.geom.position.push(p2);
		this.geom.uv.push(new lovedna_math_Vector2(p2.x / 1138,p2.y / 640));
		this.geom.position.push(p3);
		this.geom.uv.push(new lovedna_math_Vector2(p3.x / 1138,p3.y / 640));
		var k = 4;
		var l = k - 2;
		var start = 0;
		while(l-- > 0) {
			this._ilist.push(this._index);
			this._ilist.push(this._index + start + 1);
			this._ilist.push(this._index + start + 2);
			++start;
		}
		this._index += k;
	}
	,__class__: jump_StageData
};
var jump_Trace = function() {
	jump_MapActor.call(this);
	this.type = 2;
	this._img = this.addComponent(lovedna_game_components_Image);
	this._img.material.renderQueue = 40100;
	var mr = this.addComponent(lovedna_game_components_MeshRenderer);
	mr.materials[0] = this._img.material;
	mr.mesh = new lovedna_game_Mesh().fromGeometry(this._img.geometry);
	this._comp = this.addComponent(jump_TraceHero);
};
$hxClasses["jump.Trace"] = jump_Trace;
jump_Trace.__name__ = ["jump","Trace"];
jump_Trace.__super__ = jump_MapActor;
jump_Trace.prototype = $extend(jump_MapActor.prototype,{
	start: function() {
		this._comp.start();
	}
	,loadAvatar: function(url) {
		jump_MapActor.prototype.loadAvatar.call(this,url);
		this._img.load(url);
	}
	,__class__: jump_Trace
});
var jump_TraceHero = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["jump.TraceHero"] = jump_TraceHero;
jump_TraceHero.__name__ = ["jump","TraceHero"];
jump_TraceHero.__super__ = lovedna_game_components_Component;
jump_TraceHero.prototype = $extend(lovedna_game_components_Component.prototype,{
	start: function() {
		this._cangle = new lovedna_math_Quaternion();
		this._tangle = new lovedna_math_Quaternion();
		this._hero = jump_StageConfig.hero;
		this._size = 16;
		this.stageData = jump_StageConfig.data;
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onUpdate));
	}
	,stop: function() {
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,null);
	}
	,onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this._moveValue = new lovedna_math_Vector2();
		this._moveDir = new lovedna_math_Vector2();
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		if(Std["is"](this.actor,jump_MapActor)) {
			this._actor = this.actor;
		}
	}
	,onUpdate: function(e) {
		var dt = this.actor.deltaTime;
		this._moveDir.set(this._hero.get_transform().position.x,this._hero.get_transform().position.y);
		this._moveDir.x -= this.actor.get_transform().position.x;
		this._moveDir.y -= this.actor.get_transform().position.y;
		this._tangle.setEulerAngles(0,0,this._moveDir.get_angle());
		this._cangle.slerpTo(this._tangle,dt * 5);
		this._moveDir.set_angle(this._cangle.getEulerAngles().z);
		this._moveDir.normalize();
		this._moveValue.copy(this._moveDir).scale(115.);
		var x = this.actor.get_transform().position.x;
		var y = this.actor.get_transform().position.y;
		x += this._moveValue.x * dt;
		y += this._moveValue.y * dt;
		var cell = null;
		cell = this.stageData.getCell(x,y + (this._moveDir.y > 0 ? 1 : -1) * (this._size + 1));
		if(cell != null && cell.isBlock(this._moveDir)) {
			if(this._moveDir.y > 0) {
				y = cell.y * 60 - this._size;
			} else {
				y = (cell.y + 1) * 60 + this._size;
			}
		}
		cell = this.stageData.getCell(x + (this._moveDir.x > 0 ? 1 : -1) * (this._size + 1),y);
		if(cell != null && cell.isBlock(this._moveDir)) {
			if(this._moveDir.x > 0) {
				x = cell.x * 60 - this._size;
			} else {
				x = (cell.x + 1) * 60 + this._size;
			}
		}
		this.actor.get_transform().position.x = x;
		this.actor.get_transform().position.y = y;
		if(this._actor != null) {
			this._actor.updatePosition();
		}
	}
	,__class__: jump_TraceHero
});
var lovedna_Time = function() {
};
$hxClasses["lovedna.Time"] = lovedna_Time;
lovedna_Time.__name__ = ["lovedna","Time"];
lovedna_Time.__properties__ = {get_now:"get_now"};
lovedna_Time.setTimeHandler = function(callback) {
	if(callback == null) {
		callback = lovedna_Time.getnow;
	}
	lovedna_Time._custom = callback;
};
lovedna_Time.setCustomNowTime = function(now) {
	lovedna_Time._offset = now - lovedna_Time.get_now();
};
lovedna_Time.get_now = function() {
	return lovedna_Time._custom();
};
lovedna_Time.getnow = function() {
	return new Date().getTime() * 0.001 + lovedna_Time._offset;
};
lovedna_Time.prototype = {
	__class__: lovedna_Time
};
var lovedna_ds_IArrayAccess = function() { };
$hxClasses["lovedna.ds.IArrayAccess"] = lovedna_ds_IArrayAccess;
lovedna_ds_IArrayAccess.__name__ = ["lovedna","ds","IArrayAccess"];
lovedna_ds_IArrayAccess.prototype = {
	__class__: lovedna_ds_IArrayAccess
};
var lovedna_ds_Array2D = function(width,height) {
	if(width * height < 1) {
		throw new js__$Boot_HaxeError("error size ");
	}
	this._list = [];
	this.width = width;
	this.height = height;
	this.length = width * height;
};
$hxClasses["lovedna.ds.Array2D"] = lovedna_ds_Array2D;
lovedna_ds_Array2D.__name__ = ["lovedna","ds","Array2D"];
lovedna_ds_Array2D.__interfaces__ = [lovedna_ds_IArrayAccess];
lovedna_ds_Array2D.prototype = {
	fill: function(v) {
		var len = this.length;
		while(len-- > 0) this._list[len] = v;
	}
	,clear: function() {
		this.fill(null);
	}
	,fromArray: function(list) {
		var len = this.length;
		while(len-- > 0) this._list[len] = list[len];
	}
	,getIndex: function(x,y) {
		if(x < 0 || y < 0) {
			return -1;
		}
		if(x >= this.width || y >= this.height) {
			return -1;
		}
		return y * this.width + x;
	}
	,getX: function(index) {
		return index % this.width;
	}
	,getY: function(index) {
		return lovedna_utils_Helper.floor(index / this.width);
	}
	,get: function(x,y) {
		var index = this.getIndex(x,y);
		if(index >= 0) {
			return this.getElement(index);
		}
		return null;
	}
	,set: function(x,y,v) {
		var index = this.getIndex(x,y);
		if(index >= 0) {
			this.setElement(index,v);
		}
	}
	,outside: function(x,y) {
		if(x < 0 || y < 0) {
			return true;
		}
		if(x >= this.width || y >= this.height) {
			return true;
		}
		return false;
	}
	,getListByX: function(x,output) {
		if(output == null) {
			return;
		}
		var len = this.height;
		while(len-- > 0) output[len] = this.get(x,len);
	}
	,getListByY: function(y,output) {
		if(output == null) {
			return;
		}
		var len = this.width;
		while(len-- > 0) output[len] = this.get(len,y);
	}
	,rotateRight: function() {
		var i = 0;
		var _g1 = 0;
		var _g = this.width;
		while(_g1 < _g) {
			var x = _g1++;
			var y = this.height;
			while(y-- > 0) {
				var v = this.get(x,y);
				lovedna_ds_Array2D._temp[i++] = v;
			}
		}
		var len = this.length;
		while(len-- > 0) this._list[len] = lovedna_ds_Array2D._temp[len];
		this.width ^= this.height;
		this.height = this.width ^ this.height;
		this.width ^= this.height;
	}
	,rotateLeft: function() {
		var i = 0;
		var x = this.width;
		while(x-- > 0) {
			var _g1 = 0;
			var _g = this.height;
			while(_g1 < _g) {
				var y = _g1++;
				var v = this.get(x,y);
				lovedna_ds_Array2D._temp[i++] = v;
			}
		}
		var len = this.length;
		while(len-- > 0) this._list[len] = lovedna_ds_Array2D._temp[len];
		this.width ^= this.height;
		this.height = this.width ^ this.height;
		this.width ^= this.height;
	}
	,getElement: function(index) {
		return this._list[index];
	}
	,setElement: function(index,v) {
		this._list[index] = v;
	}
	,toString: function() {
		var str = "\nArray2[" + this.width + "," + this.height + "]\n";
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			this.getListByY(y,lovedna_ds_Array2D._temp);
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				if(x > 0) {
					str += ",";
				}
				str += Std.string(lovedna_ds_Array2D._temp[x]);
			}
			str += "\n";
		}
		return str;
	}
	,__class__: lovedna_ds_Array2D
};
var lovedna_ds_BinaryHeap = function(compare) {
	this._items = new lovedna_ds_FastArray();
	this._items.push(null);
	this._compare = compare;
	this.count = 0;
};
$hxClasses["lovedna.ds.BinaryHeap"] = lovedna_ds_BinaryHeap;
lovedna_ds_BinaryHeap.__name__ = ["lovedna","ds","BinaryHeap"];
lovedna_ds_BinaryHeap.prototype = {
	push: function(v) {
		this._items.push(v);
		this.toRoot(this._items.get_length() - 1);
		this.count = this._items.get_length() - 1;
	}
	,shift: function() {
		if(this._items.get_length() == 1) {
			return null;
		}
		if(this._items.get_length() == 2) {
			this.count = 0;
			return this._items.pop();
		}
		var v = this._items.get(1);
		this.toLeaf();
		this.count = this._items.get_length() - 1;
		return v;
	}
	,Clear: function() {
		this._items.set_length(1);
	}
	,toRoot: function(index) {
		var cindex = index;
		var count = index;
		while(cindex > 1) {
			var pindex = cindex >> 1;
			var cdata = this._items.get(cindex);
			var pdata = this._items.get(pindex);
			if(this._compare(cdata,pdata) < 0) {
				var t = cdata;
				this._items.setElement(cindex,pdata);
				this._items.setElement(pindex,t);
			} else {
				break;
			}
			cindex = pindex;
			if(count-- < 0) {
				break;
			}
		}
	}
	,toLeaf: function() {
		var cindex = 1;
		this._items.setElement(1,this._items.pop());
		var len = this._items.get_length();
		var count = len;
		while(true) {
			var last = cindex;
			var leafindex = cindex << 1;
			if(leafindex < len) {
				var cdata = this._items.get(cindex);
				var ldata = this._items.get(leafindex);
				if(this._compare(cdata,ldata) > 0) {
					cindex = leafindex;
					cdata = ldata;
				}
				if(leafindex + 1 < len) {
					ldata = this._items.get(leafindex + 1);
					if(this._compare(cdata,ldata) > 0) {
						cindex = leafindex + 1;
					}
				}
			}
			if(cindex != last) {
				var cdata1 = this._items.get(cindex);
				var ldata1 = this._items.get(last);
				var t = cdata1;
				this._items.setElement(cindex,ldata1);
				this._items.setElement(last,t);
				last = cindex;
			} else {
				break;
			}
			if(count-- < 0) {
				break;
			}
		}
	}
	,__class__: lovedna_ds_BinaryHeap
};
var lovedna_ds_Bit32 = function(value) {
	if(value == null) {
		value = 0;
	}
	this.value = 0;
	this.value = value;
};
$hxClasses["lovedna.ds.Bit32"] = lovedna_ds_Bit32;
lovedna_ds_Bit32.__name__ = ["lovedna","ds","Bit32"];
lovedna_ds_Bit32.prototype = {
	toString: function() {
		return "Bit32(" + lovedna_utils_Helper.toBin(this.value) + ")";
	}
	,getElement: function(index) {
		if(_$UInt_UInt_$Impl_$.gt(0,index)) {
			index = Std["int"](_$UInt_UInt_$Impl_$.toFloat(index) % _$UInt_UInt_$Impl_$.toFloat(32));
			index = index + 32;
		} else if(_$UInt_UInt_$Impl_$.gte(index,32)) {
			index = Std["int"](_$UInt_UInt_$Impl_$.toFloat(index) % _$UInt_UInt_$Impl_$.toFloat(32));
		}
		var key = 1 << index;
		return (this.value & key) == key;
	}
	,setElement: function(index,v) {
		if(v == null) {
			v = true;
		}
		if(index < 0) {
			index %= 32;
			index += 32;
		} else if(index >= 32) {
			index %= 32;
		}
		if(v) {
			this.value = this.value | 1 << index;
		} else {
			this.value = this.value & ~(1 << index);
		}
	}
	,negate: function() {
		this.value = this.value ^ -1;
		return this;
	}
	,clear: function() {
		this.value = 0;
		return this;
	}
	,add: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		this.value = m.value | n.value;
		return this;
	}
	,sub: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		this.value = m.value & ~n.value;
		return this;
	}
	,contains: function(v) {
		return (this.value | v.value) == this.value;
	}
	,__class__: lovedna_ds_Bit32
};
var lovedna_ds_Blob = function(length) {
	if(length == null) {
		length = 0;
	}
	this.bigEndian = false;
	this._data = haxe_io_Bytes.alloc(length);
	this.position = 0;
	this._length = 0;
};
$hxClasses["lovedna.ds.Blob"] = lovedna_ds_Blob;
lovedna_ds_Blob.__name__ = ["lovedna","ds","Blob"];
lovedna_ds_Blob.prototype = {
	setBytes: function(v) {
		if(v == null && v.length == 0) {
			return this;
		}
		this.__resize(v.length);
		this.position = 0;
		this._data.blit(0,v,0,v.length);
		return this;
	}
	,getBytes: function() {
		this.trim();
		return this._data;
	}
	,readUnsignedByte: function() {
		var a = this.position;
		if(_$UInt_UInt_$Impl_$.gt(this.get_length(),a)) {
			return this._data.get(this.position++);
		}
		throw new js__$Boot_HaxeError("EOF");
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this._data.set(this.position++,value & 255);
	}
	,readBoolean: function() {
		return this.readUnsignedByte() != 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value ? 1 : 0);
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(!this.bigEndian) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readShort: function() {
		var value = this.readUnsignedShort();
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(!this.bigEndian) {
			this._data.set(this.position++,value);
			this._data.set(this.position++,value >> 8);
		} else {
			this._data.set(this.position++,value >> 8);
			this._data.set(this.position++,value);
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(!this.bigEndian) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(!this.bigEndian) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(!this.bigEndian) {
			this._data.set(this.position++,value & 255);
			this._data.set(this.position++,value >> 8 & 255);
			this._data.set(this.position++,value >> 16 & 255);
			this._data.set(this.position++,value >> 24 & 255);
		} else {
			this._data.set(this.position++,value >> 24 & 255);
			this._data.set(this.position++,value >> 16 & 255);
			this._data.set(this.position++,value >> 8 & 255);
			this._data.set(this.position++,value & 255);
		}
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt());
	}
	,writeFloat: function(value) {
		if(!this.bigEndian) {
			this.__resize(this.position + 4);
			this._data.setFloat(this.position,value);
			this.position += 4;
		} else {
			var $int = haxe_io_FPHelper.floatToI32(value);
			this.writeInt($int);
		}
	}
	,readDouble: function() {
		var ch1 = this.readInt();
		var ch2 = this.readInt();
		if(!this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(ch1,ch2);
		} else {
			return haxe_io_FPHelper.i64ToDouble(ch2,ch1);
		}
	}
	,writeDouble: function(value) {
		var int64 = haxe_io_FPHelper.doubleToI64(value);
		if(!this.bigEndian) {
			this.writeInt(int64.low);
			this.writeInt(int64.high);
		} else {
			this.writeInt(int64.high);
			this.writeInt(int64.low);
		}
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this._length) {
			throw new js__$Boot_HaxeError("EOF");
		}
		this.position += length;
		return this._data.getString(this.position - length,length);
	}
	,writeUTFBytes: function(v) {
		var bytes = haxe_io_Bytes.ofString(v);
		this.writeBytes(bytes);
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(bytes);
	}
	,readBlob: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.get_length() - this.position;
		}
		if(_$UInt_UInt_$Impl_$.gt(this.position + length,this.get_length())) {
			throw new js__$Boot_HaxeError("EOF");
		}
		if(bytes._data.length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes._data.blit(offset,this._data,this.position,length);
		this.position += length;
	}
	,writeBlob: function(blob,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		this.writeBytes(blob.getBytes(),offset,length);
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(bytes.length == 0) {
			return;
		}
		if(length == 0) {
			length = bytes.length - offset;
		}
		this.__resize(this.position + length);
		this._data.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,trim: function() {
		if(this._data.length > this._length) {
			var bytes = haxe_io_Bytes.alloc(this._length);
			bytes.blit(0,this._data,0,this._length);
			this._data = bytes;
		}
	}
	,__resize: function(size) {
		if(size > this._data.length) {
			var bytes = haxe_io_Bytes.alloc((size + 1) * 3 >> 1);
			bytes.blit(0,this._data,0,this._length);
			this._data = bytes;
		}
		if(_$UInt_UInt_$Impl_$.gt(size,this.get_length())) {
			this._length = size;
		}
	}
	,get_bytesAvailable: function() {
		return this._length - this.position;
	}
	,get_length: function() {
		return this._length;
	}
	,set_length: function(value) {
		if(value > 0) {
			this.__resize(value);
		}
		if(value < this.position) {
			this.position = value;
		}
		return value;
	}
	,__class__: lovedna_ds_Blob
	,__properties__: {get_bytesAvailable:"get_bytesAvailable",set_length:"set_length",get_length:"get_length"}
};
var lovedna_ds__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["lovedna.ds._ByteArray.ByteArray_Impl_"] = lovedna_ds__$ByteArray_ByteArray_$Impl_$;
lovedna_ds__$ByteArray_ByteArray_$Impl_$.__name__ = ["lovedna","ds","_ByteArray","ByteArray_Impl_"];
lovedna_ds__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	var this1 = new lovedna_ds_Blob(length);
	return this1;
};
lovedna_ds__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	var self = new lovedna_ds_Blob();
	return self.setBytes(bytes);
};
lovedna_ds__$ByteArray_ByteArray_$Impl_$.toBytes = function(blob) {
	return blob.getBytes();
};
var lovedna_ds_FastArray = function() {
	this._length = 0;
};
$hxClasses["lovedna.ds.FastArray"] = lovedna_ds_FastArray;
lovedna_ds_FastArray.__name__ = ["lovedna","ds","FastArray"];
lovedna_ds_FastArray.__interfaces__ = [lovedna_ds_IArrayAccess];
lovedna_ds_FastArray.prototype = {
	toArray: function() {
		return this._buffer;
	}
	,clear: function() {
		if(this._buffer == null) {
			return;
		}
		if(this._length < 1) {
			return;
		}
		var len = lovedna_utils_Helper.minInt(this._length,this._buffer.length);
		while(len-- > 0) this._buffer[len] = null;
		this._length = 0;
	}
	,dispose: function() {
		this._buffer = null;
		this._length = 0;
	}
	,fromList: function(list) {
		if(list == null) {
			return this;
		}
		if(this._buffer == null) {
			this._buffer = [];
			this._length = 0;
		}
		var len = list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._buffer[i] = list[i];
		}
		this._length = len;
		return this;
	}
	,add: function(list,count,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(count == null) {
			count = 0;
		}
		if(list == null) {
			return;
		}
		if(this._buffer == null) {
			this._buffer = [];
			this._length = 0;
		}
		if(offset < 0) {
			offset = 0;
		}
		var len = list.get_length();
		if(count > 0) {
			if(len >= count) {
				len = count;
			}
			if(offset + len > list.get_length()) {
				len -= offset + len - list.get_length();
			}
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._buffer[this._length++] = list.getElement(offset + i);
		}
	}
	,addList: function(list,count,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(count == null) {
			count = 0;
		}
		if(list == null) {
			return;
		}
		if(this._buffer == null) {
			this._buffer = [];
			this._length = 0;
		}
		if(offset < 0) {
			offset = 0;
		}
		var len = list.length;
		if(count > 0) {
			if(len >= count) {
				len = count;
			}
			if(offset + len > list.length) {
				len -= offset + len - list.length;
			}
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var list1 = list[offset + i];
			this._buffer[this._length++] = list1;
		}
	}
	,push: function(v) {
		if(this._buffer == null) {
			this._buffer = [];
		}
		this._buffer[this._length++] = v;
	}
	,pop: function() {
		if(this._buffer == null) {
			return null;
		}
		if(this._length < 1) {
			return null;
		}
		var t = this._buffer[--this._length];
		this._buffer[this._length] = null;
		return t;
	}
	,shift: function() {
		if(this._buffer == null) {
			return null;
		}
		if(this._length < 1) {
			return null;
		}
		this._length--;
		return this._buffer.shift();
	}
	,get: function(index,smart) {
		if(smart == null) {
			smart = false;
		}
		if(smart || index < 0) {
			index %= this._length;
			if(index < 0) {
				index += this._length;
			}
		}
		return this.getElement(index);
	}
	,getElement: function(index) {
		if(this._length < 1 || this._buffer == null) {
			return null;
		}
		return this._buffer[index];
	}
	,setElement: function(index,v) {
		if(this._buffer == null) {
			this._buffer = [];
		}
		this._buffer[index] = v;
		++index;
		if(this._length < index) {
			this._length = index;
		}
	}
	,indexOf: function(v,fromIndex) {
		if(fromIndex == null) {
			fromIndex = 0;
		}
		if(this._buffer == null) {
			return -1;
		}
		if(this._length < 1) {
			return -1;
		}
		return this._buffer.indexOf(v,fromIndex);
	}
	,insert: function(index,v) {
		if(this._buffer == null) {
			this._buffer = [];
		}
		this._buffer.splice(index,0,v);
		this._length++;
	}
	,remove: function(v,fromIndex) {
		if(fromIndex == null) {
			fromIndex = 0;
		}
		if(this._buffer == null || this._length < 1) {
			return -1;
		}
		var id = this.indexOf(v,fromIndex);
		if(id == -1) {
			return -1;
		}
		this._buffer.splice(id,1);
		this._length--;
		return id;
	}
	,removeAt: function(index,count) {
		if(count == null) {
			count = 1;
		}
		if(this._buffer == null) {
			return;
		}
		if(this._length < 1) {
			return;
		}
		if(count < 1) {
			return;
		}
		if(index + count >= this._length) {
			count = this._length - index;
		}
		if(count < 1) {
			return;
		}
		this._length -= count;
		this._buffer.splice(index,count);
	}
	,unshift: function(v) {
		if(this._buffer == null) {
			this._buffer = [];
		}
		this._buffer.unshift(v);
		this._length++;
	}
	,sort: function(f) {
		if(this._buffer == null) {
			return;
		}
		if(this._length < 2) {
			return;
		}
		this._buffer.sort(f);
	}
	,toString: function() {
		if(this._buffer != null) {
			return this._length + " " + this._buffer.toString();
		}
		return "empty";
	}
	,get_length: function() {
		return this._length;
	}
	,set_length: function(v) {
		this._length = v;
		if(this._buffer == null) {
			return this._length;
		}
		var len = this._buffer.length;
		if(v < len) {
			this._buffer.splice(v,len - v);
		}
		return this._length;
	}
	,__class__: lovedna_ds_FastArray
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var lovedna_ds_Fnv = function() {
	this._lasttype = 0;
	this.reset();
};
$hxClasses["lovedna.ds.Fnv"] = lovedna_ds_Fnv;
lovedna_ds_Fnv.__name__ = ["lovedna","ds","Fnv"];
lovedna_ds_Fnv.prototype = {
	reset: function() {
		this._value = 0;
		this._index = 0;
		this._lasttype = 0;
	}
	,getCode: function() {
		return this._value;
	}
	,getString: function() {
		return lovedna_utils_Helper.intToHex(this._value);
	}
	,addInt: function(v) {
		if(this._lasttype != 2) {
			this._lasttype = 2;
			this._addInt(this._lasttype);
		}
		this._addInt(v);
	}
	,addString: function(v) {
		if(this._lasttype != 4) {
			this._lasttype = 4;
			this._addInt(this._lasttype);
		}
		var len = v.length;
		this._addInt(len);
		while(len-- > 0) this._addInt(HxOverrides.cca(v,len));
	}
	,addFloat: function(v) {
		if(this._lasttype != 8) {
			this._lasttype = 8;
			this._addInt(this._lasttype);
		}
		var iv = lovedna_utils_Helper.floor(v);
		var fv = lovedna_utils_Helper.fract(v);
		this._addInt(iv);
		if(fv != 0) {
			this._addInt(lovedna_utils_Helper.round(fv * 4294967296.0));
		}
	}
	,addBool: function(v) {
		if(this._lasttype != 16) {
			this._lasttype = 16;
			this._addInt(this._lasttype);
		}
		this._addInt(v ? 1 : 0);
	}
	,_addInt: function(v) {
		this._value = this._value * 16777619;
		this._value = this._value ^ v;
	}
	,__class__: lovedna_ds_Fnv
};
var lovedna_ds_IFillArray = function() { };
$hxClasses["lovedna.ds.IFillArray"] = lovedna_ds_IFillArray;
lovedna_ds_IFillArray.__name__ = ["lovedna","ds","IFillArray"];
lovedna_ds_IFillArray.prototype = {
	__class__: lovedna_ds_IFillArray
};
var lovedna_ds_StringLine = function(source,keepLine) {
	if(keepLine == null) {
		keepLine = false;
	}
	if(source == null) {
		source = "";
	}
	this._list = [];
	this._keep = keepLine;
	this.decode(source);
};
$hxClasses["lovedna.ds.StringLine"] = lovedna_ds_StringLine;
lovedna_ds_StringLine.__name__ = ["lovedna","ds","StringLine"];
lovedna_ds_StringLine.prototype = {
	readLine: function() {
		if(this._position < this._length) {
			return this._list[this._position++];
		}
		return null;
	}
	,writeLine: function(v) {
		v = StringTools.replace(v,"\r","\n");
		var list = v.split("\n");
		var len = list.length;
		var str = "";
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var line = list[i];
			if(line == "") {
				if(!this._keep) {
					continue;
				}
			}
			this._writeLine(line);
		}
	}
	,encode: function() {
		return this._list.join("\n");
	}
	,decode: function(v) {
		if(this._length > 0) {
			this._list.splice(0,this._length);
		}
		this._length = 0;
		this._position = 0;
		if(v == null) {
			return;
		}
		v = StringTools.replace(v,"\r","\n");
		var list = v.split("\n");
		var len = list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var line = list[i];
			if(line == "") {
				if(!this._keep) {
					continue;
				}
			}
			this._list.push(line);
		}
		this._length = this._list.length;
		this._position = 0;
	}
	,_writeLine: function(v) {
		if(this._position >= this._length) {
			this._length++;
		}
		this._list[this._position++] = v;
	}
	,get_position: function() {
		return this._position;
	}
	,get_length: function() {
		return this._length;
	}
	,set_position: function(v) {
		if(v >= 0 && v < this._length) {
			this._position = v;
		}
		return this._position;
	}
	,get_lineAvailable: function() {
		return this._length - this._position;
	}
	,__class__: lovedna_ds_StringLine
	,__properties__: {get_length:"get_length",get_lineAvailable:"get_lineAvailable",set_position:"set_position",get_position:"get_position"}
};
var lovedna_utils_TypeUtil = function() {
};
$hxClasses["lovedna.utils.TypeUtil"] = lovedna_utils_TypeUtil;
lovedna_utils_TypeUtil.__name__ = ["lovedna","utils","TypeUtil"];
lovedna_utils_TypeUtil.getName = function(type) {
	if(lovedna_utils_TypeUtil._typeMap.exists(type)) {
		return lovedna_utils_TypeUtil._typeMap.get(type);
	}
	var name = Type.getClassName(type);
	lovedna_utils_TypeUtil._typeMap.set(type,name);
	return name;
};
lovedna_utils_TypeUtil.createInstance = function(type,args) {
	var ins = null;
	if(args == null) {
		ins = Type.createEmptyInstance(type);
	} else {
		ins = Type.createInstance(type,args);
	}
	if(Std["is"](ins,lovedna_Object)) {
		var obj = ins;
		obj.construct();
	}
	return ins;
};
lovedna_utils_TypeUtil.getClassName = function(v) {
	if(v == null) {
		return "null";
	}
	return Type.getClassName(Type.getClass(v));
};
lovedna_utils_TypeUtil.getClass = function(v) {
	if(lovedna_utils_TypeUtil._typeClassMap.exists(v)) {
		return lovedna_utils_TypeUtil._typeClassMap.get(v);
	}
	var c = Type.getClass(v);
	lovedna_utils_TypeUtil._typeClassMap.set(v,c);
	return c;
};
lovedna_utils_TypeUtil.prototype = {
	__class__: lovedna_utils_TypeUtil
};
var lovedna_events_Event = function(type) {
	this.name = type;
	this._type = lovedna_utils_TypeUtil.getClassName(this) + "." + type + "." + new Date(2018,7,1,18,49,11).getTime();
};
$hxClasses["lovedna.events.Event"] = lovedna_events_Event;
lovedna_events_Event.__name__ = ["lovedna","events","Event"];
lovedna_events_Event.prototype = {
	get_type: function() {
		return this._type;
	}
	,__class__: lovedna_events_Event
	,__properties__: {get_type:"get_type"}
};
var lovedna_events__$EventDispatcher_Listener = function(callback,priority) {
	this.callback = callback;
	this.priority = priority;
};
$hxClasses["lovedna.events._EventDispatcher.Listener"] = lovedna_events__$EventDispatcher_Listener;
lovedna_events__$EventDispatcher_Listener.__name__ = ["lovedna","events","_EventDispatcher","Listener"];
lovedna_events__$EventDispatcher_Listener.prototype = {
	match: function(callback) {
		return this.callback == callback;
	}
	,__class__: lovedna_events__$EventDispatcher_Listener
};
var lovedna_events_KeyEvent = function(type) {
	lovedna_events_Event.call(this,type);
};
$hxClasses["lovedna.events.KeyEvent"] = lovedna_events_KeyEvent;
lovedna_events_KeyEvent.__name__ = ["lovedna","events","KeyEvent"];
lovedna_events_KeyEvent.__super__ = lovedna_events_Event;
lovedna_events_KeyEvent.prototype = $extend(lovedna_events_Event.prototype,{
	__class__: lovedna_events_KeyEvent
});
var lovedna_events_TouchEvent = function(type) {
	lovedna_events_Event.call(this,type);
};
$hxClasses["lovedna.events.TouchEvent"] = lovedna_events_TouchEvent;
lovedna_events_TouchEvent.__name__ = ["lovedna","events","TouchEvent"];
lovedna_events_TouchEvent.__super__ = lovedna_events_Event;
lovedna_events_TouchEvent.prototype = $extend(lovedna_events_Event.prototype,{
	__class__: lovedna_events_TouchEvent
});
var lovedna_format_atlas_Atlas = function(file) {
	lovedna_events_EventDispatcher.call(this);
	this.frames = new lovedna_ds_FastArray();
	this.file = file;
	this._map = new haxe_ds_StringMap();
};
$hxClasses["lovedna.format.atlas.Atlas"] = lovedna_format_atlas_Atlas;
lovedna_format_atlas_Atlas.__name__ = ["lovedna","format","atlas","Atlas"];
lovedna_format_atlas_Atlas.getAtlas = function(file) {
	return lovedna_format_atlas_Atlas._atlasMap.get(file);
};
lovedna_format_atlas_Atlas.__super__ = lovedna_events_EventDispatcher;
lovedna_format_atlas_Atlas.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	getSprite: function(name) {
		return this._map.get(name);
	}
	,addSprite: function(sprite) {
		if(this._map.exists(sprite.get_name())) {
			return;
		}
		this._map.set(sprite.get_name(),sprite);
		this.frames.push(sprite);
	}
	,encode: function() {
		var data = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		if(this.file == null) {
			this.file = "";
		}
		data.writeUTF(this.file);
		var len = this.frames.get_length();
		data.writeInt(len);
		while(len-- > 0) {
			var f = this.frames.get(len);
			f.encode(data);
		}
		return data;
	}
	,decode: function(data) {
		this.file = data.readUTF();
		lovedna_format_atlas_Atlas._atlasMap.set(this.file,this);
		var len = data.readInt();
		this.frames.clear();
		while(len-- > 0) {
			var f = new lovedna_format_atlas_SpriteData();
			f.decode(data);
			this.frames.push(f);
			this._map.set(f.get_name(),f);
		}
	}
	,__class__: lovedna_format_atlas_Atlas
});
var lovedna_format_atlas_SpriteData = function() {
	this._name = "";
	this.frame = new lovedna_geom_Rect();
	this._rotated = false;
	this.sourceSize = new lovedna_math_Vector2();
	this.offset = new lovedna_math_Vector2();
	this.pivot = new lovedna_math_Vector2(0.5,0.5);
	this.border = new lovedna_geom_Rect(0,0,0,0);
	this._inited = false;
};
$hxClasses["lovedna.format.atlas.SpriteData"] = lovedna_format_atlas_SpriteData;
lovedna_format_atlas_SpriteData.__name__ = ["lovedna","format","atlas","SpriteData"];
lovedna_format_atlas_SpriteData.prototype = {
	hasBorder: function() {
		if(!(this.border.x > 0 || this.border.y > 0 || this.border.get_width() > 0)) {
			return this.border.get_height() > 0;
		} else {
			return true;
		}
	}
	,encode: function(bytes) {
		bytes.writeUTF(this.get_name());
		bytes.writeFloat(this.frame.x);
		bytes.writeFloat(this.frame.y);
		bytes.writeFloat(this.frame.get_width());
		bytes.writeFloat(this.frame.get_height());
		bytes.writeBoolean(this.get_rotated());
		if(this.sourceSize.x == 0) {
			this.sourceSize.x = this.frame.get_width();
		}
		if(this.sourceSize.y == 0) {
			this.sourceSize.y = this.frame.get_height();
		}
		bytes.writeFloat(this.sourceSize.x);
		bytes.writeFloat(this.sourceSize.y);
		bytes.writeFloat(this.offset.x);
		bytes.writeFloat(this.offset.y);
		bytes.writeFloat(this.pivot.x);
		bytes.writeFloat(this.pivot.y);
		bytes.writeFloat(this.border.x);
		bytes.writeFloat(this.border.y);
		bytes.writeFloat(this.border.get_width());
		bytes.writeFloat(this.border.get_height());
	}
	,decode: function(bytes) {
		this.set_name(bytes.readUTF());
		this.frame.set(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		this.set_rotated(bytes.readBoolean());
		this.sourceSize.set(bytes.readFloat(),bytes.readFloat());
		this.offset.set(bytes.readFloat(),bytes.readFloat());
		this.pivot.set(bytes.readFloat(),bytes.readFloat());
		this.border.set(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		this._inited = true;
	}
	,get_name: function() {
		return this._name;
	}
	,set_name: function(v) {
		if(!this._inited) {
			this._name = v;
		}
		return this._name;
	}
	,get_rotated: function() {
		return this._rotated;
	}
	,set_rotated: function(v) {
		if(!this._inited) {
			this._rotated = v;
		}
		return this._rotated;
	}
	,__class__: lovedna_format_atlas_SpriteData
	,__properties__: {set_rotated:"set_rotated",get_rotated:"get_rotated",set_name:"set_name",get_name:"get_name"}
};
var lovedna_format_fnt_Fnt = function() {
	lovedna_events_EventDispatcher.call(this);
	this._chars = new haxe_ds_IntMap();
	this.bold = 0;
	this.italic = 0;
	this.lineHeight = 0;
	this.base = 0;
	this.scaleW = 0;
	this.scaleH = 0;
	this.pages = 1;
	this.packed = 0;
	this.id = 0;
};
$hxClasses["lovedna.format.fnt.Fnt"] = lovedna_format_fnt_Fnt;
lovedna_format_fnt_Fnt.__name__ = ["lovedna","format","fnt","Fnt"];
lovedna_format_fnt_Fnt.__super__ = lovedna_events_EventDispatcher;
lovedna_format_fnt_Fnt.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	getChar: function(id) {
		return this._chars.get(id);
	}
	,encode: function() {
		var data = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		data.writeUTF(this.face);
		data.writeInt(this.size);
		data.writeInt(this.bold);
		data.writeInt(this.italic);
		data.writeInt(this.lineHeight);
		data.writeInt(this.base);
		data.writeInt(this.scaleW);
		data.writeInt(this.scaleH);
		data.writeInt(this.pages);
		data.writeInt(this.packed);
		data.writeInt(this.id);
		data.writeUTF(this.file);
		data.writeInt(this.count);
		var k = this._chars.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var $char = this._chars.get(k1);
			$char.encode(data);
		}
		return data;
	}
	,decode: function(data) {
		this.face = data.readUTF();
		this.size = data.readInt();
		this.bold = data.readInt();
		this.italic = data.readInt();
		this.lineHeight = data.readInt();
		this.base = data.readInt();
		this.scaleW = data.readInt();
		this.scaleH = data.readInt();
		this.pages = data.readInt();
		this.packed = data.readInt();
		this.id = data.readInt();
		this.file = data.readUTF();
		this.count = data.readInt();
		var len = this.count;
		while(len-- > 0) {
			var $char = new lovedna_format_fnt_FntChar();
			$char.decode(data);
			this.addChar($char);
		}
	}
	,addChar: function($char) {
		this._chars.set($char.id,$char);
	}
	,__class__: lovedna_format_fnt_Fnt
});
var lovedna_format_fnt_FntChar = function() {
};
$hxClasses["lovedna.format.fnt.FntChar"] = lovedna_format_fnt_FntChar;
lovedna_format_fnt_FntChar.__name__ = ["lovedna","format","fnt","FntChar"];
lovedna_format_fnt_FntChar.prototype = {
	parse: function(v) {
		this.id = lovedna_utils_DynamicUtil.getInt(v,"id");
		this.x = lovedna_utils_DynamicUtil.getInt(v,"x");
		this.y = lovedna_utils_DynamicUtil.getInt(v,"y");
		this.width = lovedna_utils_DynamicUtil.getInt(v,"width");
		this.height = lovedna_utils_DynamicUtil.getInt(v,"height");
		this.xoffset = lovedna_utils_DynamicUtil.getFloat(v,"xoffset");
		this.yoffset = lovedna_utils_DynamicUtil.getFloat(v,"yoffset");
		this.xadvance = lovedna_utils_DynamicUtil.getFloat(v,"xadvance");
		this.page = lovedna_utils_DynamicUtil.getInt(v,"page");
	}
	,encode: function(bytes) {
		bytes.writeInt(this.id);
		bytes.writeInt(this.x);
		bytes.writeInt(this.y);
		bytes.writeInt(this.width);
		bytes.writeInt(this.height);
		bytes.writeFloat(this.xoffset);
		bytes.writeFloat(this.yoffset);
		bytes.writeFloat(this.xadvance);
		bytes.writeInt(this.page);
	}
	,decode: function(bytes) {
		this.id = bytes.readInt();
		this.x = bytes.readInt();
		this.y = bytes.readInt();
		this.width = bytes.readInt();
		this.height = bytes.readInt();
		this.xoffset = bytes.readFloat();
		this.yoffset = bytes.readFloat();
		this.xadvance = bytes.readFloat();
		this.page = bytes.readInt();
	}
	,__class__: lovedna_format_fnt_FntChar
};
var lovedna_format_g3d_DataG3D = function() {
	lovedna_events_EventDispatcher.call(this);
};
$hxClasses["lovedna.format.g3d.DataG3D"] = lovedna_format_g3d_DataG3D;
lovedna_format_g3d_DataG3D.__name__ = ["lovedna","format","g3d","DataG3D"];
lovedna_format_g3d_DataG3D.encode = function(model) {
	var bytes = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
	bytes.writeUTFBytes("G3D");
	bytes.writeInt(1);
	model.encode(bytes);
	return bytes;
};
lovedna_format_g3d_DataG3D.__super__ = lovedna_events_EventDispatcher;
lovedna_format_g3d_DataG3D.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	__class__: lovedna_format_g3d_DataG3D
});
var lovedna_format_g3d_ModelAnimation = function() {
	this.nodeAnimations = [];
	this.totalTime = 0;
};
$hxClasses["lovedna.format.g3d.ModelAnimation"] = lovedna_format_g3d_ModelAnimation;
lovedna_format_g3d_ModelAnimation.__name__ = ["lovedna","format","g3d","ModelAnimation"];
lovedna_format_g3d_ModelAnimation.prototype = {
	add: function(v) {
		if(this.nodeAnimations == null) {
			this.nodeAnimations = [];
		}
		this.nodeAnimations.push(v);
		if(v.totalTime > this.totalTime) {
			this.totalTime = v.totalTime;
		}
	}
	,encode: function(bytes) {
		bytes.writeUTF(this.id);
		bytes.writeInt(this.nodeAnimations.length);
		var _g1 = 0;
		var _g = this.nodeAnimations.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.nodeAnimations[i].encode(bytes);
		}
	}
	,decode: function(bytes) {
		this.id = bytes.readUTF();
		var len = bytes.readInt();
		while(len-- > 0) {
			var ani = new lovedna_format_g3d_ModelNodeAnimation();
			ani.decode(bytes);
			this.add(ani);
		}
	}
	,__class__: lovedna_format_g3d_ModelAnimation
};
var lovedna_format_g3d_ModelData = function() {
	this.id = "";
};
$hxClasses["lovedna.format.g3d.ModelData"] = lovedna_format_g3d_ModelData;
lovedna_format_g3d_ModelData.__name__ = ["lovedna","format","g3d","ModelData"];
lovedna_format_g3d_ModelData.prototype = {
	clear: function() {
		this.meshes = null;
		this.materials = null;
		this.nodes = null;
		this.animations = null;
		this.bones = null;
		lovedna_format_g3d_ModelData.current = this;
		this.partCount = 0;
	}
	,addMesh: function(v) {
		if(v == null) {
			return;
		}
		if(this.meshes == null) {
			this.meshes = [];
		}
		if(v.id == null) {
			v.id = this.meshes.length + "";
		}
		this.meshes.push(v);
	}
	,getMeshById: function(id) {
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.id == id) {
				return m;
			}
		}
		return null;
	}
	,getMeshByPartId: function(id) {
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.getPart(id) != null) {
				return m;
			}
		}
		return null;
	}
	,addNode: function(v) {
		if(v == null) {
			return;
		}
		if(this.nodes == null) {
			this.nodes = [];
		}
		this.nodes.push(v);
	}
	,addMaterial: function(v) {
		if(v == null) {
			return;
		}
		if(this.materials == null) {
			this.materials = [];
		}
		this.materials.push(v);
		v.Init();
	}
	,getMaterial: function(id) {
		if(id == null) {
			id = "";
		}
		if(this.materials == null) {
			return null;
		}
		if(this.materials.length == 1 && id == "") {
			return this.materials[0];
		}
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var mat = _g1[_g];
			++_g;
			if(mat.id == id) {
				return mat;
			}
		}
		return null;
	}
	,addBone: function(v) {
		if(v == null) {
			throw new js__$Boot_HaxeError("bone is null");
		}
		if(this.bones == null) {
			this.bones = new haxe_ds_StringMap();
		}
		if(this.bones.exists(v.id)) {
			return;
		}
		this.bones.set(v.id,v);
	}
	,getBone: function(name) {
		if(this.bones == null) {
			return null;
		}
		return this.bones.get(name);
	}
	,addAnimation: function(v) {
		if(this.animations == null) {
			this.animations = [];
		}
		this.animations.push(v);
	}
	,getAnimation: function(id) {
		if(id == null) {
			id = "";
		}
		if(this.animations == null) {
			return null;
		}
		if(this.animations.length == 1 && id == "") {
			return this.animations[0];
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var ani = _g1[_g];
			++_g;
			if(ani.id == id) {
				return ani;
			}
		}
		return null;
	}
	,init: function() {
		if(this.nodes != null) {
			var _g1 = 0;
			var _g = this.nodes.length;
			while(_g1 < _g) {
				var i = _g1++;
				var node = this.nodes[i];
				this.buildNode(node);
			}
		}
		if(this.meshes != null) {
			var _g11 = 0;
			var _g2 = this.meshes.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var mesh = this.meshes[i1];
				mesh.init();
			}
		}
	}
	,dispose: function() {
		if(this.meshes != null) {
			var _g1 = 0;
			var _g = this.meshes.length;
			while(_g1 < _g) {
				var i = _g1++;
				var mesh = this.meshes[i];
				mesh.dispose();
			}
		}
	}
	,buildNode: function(node) {
		if(node.parts != null) {
			var _g1 = 0;
			var _g = node.parts.length;
			while(_g1 < _g) {
				var j = _g1++;
				var part = node.parts[j];
				var modelMesh = this.getMeshByPartId(part.meshPartId);
				modelMesh.addNodePart(part);
				if(part.bones != null) {
					var _g3 = 0;
					var _g2 = part.bones.length;
					while(_g3 < _g2) {
						var k = _g3++;
						this.addBone(part.getBone(part.bones[k]));
					}
				}
			}
		}
		if(node.children != null) {
			var _g4 = 0;
			var _g11 = node.children;
			while(_g4 < _g11.length) {
				var n = _g11[_g4];
				++_g4;
				this.buildNode(n);
			}
		}
	}
	,encode: function(bytes) {
		var b32 = new lovedna_ds_Bit32();
		b32.setElement(1,this.meshes != null);
		b32.setElement(2,this.materials != null);
		b32.setElement(3,this.nodes != null);
		b32.setElement(4,this.animations != null);
		bytes.writeUTF(this.id);
		bytes.writeInt(b32.value);
		if(this.meshes != null) {
			var len = this.meshes.length;
			bytes.writeInt(len);
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				this.meshes[i].encode(bytes);
			}
		}
		if(this.materials != null) {
			var len1 = this.materials.length;
			bytes.writeInt(len1);
			var _g11 = 0;
			var _g2 = len1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.materials[i1].encode(bytes);
			}
		}
		if(this.nodes != null) {
			var len2 = this.nodes.length;
			bytes.writeInt(len2);
			var _g12 = 0;
			var _g3 = len2;
			while(_g12 < _g3) {
				var i2 = _g12++;
				this.nodes[i2].encode(bytes);
			}
		}
		if(this.animations != null) {
			var len3 = this.animations.length;
			bytes.writeInt(len3);
			var _g13 = 0;
			var _g4 = len3;
			while(_g13 < _g4) {
				var i3 = _g13++;
				this.animations[i3].encode(bytes);
			}
		}
	}
	,decode: function(bytes) {
		this.meshes = null;
		this.materials = null;
		this.nodes = null;
		this.animations = null;
		this.id = bytes.readUTF();
		var b32 = new lovedna_ds_Bit32();
		b32.value = bytes.readInt();
		if(b32.getElement(1)) {
			var len = bytes.readInt();
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var mesh = new lovedna_format_g3d_ModelMesh();
				mesh.decode(bytes);
				this.addMesh(mesh);
			}
		}
		if(b32.getElement(2)) {
			var len1 = bytes.readInt();
			var _g11 = 0;
			var _g2 = len1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var m = new lovedna_format_g3d_ModelMaterial();
				m.decode(bytes);
				this.addMaterial(m);
			}
		}
		if(b32.getElement(3)) {
			var len2 = bytes.readInt();
			var _g12 = 0;
			var _g3 = len2;
			while(_g12 < _g3) {
				var i2 = _g12++;
				var n = new lovedna_format_g3d_ModelNode();
				n.decode(bytes);
				this.addNode(n);
			}
		}
		if(b32.getElement(4)) {
			var len3 = bytes.readInt();
			var _g13 = 0;
			var _g4 = len3;
			while(_g13 < _g4) {
				var i3 = _g13++;
				var a = new lovedna_format_g3d_ModelAnimation();
				a.decode(bytes);
				this.addAnimation(a);
			}
		}
	}
	,__class__: lovedna_format_g3d_ModelData
};
var lovedna_format_g3d_ModelMaterial = function() {
	this.opacity = 1;
	this.shininess = 2;
};
$hxClasses["lovedna.format.g3d.ModelMaterial"] = lovedna_format_g3d_ModelMaterial;
lovedna_format_g3d_ModelMaterial.__name__ = ["lovedna","format","g3d","ModelMaterial"];
lovedna_format_g3d_ModelMaterial.prototype = {
	addTexture: function(v) {
		if(this.textures == null) {
			this.textures = [];
		}
		this.textures.push(v);
		v.Init();
	}
	,getTexture: function(usage) {
		if(usage == null) {
			usage = 0;
		}
		if(this.textures == null) {
			return null;
		}
		if(usage == 0) {
			return this.textures[0];
		}
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.usage == usage) {
				return t;
			}
		}
		return null;
	}
	,Init: function() {
		if(this.ambient != null) {
			this.ambient.w = this.opacity;
		}
		if(this.diffuse != null) {
			this.diffuse.w = this.opacity;
		}
		if(this.specular != null) {
			this.specular.w = this.opacity;
		}
		if(this.emissive != null) {
			this.emissive.w = this.opacity;
		}
		if(this.reflection != null) {
			this.reflection.w = this.opacity;
		}
	}
	,decode: function(bytes) {
		this.textures = null;
		this.ambient = null;
		this.diffuse = null;
		this.specular = null;
		this.emissive = null;
		this.reflection = null;
		this.id = bytes.readUTF();
		var b32 = new lovedna_ds_Bit32();
		b32.value = bytes.readInt();
		if(b32.getElement(1)) {
			this.ambient = new lovedna_math_Vector4(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),1);
		}
		if(b32.getElement(2)) {
			this.diffuse = new lovedna_math_Vector4(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),1);
		}
		if(b32.getElement(3)) {
			this.emissive = new lovedna_math_Vector4(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),1);
		}
		if(b32.getElement(4)) {
			this.specular = new lovedna_math_Vector4(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),1);
		}
		if(b32.getElement(5)) {
			this.reflection = new lovedna_math_Vector4(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),1);
		}
		this.opacity = bytes.readFloat();
		this.shininess = bytes.readFloat();
		if(b32.getElement(6)) {
			var len = bytes.readInt();
			while(len-- > 0) {
				var tex = new lovedna_format_g3d_ModelTexture();
				tex.decode(bytes);
				this.addTexture(tex);
			}
		}
	}
	,encode: function(bytes) {
		bytes.writeUTF(this.id);
		var b32 = new lovedna_ds_Bit32(0);
		b32.setElement(1,this.ambient != null);
		b32.setElement(2,this.diffuse != null);
		b32.setElement(3,this.emissive != null);
		b32.setElement(4,this.specular != null);
		b32.setElement(5,this.reflection != null);
		b32.setElement(6,this.textures != null);
		bytes.writeInt(b32.value);
		if(this.ambient != null) {
			bytes.writeFloat(this.ambient.x);
			bytes.writeFloat(this.ambient.y);
			bytes.writeFloat(this.ambient.z);
		}
		if(this.diffuse != null) {
			bytes.writeFloat(this.diffuse.x);
			bytes.writeFloat(this.diffuse.y);
			bytes.writeFloat(this.diffuse.z);
		}
		if(this.emissive != null) {
			bytes.writeFloat(this.emissive.x);
			bytes.writeFloat(this.emissive.y);
			bytes.writeFloat(this.emissive.z);
		}
		if(this.specular != null) {
			bytes.writeFloat(this.specular.x);
			bytes.writeFloat(this.specular.y);
			bytes.writeFloat(this.specular.z);
		}
		if(this.reflection != null) {
			bytes.writeFloat(this.reflection.x);
			bytes.writeFloat(this.reflection.y);
			bytes.writeFloat(this.reflection.z);
		}
		bytes.writeFloat(this.opacity);
		bytes.writeFloat(this.shininess);
		if(this.textures != null) {
			bytes.writeInt(this.textures.length);
			var _g1 = 0;
			var _g = this.textures.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.textures[i].encode(bytes);
			}
		}
	}
	,__class__: lovedna_format_g3d_ModelMaterial
};
var lovedna_format_g3d_ModelMesh = function() {
};
$hxClasses["lovedna.format.g3d.ModelMesh"] = lovedna_format_g3d_ModelMesh;
lovedna_format_g3d_ModelMesh.__name__ = ["lovedna","format","g3d","ModelMesh"];
lovedna_format_g3d_ModelMesh.prototype = {
	encode: function(bytes) {
		bytes.writeUTF(this.id);
		var b32 = new lovedna_ds_Bit32();
		b32.setElement(1,this.attributes != null);
		b32.setElement(2,this.vertices != null);
		b32.setElement(3,this.parts != null);
		bytes.writeInt(b32.value);
		if(this.attributes != null) {
			bytes.writeInt(this.attributes.length);
			var _g1 = 0;
			var _g = this.attributes.length;
			while(_g1 < _g) {
				var i = _g1++;
				bytes.writeUTF(this.attributes[i]);
			}
		}
		if(this.vertices != null) {
			bytes.writeInt(this.vertices.length);
			var _g11 = 0;
			var _g2 = this.vertices.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				bytes.writeFloat(this.vertices[i1]);
			}
		}
		if(this.parts != null) {
			bytes.writeInt(this.parts.length);
			var _g12 = 0;
			var _g3 = this.parts.length;
			while(_g12 < _g3) {
				var i2 = _g12++;
				this.parts[i2].encode(bytes);
			}
		}
	}
	,decode: function(bytes) {
		this.parts = null;
		this.id = bytes.readUTF();
		var b32 = new lovedna_ds_Bit32();
		b32.value = bytes.readInt();
		if(b32.getElement(1)) {
			this.attributes = [];
			var len = bytes.readInt();
			while(len-- > 0) this.attributes.push(bytes.readUTF());
		}
		if(b32.getElement(2)) {
			this.vertices = [];
			var len1 = bytes.readInt();
			while(len1-- > 0) this.vertices.push(bytes.readFloat());
		}
		if(b32.getElement(3)) {
			var len2 = bytes.readInt();
			while(len2-- > 0) {
				var part = new lovedna_format_g3d_ModelMeshPart();
				part.decode(bytes);
				this.addPart(part);
			}
		}
	}
	,addPart: function(v) {
		if(this.parts == null) {
			this.parts = [];
		}
		v.mesh = this;
		this.parts.push(v);
	}
	,getPart: function(id) {
		var len = this.parts.length;
		while(len-- > 0) {
			var part = this.parts[len];
			if(part.id == id) {
				return part;
			}
		}
		return null;
	}
	,addNodePart: function(v) {
		if(this.nodeParts == null) {
			this.nodeParts = [];
		}
		this.nodeParts.push(v);
	}
	,init: function() {
		this.geom = new lovedna_format_mesh_Geometry();
		var len = this.attributes.length;
		var funlist = [];
		var stride = 0;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var attName = this.attributes[i];
			if(attName == "POSITION") {
				this.geom.position = [];
				funlist.push($bind(this,this._readPOSITION));
				stride += 3;
			} else if(attName == "NORMAL") {
				this.geom.normal = [];
				funlist.push($bind(this,this._readNORMAL));
				stride += 3;
			} else if(attName == "BINORMAL") {
				this.geom.normal2 = [];
				funlist.push($bind(this,this._readBINORMAL));
				stride += 3;
			} else if(attName == "TANGENT") {
				this.geom.tangent = [];
				funlist.push($bind(this,this._readTANGENT));
				stride += 3;
			} else if(attName == "COLOR") {
				this.geom.color = [];
				funlist.push($bind(this,this._readCOLOR));
				stride += 4;
			} else if(attName == "TEXCOORD0") {
				this.geom.uv = [];
				funlist.push($bind(this,this._readTEXCOORD0));
				stride += 2;
			} else if(attName == "TEXCOORD1") {
				this.geom.uv2 = [];
				funlist.push($bind(this,this._readTEXCOORD1));
				stride += 2;
			} else if(attName == "BLENDWEIGHT0") {
				this.geom.boneWeight = [];
				funlist.push($bind(this,this._readBLENDWEIGHT0));
				stride += 2;
			} else if(attName == "BLENDWEIGHT1") {
				funlist.push($bind(this,this._readBLENDWEIGHT1));
				stride += 2;
			} else if(attName == "BLENDWEIGHT2") {
				funlist.push($bind(this,this._readBLENDWEIGHT2));
				stride += 2;
			} else if(attName == "BLENDWEIGHT3") {
				funlist.push($bind(this,this._readBLENDWEIGHT3));
				stride += 2;
			}
		}
		var len1 = Std["int"](this.vertices.length / stride);
		if(len1 < this.vertices.length / stride) {
			throw new js__$Boot_HaxeError("error vertices count");
		}
		var offset = 0;
		var funlen = funlist.length;
		var _g11 = 0;
		var _g2 = len1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var _g3 = 0;
			var _g21 = funlen;
			while(_g3 < _g21) {
				var j = _g3++;
				offset += funlist[j](offset);
			}
		}
		if(this.nodeParts != null) {
			var len2 = this.nodeParts.length;
			var _g12 = 0;
			var _g4 = len2;
			while(_g12 < _g4) {
				var i2 = _g12++;
				var v = this.nodeParts[i2];
				var part = this.getPart(v.meshPartId);
				var id = this.geom.groups.length;
				part.subMeshId = id;
				this.geom.addGroup(part.indices);
			}
		}
	}
	,dispose: function() {
		this.vertices = null;
		if(this.nodeParts != null) {
			var len = this.nodeParts.length;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var v = this.nodeParts[i];
				var part = this.getPart(v.meshPartId);
				part.indices = null;
			}
		}
	}
	,_readPOSITION: function(offset) {
		var pos = new lovedna_math_Vector3().fromArray(this.vertices,offset);
		if(lovedna_format_g3d_ModelData.transform != null) {
			lovedna_format_g3d_ModelData.transform.transformVector(pos);
		}
		this.geom.position.push(pos);
		return 3;
	}
	,_readNORMAL: function(offset) {
		var n = new lovedna_math_Vector3().fromArray(this.vertices,offset);
		if(lovedna_format_g3d_ModelData.transform != null) {
			lovedna_format_g3d_ModelData.transform.transformVector(n);
		}
		this.geom.normal.push(n.normalize());
		return 3;
	}
	,_readBINORMAL: function(offset) {
		var n = new lovedna_math_Vector3().fromArray(this.vertices,offset);
		if(lovedna_format_g3d_ModelData.transform != null) {
			lovedna_format_g3d_ModelData.transform.transformVector(n);
		}
		this.geom.normal2.push(n);
		return 3;
	}
	,_readTANGENT: function(offset) {
		this.geom.tangent.push(new lovedna_math_Vector4().fromArray(this.vertices,offset));
		return 3;
	}
	,_readCOLOR: function(offset) {
		this.geom.color.push(new lovedna_math_Vector4().fromArray(this.vertices,offset));
		return 4;
	}
	,_readTEXCOORD0: function(offset) {
		this.geom.uv.push(new lovedna_math_Vector2().fromArray(this.vertices,offset));
		return 2;
	}
	,_readTEXCOORD1: function(offset) {
		this.geom.uv2.push(new lovedna_math_Vector2().fromArray(this.vertices,offset));
		return 2;
	}
	,_readBLENDWEIGHT0: function(offset) {
		var weight = new lovedna_format_mesh_BoneWeight();
		weight.index.x = this.vertices[offset];
		weight.weight.x = this.vertices[offset + 1];
		this.geom.boneWeight.push(weight);
		return 2;
	}
	,_readBLENDWEIGHT1: function(offset) {
		var weight = this.geom.boneWeight[this.geom.boneWeight.length - 1];
		weight.index.y = this.vertices[offset];
		weight.weight.y = this.vertices[offset + 1];
		return 2;
	}
	,_readBLENDWEIGHT2: function(offset) {
		var weight = this.geom.boneWeight[this.geom.boneWeight.length - 1];
		weight.index.z = this.vertices[offset];
		weight.weight.y = this.vertices[offset + 1];
		return 2;
	}
	,_readBLENDWEIGHT3: function(offset) {
		var weight = this.geom.boneWeight[this.geom.boneWeight.length - 1];
		weight.index.w = this.vertices[offset];
		weight.weight.w = this.vertices[offset + 1];
		return 2;
	}
	,__class__: lovedna_format_g3d_ModelMesh
};
var lovedna_format_g3d_ModelMeshPart = function() {
	this.primitiveType = "TRIANGLES";
};
$hxClasses["lovedna.format.g3d.ModelMeshPart"] = lovedna_format_g3d_ModelMeshPart;
lovedna_format_g3d_ModelMeshPart.__name__ = ["lovedna","format","g3d","ModelMeshPart"];
lovedna_format_g3d_ModelMeshPart.prototype = {
	encode: function(bytes) {
		bytes.writeUTF(this.id);
		bytes.writeUTF(this.primitiveType);
		if(this.indices != null) {
			bytes.writeInt(this.indices.length);
			var _g1 = 0;
			var _g = this.indices.length;
			while(_g1 < _g) {
				var i = _g1++;
				bytes.writeShort(this.indices[i]);
			}
		} else {
			bytes.writeInt(0);
		}
	}
	,decode: function(bytes) {
		this.id = bytes.readUTF();
		this.primitiveType = bytes.readUTF();
		var len = bytes.readInt();
		this.indices = [];
		while(len-- > 0) this.indices.push(bytes.readShort());
	}
	,__class__: lovedna_format_g3d_ModelMeshPart
};
var lovedna_format_g3d_ModelNode = function() {
};
$hxClasses["lovedna.format.g3d.ModelNode"] = lovedna_format_g3d_ModelNode;
lovedna_format_g3d_ModelNode.__name__ = ["lovedna","format","g3d","ModelNode"];
lovedna_format_g3d_ModelNode.prototype = {
	addPart: function(v) {
		if(this.parts == null) {
			this.parts = [];
		}
		this.parts.push(v);
		v.node = this;
	}
	,addChildren: function(v) {
		if(this.children == null) {
			this.children = [];
		}
		this.children.push(v);
		v.parent = this;
	}
	,decode: function(bytes) {
		this.parts = null;
		this.children = null;
		this.meshId = null;
		this.translation = null;
		this.rotation = null;
		this.scale = null;
		this.id = bytes.readUTF();
		var b32 = new lovedna_ds_Bit32();
		b32.value = bytes.readInt();
		if(b32.getElement(1)) {
			this.translation = new lovedna_math_Vector3(bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		}
		if(b32.getElement(2)) {
			this.rotation = new lovedna_math_Quaternion(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		}
		if(b32.getElement(3)) {
			this.scale = new lovedna_math_Vector3(bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		}
		if(b32.getElement(4)) {
			this.meshId = bytes.readUTF();
		}
		if(b32.getElement(5)) {
			var len = bytes.readInt();
			while(len-- > 0) {
				var part = new lovedna_format_g3d_ModelNodePart();
				part.decode(bytes);
				this.addPart(part);
			}
		}
		if(b32.getElement(6)) {
			var len1 = bytes.readInt();
			while(len1-- > 0) {
				var part1 = new lovedna_format_g3d_ModelNode();
				part1.decode(bytes);
				this.addChildren(part1);
			}
		}
		var tmp = this.parts != null;
	}
	,encode: function(bytes) {
		bytes.writeUTF(this.id);
		var b32 = new lovedna_ds_Bit32();
		b32.clear();
		b32.setElement(1,this.translation != null);
		b32.setElement(2,this.rotation != null);
		b32.setElement(3,this.scale != null);
		b32.setElement(4,this.meshId != null);
		b32.setElement(5,this.parts != null);
		b32.setElement(6,this.children != null);
		bytes.writeInt(b32.value);
		if(this.translation != null) {
			bytes.writeFloat(this.translation.x);
			bytes.writeFloat(this.translation.y);
			bytes.writeFloat(this.translation.z);
		}
		if(this.rotation != null) {
			bytes.writeFloat(this.rotation.x);
			bytes.writeFloat(this.rotation.y);
			bytes.writeFloat(this.rotation.z);
			bytes.writeFloat(this.rotation.w);
		}
		if(this.scale != null) {
			bytes.writeFloat(this.scale.x);
			bytes.writeFloat(this.scale.y);
			bytes.writeFloat(this.scale.z);
		}
		if(this.meshId != null) {
			bytes.writeUTF(this.meshId);
		}
		if(this.parts != null) {
			var len = this.parts.length;
			bytes.writeInt(len);
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				this.parts[i].encode(bytes);
			}
		}
		if(this.children != null) {
			var len1 = this.children.length;
			bytes.writeInt(len1);
			var _g11 = 0;
			var _g2 = len1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.children[i1].encode(bytes);
			}
		}
	}
	,__class__: lovedna_format_g3d_ModelNode
};
var lovedna_format_g3d_ModelNodeAnimation = function() {
	this.translation = [];
	this.rotation = [];
	this.scaling = [];
	this.totalTime = 0;
	this.count = 0;
	this._tTime = [];
	this._rTime = [];
	this._sTime = [];
	this._rincTime = [];
	this._tincTime = [];
	this._sincTime = [];
	this._ct = new lovedna_math_Vector3();
	this._cr = new lovedna_math_Quaternion();
	this._cs = new lovedna_math_Vector3();
};
$hxClasses["lovedna.format.g3d.ModelNodeAnimation"] = lovedna_format_g3d_ModelNodeAnimation;
lovedna_format_g3d_ModelNodeAnimation.__name__ = ["lovedna","format","g3d","ModelNodeAnimation"];
lovedna_format_g3d_ModelNodeAnimation.prototype = {
	getTranslation: function(time,ease) {
		var len = this.translation.length;
		if(len < 1) {
			return null;
		}
		var id = lovedna_utils_Helper.binarySearchLow(this._tTime,time);
		if(id < 0) {
			this._ct.copy(this.translation[0].value);
			return this._ct;
		}
		var alpha = (time - this._tTime[id]) / this._tincTime[id];
		if(ease != null) {
			alpha = ease(alpha);
		}
		this._ct.copy(this.translation[id].value);
		if(id + 1 < len) {
			this._ct.lerpTo(this.translation[id + 1].value,alpha);
		}
		return this._ct;
	}
	,getRotation: function(time,ease) {
		var len = this.rotation.length;
		if(len < 1) {
			return null;
		}
		var id = lovedna_utils_Helper.binarySearchLow(this._rTime,time);
		if(id < 0) {
			this._cr.copy(this.rotation[0].value);
			return this._cr;
		}
		var alpha = (time - this._rTime[id]) / this._rincTime[id];
		if(ease != null) {
			alpha = ease(alpha);
		}
		this._cr.copy(this.rotation[id].value);
		if(id < len - 1) {
			this._cr.slerpTo(this.rotation[id + 1].value,alpha);
		}
		return this._cr;
	}
	,getScaling: function(time,ease) {
		var len = this.scaling.length;
		if(len < 1) {
			return null;
		}
		var id = lovedna_utils_Helper.binarySearchLow(this._sTime,time);
		if(id < 0) {
			this._cs.copy(this.scaling[0].value);
			return this._cs;
		}
		var alpha = (time - this._sTime[id]) / this._sincTime[id];
		if(ease != null) {
			alpha = ease(alpha);
		}
		this._cs.copy(this.scaling[id].value);
		if(id < len - 1) {
			this._cs.lerpTo(this.scaling[id + 1].value,alpha);
		}
		return this._cs;
	}
	,addTranslation: function(v) {
		this.translation.push(v);
		if(this._tTime.length > 0) {
			this._tincTime.push(v.keytime - this._tTime[this._tTime.length - 1]);
		}
		this._tTime.push(v.keytime);
	}
	,addRotation: function(v) {
		this.rotation.push(v);
		if(this._rTime.length > 0) {
			this._rincTime.push(v.keytime - this._rTime[this._rTime.length - 1]);
		}
		this._rTime.push(v.keytime);
	}
	,addScaling: function(v) {
		this.scaling.push(v);
		if(this._sTime.length > 0) {
			this._sincTime.push(v.keytime - this._sTime[this._sTime.length - 1]);
		}
		this._sTime.push(v.keytime);
	}
	,encode: function(bytes) {
		bytes.writeUTF(this.nodeId);
		bytes.writeInt(this.translation.length);
		var _g1 = 0;
		var _g = this.translation.length;
		while(_g1 < _g) {
			var i = _g1++;
			var frame = this.translation[i];
			bytes.writeFloat(frame.keytime);
			bytes.writeFloat(frame.value.x);
			bytes.writeFloat(frame.value.y);
			bytes.writeFloat(frame.value.z);
		}
		bytes.writeInt(this.rotation.length);
		var _g11 = 0;
		var _g2 = this.rotation.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var frame1 = this.rotation[i1];
			bytes.writeFloat(frame1.keytime);
			bytes.writeFloat(frame1.value.x);
			bytes.writeFloat(frame1.value.y);
			bytes.writeFloat(frame1.value.z);
			bytes.writeFloat(frame1.value.w);
		}
		bytes.writeInt(this.scaling.length);
		var _g12 = 0;
		var _g3 = this.scaling.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var frame2 = this.scaling[i2];
			bytes.writeFloat(frame2.keytime);
			bytes.writeFloat(frame2.value.x);
			bytes.writeFloat(frame2.value.y);
			bytes.writeFloat(frame2.value.z);
		}
	}
	,decode: function(bytes) {
		this.nodeId = bytes.readUTF();
		var len = bytes.readInt();
		while(len-- > 0) this.addTranslation(new lovedna_format_g3d_ModelNodeKeyframe(bytes.readFloat(),new lovedna_math_Vector3(bytes.readFloat(),bytes.readFloat(),bytes.readFloat())));
		var len1 = bytes.readInt();
		while(len1-- > 0) this.addRotation(new lovedna_format_g3d_ModelNodeKeyframe(bytes.readFloat(),new lovedna_math_Quaternion(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),bytes.readFloat())));
		var len2 = bytes.readInt();
		while(len2-- > 0) this.addScaling(new lovedna_format_g3d_ModelNodeKeyframe(bytes.readFloat(),new lovedna_math_Vector3(bytes.readFloat(),bytes.readFloat(),bytes.readFloat())));
		this.init();
	}
	,init: function() {
		this._tincTime.push(1);
		this._rincTime.push(1);
		this._sincTime.push(1);
		this.count = 0;
		this.totalTime = 0;
		var len = this.translation.length;
		if(len > 0) {
			this.count = len;
			this.totalTime = this.translation[len - 1].keytime;
		}
		len = this.rotation.length;
		if(len > 0) {
			if(len > this.count) {
				this.count = len;
			}
			if(this.rotation[len - 1].keytime > this.totalTime) {
				this.totalTime = this.rotation[len - 1].keytime;
			}
		}
		len = this.scaling.length;
		if(len > 0) {
			if(len > this.count) {
				this.count = len;
			}
			if(this.scaling[len - 1].keytime > this.totalTime) {
				this.totalTime = this.scaling[len - 1].keytime;
			}
		}
	}
	,__class__: lovedna_format_g3d_ModelNodeAnimation
};
var lovedna_format_g3d_ModelNodeKeyframe = function(time,value) {
	this.keytime = time;
	this.value = value;
};
$hxClasses["lovedna.format.g3d.ModelNodeKeyframe"] = lovedna_format_g3d_ModelNodeKeyframe;
lovedna_format_g3d_ModelNodeKeyframe.__name__ = ["lovedna","format","g3d","ModelNodeKeyframe"];
lovedna_format_g3d_ModelNodeKeyframe.prototype = {
	__class__: lovedna_format_g3d_ModelNodeKeyframe
};
var lovedna_format_g3d_ModelNodePart = function() {
};
$hxClasses["lovedna.format.g3d.ModelNodePart"] = lovedna_format_g3d_ModelNodePart;
lovedna_format_g3d_ModelNodePart.__name__ = ["lovedna","format","g3d","ModelNodePart"];
lovedna_format_g3d_ModelNodePart.prototype = {
	encode: function(bytes) {
		bytes.writeUTF(this.materialId);
		bytes.writeUTF(this.meshPartId);
		if(this.bones != null) {
			bytes.writeInt(this.bones.length);
			var _g1 = 0;
			var _g = this.bones.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.getBone(this.bones[i]).encode(bytes);
			}
		} else {
			bytes.writeInt(0);
		}
	}
	,decode: function(bytes) {
		lovedna_format_g3d_ModelData.current.partCount++;
		this.bones = null;
		this._boneMap = null;
		this.materialId = bytes.readUTF();
		this.meshPartId = bytes.readUTF();
		var len = bytes.readInt();
		while(len-- > 0) {
			var bone = new lovedna_format_g3d_ModelNodePartBone();
			bone.decode(bytes);
			this.addBone(bone.id,bone.translation,bone.rotation,bone.scale);
		}
	}
	,addBone: function(name,t,r,s) {
		if(this.bones == null) {
			this.bones = [];
			this._boneMap = new haxe_ds_StringMap();
		}
		var bone = new lovedna_format_g3d_ModelNodePartBone();
		this._boneMap.set(name,bone);
		bone.id = name;
		bone.translation = t;
		bone.rotation = r;
		bone.scale = s;
		this.bones.push(name);
	}
	,getBone: function(name) {
		return this._boneMap.get(name);
	}
	,__class__: lovedna_format_g3d_ModelNodePart
};
var lovedna_format_g3d_ModelNodePartBone = function() {
};
$hxClasses["lovedna.format.g3d.ModelNodePartBone"] = lovedna_format_g3d_ModelNodePartBone;
lovedna_format_g3d_ModelNodePartBone.__name__ = ["lovedna","format","g3d","ModelNodePartBone"];
lovedna_format_g3d_ModelNodePartBone.prototype = {
	encode: function(bytes) {
		bytes.writeUTF(this.id);
		var b32 = new lovedna_ds_Bit32();
		b32.setElement(1,this.translation != null);
		b32.setElement(2,this.rotation != null);
		b32.setElement(3,this.scale != null);
		bytes.writeInt(b32.value);
		if(this.translation != null) {
			bytes.writeFloat(this.translation.x);
			bytes.writeFloat(this.translation.y);
			bytes.writeFloat(this.translation.z);
		}
		if(this.rotation != null) {
			bytes.writeFloat(this.rotation.x);
			bytes.writeFloat(this.rotation.y);
			bytes.writeFloat(this.rotation.z);
			bytes.writeFloat(this.rotation.w);
		}
		if(this.scale != null) {
			bytes.writeFloat(this.scale.x);
			bytes.writeFloat(this.scale.y);
			bytes.writeFloat(this.scale.z);
		}
	}
	,decode: function(bytes) {
		this.id = bytes.readUTF();
		var b32 = new lovedna_ds_Bit32();
		b32.value = bytes.readInt();
		if(b32.getElement(1)) {
			this.translation = new lovedna_math_Vector3(bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		}
		if(b32.getElement(2)) {
			this.rotation = new lovedna_math_Quaternion(bytes.readFloat(),bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		}
		if(b32.getElement(3)) {
			this.scale = new lovedna_math_Vector3(bytes.readFloat(),bytes.readFloat(),bytes.readFloat());
		}
	}
	,__class__: lovedna_format_g3d_ModelNodePartBone
};
var lovedna_format_g3d_ModelTexture = function() {
	this.uvTranslation = new lovedna_math_Vector2(0,0);
	this.uvScaling = new lovedna_math_Vector2(1,1);
	this.type = "DIFFUSE";
	this.id = "";
	this.fileName = "";
};
$hxClasses["lovedna.format.g3d.ModelTexture"] = lovedna_format_g3d_ModelTexture;
lovedna_format_g3d_ModelTexture.__name__ = ["lovedna","format","g3d","ModelTexture"];
lovedna_format_g3d_ModelTexture.prototype = {
	Init: function() {
		if(this.type == "AMBIENT") {
			this.usage = 4;
		} else if(this.type == "BUMP") {
			this.usage = 8;
		} else if(this.type == "DIFFUSE") {
			this.usage = 2;
		} else if(this.type == "EMISSIVE") {
			this.usage = 3;
		} else if(this.type == "NONE") {
			this.usage = 1;
		} else if(this.type == "NORMAL") {
			this.usage = 7;
		} else if(this.type == "REFLECTION") {
			this.usage = 10;
		} else if(this.type == "SHININESS") {
			this.usage = 6;
		} else if(this.type == "SPECULAR") {
			this.usage = 5;
		} else if(this.type == "TRANSPARENCY") {
			this.usage = 9;
		}
		this.usage = 0;
	}
	,encode: function(bytes) {
		if(this.id == null) {
			this.id = "";
		}
		bytes.writeUTF(this.id);
		bytes.writeUTF(this.fileName);
		bytes.writeUTF(this.type);
		bytes.writeFloat(this.uvTranslation.x);
		bytes.writeFloat(this.uvTranslation.y);
		bytes.writeFloat(this.uvScaling.x);
		bytes.writeFloat(this.uvScaling.y);
	}
	,decode: function(bytes) {
		this.id = bytes.readUTF();
		this.fileName = bytes.readUTF();
		this.type = bytes.readUTF();
		this.uvTranslation = new lovedna_math_Vector2(bytes.readFloat(),bytes.readFloat());
		this.uvScaling = new lovedna_math_Vector2(bytes.readFloat(),bytes.readFloat());
	}
	,__class__: lovedna_format_g3d_ModelTexture
};
var lovedna_format_mesh_BoneWeight = function() {
	this.index = new lovedna_math_Vector4(0,0,0,0);
	this.weight = new lovedna_math_Vector4(0,0,0,0);
};
$hxClasses["lovedna.format.mesh.BoneWeight"] = lovedna_format_mesh_BoneWeight;
lovedna_format_mesh_BoneWeight.__name__ = ["lovedna","format","mesh","BoneWeight"];
lovedna_format_mesh_BoneWeight.prototype = {
	__class__: lovedna_format_mesh_BoneWeight
};
var lovedna_utils_TempPool = function(create,opts,autoClear) {
	if(autoClear == null) {
		autoClear = true;
	}
	this._list = [];
	this._index = 0;
	this._create = create;
	this._opts = opts;
	this.count = 0;
	if(autoClear) {
		lovedna_utils_TempPool._pools.push(this);
	}
	this._avacount = 10;
};
$hxClasses["lovedna.utils.TempPool"] = lovedna_utils_TempPool;
lovedna_utils_TempPool.__name__ = ["lovedna","utils","TempPool"];
lovedna_utils_TempPool.reset = function() {
	var now = lovedna_Time.get_now();
	var len = lovedna_utils_TempPool._pools.length;
	while(len-- > 0) lovedna_utils_TempPool._pools[len].clear(now);
};
lovedna_utils_TempPool.prototype = {
	get: function() {
		var v = null;
		if(this._index < this._list.length) {
			v = this._list[this._index++];
			if(this._opts != null) {
				if(this._opts.reset != null) {
					this._opts.reset(v);
				}
			}
		} else {
			v = this._create();
			this._list[this._index++] = v;
			if(this._opts != null) {
				if(this._opts.init != null) {
					this._opts.init(v);
				}
			}
		}
		this.count = this._list.length;
		return v;
	}
	,clear: function(now) {
		this._index = 0;
	}
	,__class__: lovedna_utils_TempPool
};
var lovedna_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lovedna.math.Vector2"] = lovedna_math_Vector2;
lovedna_math_Vector2.__name__ = ["lovedna","math","Vector2"];
lovedna_math_Vector2.__interfaces__ = [lovedna_ds_IArrayAccess,lovedna_ds_IFillArray];
lovedna_math_Vector2.__properties__ = {get_one:"get_one",get_zero:"get_zero",get_left:"get_left",get_right:"get_right",get_down:"get_down",get_up:"get_up",get_temp:"get_temp"};
lovedna_math_Vector2.get_temp = function() {
	return lovedna_math_Vector2._pool.get();
};
lovedna_math_Vector2.get_up = function() {
	return lovedna_math_Vector2.get_temp().set(0,1);
};
lovedna_math_Vector2.get_down = function() {
	return lovedna_math_Vector2.get_temp().set(0,-1);
};
lovedna_math_Vector2.get_right = function() {
	return lovedna_math_Vector2.get_temp().set(1,0);
};
lovedna_math_Vector2.get_left = function() {
	return lovedna_math_Vector2.get_temp().set(-1,0);
};
lovedna_math_Vector2.get_zero = function() {
	return lovedna_math_Vector2.get_temp().set(0,0);
};
lovedna_math_Vector2.get_one = function() {
	return lovedna_math_Vector2.get_temp().set(1,1);
};
lovedna_math_Vector2.prototype = {
	toString: function() {
		return this.fixed(4);
	}
	,fixed: function(decimalPlaces) {
		if(decimalPlaces == null) {
			decimalPlaces = 4;
		}
		return "Vector2(" + lovedna_utils_Helper.fixed(this.x,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.y,decimalPlaces) + ")";
	}
	,set: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		return this;
	}
	,copy: function(v) {
		if(v == null || v == this) {
			return this;
		}
		return this.set(v.x,v.y);
	}
	,from: function(v) {
		return this.set(v.x,v.y);
	}
	,clone: function() {
		return new lovedna_math_Vector2(this.x,this.y);
	}
	,add: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x + n.x,m.y + n.y);
	}
	,sub: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x - n.x,m.y - n.y);
	}
	,mul: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x * n.x,m.y * n.y);
	}
	,dot: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return m.x * n.x + m.y * n.y;
	}
	,cross: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return m.x * n.y - m.y * n.x;
	}
	,min: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(lovedna_utils_Helper.min(m.x,n.x),lovedna_utils_Helper.min(m.y,n.y));
	}
	,max: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(lovedna_utils_Helper.max(m.x,n.x),lovedna_utils_Helper.max(m.y,n.y));
	}
	,scale: function(v) {
		return this.set(this.x * v,this.y * v);
	}
	,negate: function() {
		return this.set(-this.x,-this.y);
	}
	,normalize: function() {
		var len = this.get_length();
		if(len != 0) {
			return this.scale(1 / len);
		} else {
			return this.set(0,0);
		}
	}
	,distanceSquared: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var xx = m.x - n.x;
		var yy = m.y - n.y;
		return xx * xx + yy * yy;
	}
	,distance: function(a,b) {
		return Math.sqrt(this.distanceSquared(a,b));
	}
	,equals: function(v) {
		if(this.x == v.x) {
			return this.y == v.y;
		} else {
			return false;
		}
	}
	,isZero: function() {
		if(lovedna_utils_Helper.isZero(this.x)) {
			return lovedna_utils_Helper.isZero(this.y);
		} else {
			return false;
		}
	}
	,isOne: function() {
		if(lovedna_utils_Helper.isZero(this.x - 1)) {
			return lovedna_utils_Helper.isZero(this.y - 1);
		} else {
			return false;
		}
	}
	,angleTo: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var l1 = m.get_length();
		var l2 = n.get_length();
		if(l1 > 0 && l2 > 0) {
			return lovedna_utils_Helper.radianToAngle(Math.acos(m.dot(n) / (l1 * l2)));
		}
		return 0;
	}
	,lerpTo: function(v,t) {
		if(t <= 0) {
			return this;
		}
		if(t >= 1) {
			return this.copy(v);
		}
		this.x += t * (v.x - this.x);
		this.y += t * (v.y - this.y);
		return this;
	}
	,projectOnto: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var dot = n.dot(n);
		if(dot == 0) {
			return this.set(0,0);
		} else {
			var s = m.dot(n) / dot;
			return this.copy(n).scale(s);
		}
	}
	,reflectBy: function(normal) {
		var projected = lovedna_math_Vector2.get_temp().copy(this).projectOnto(normal);
		projected.scale(2.0);
		return this.sub(projected);
	}
	,rotateLeft: function() {
		var newX = -this.y;
		this.y = this.x;
		this.x = newX;
		return this;
	}
	,rotateRight: function() {
		var newX = this.y;
		this.y = -this.x;
		this.x = newX;
		return this;
	}
	,rotate: function(v,pivot) {
		v = lovedna_utils_Helper.angleToRadian(v);
		var cos = Math.cos(v);
		var sin = Math.sin(v);
		var dx = this.x - pivot.x;
		var dy = this.y - pivot.y;
		this.x = dx * cos - dy * sin;
		this.y = dx * sin + dy * cos;
		return this;
	}
	,clamp: function(min,max) {
		this.x = lovedna_utils_Helper.clamp(this.x,min,max);
		this.y = lovedna_utils_Helper.clamp(this.y,min,max);
		return this;
	}
	,getElement: function(index) {
		if(index < 0) {
			index %= 2;
			index += 2;
		} else if(index >= 2) {
			index %= 2;
		}
		if(index == 0) {
			return this.x;
		} else {
			return this.y;
		}
	}
	,setElement: function(index,v) {
		if(index < 0) {
			index %= 2;
			index += 2;
		} else if(index >= 2) {
			index %= 2;
		}
		if(index == 0) {
			this.x = v;
		} else {
			this.y = v;
		}
	}
	,fillArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		list[offset++] = this.x;
		list[offset++] = this.y;
	}
	,fromArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(list == null) {
			return this;
		}
		var len = list.length;
		if(offset < len) {
			this.x = list[offset++];
		}
		if(offset < len) {
			this.y = list[offset++];
		}
		return this;
	}
	,get_length: function() {
		return Math.sqrt(this.get_lengthSq());
	}
	,set_length: function(v) {
		var a = Math.atan2(this.y,this.x);
		this.x = Math.cos(a) * v;
		this.y = Math.sin(a) * v;
		return v;
	}
	,get_lengthSq: function() {
		return this.x * this.x + this.y * this.y;
	}
	,get_angle: function() {
		return lovedna_utils_Helper.radianToAngle(Math.atan2(this.y,this.x));
	}
	,set_angle: function(v) {
		var len = this.get_length();
		v = lovedna_utils_Helper.angleToRadian(v);
		this.x = Math.cos(v) * len;
		this.y = Math.sin(v) * len;
		return v;
	}
	,__class__: lovedna_math_Vector2
	,__properties__: {get_lengthSq:"get_lengthSq",get_length:"get_length",set_angle:"set_angle",get_angle:"get_angle"}
};
var lovedna_format_mesh_Geometry = function() {
	this.id = lovedna_format_mesh_Geometry._id++;
	this.groups = [];
};
$hxClasses["lovedna.format.mesh.Geometry"] = lovedna_format_mesh_Geometry;
lovedna_format_mesh_Geometry.__name__ = ["lovedna","format","mesh","Geometry"];
lovedna_format_mesh_Geometry.prototype = {
	clearGroup: function() {
		this.groups.splice(0,this.groups.length);
	}
	,addGroup: function(triangles) {
		var offset = 0;
		if(this.groups.length > 0) {
			var g = this.groups[this.groups.length - 1];
			offset = g.offset + g.indices.length;
		}
		var group = new lovedna_format_mesh_Group(triangles,offset);
		this.groups.push(group);
	}
	,addCustomUvGetter: function(v,index) {
		if(index == null) {
			index = -1;
		}
		if(this._customUvGetter == null) {
			this._customUvGetter = [];
		}
		if(index < 0) {
			this._customUvGetter.push(v);
		} else {
			this._customUvGetter.splice(index,0,v);
		}
	}
	,getCustomUvGetter: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this._customUvGetter == null) {
			return $bind(this,this._getuv);
		}
		if(this._customUvGetter[index] == null) {
			return $bind(this,this._getuv);
		}
		return this._customUvGetter[index];
	}
	,_getuv: function(u,v) {
		return lovedna_format_mesh_Geometry._uv.set(u,v);
	}
	,__class__: lovedna_format_mesh_Geometry
};
var lovedna_format_mesh_Group = function(indices,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.indices = indices;
	this.offset = offset;
	this.start = offset * 2;
};
$hxClasses["lovedna.format.mesh.Group"] = lovedna_format_mesh_Group;
lovedna_format_mesh_Group.__name__ = ["lovedna","format","mesh","Group"];
lovedna_format_mesh_Group.prototype = {
	__class__: lovedna_format_mesh_Group
};
var lovedna_format_meta_Meta = function() {
	lovedna_events_EventDispatcher.call(this);
	this._list = [];
	this._map = new haxe_ds_StringMap();
};
$hxClasses["lovedna.format.meta.Meta"] = lovedna_format_meta_Meta;
lovedna_format_meta_Meta.__name__ = ["lovedna","format","meta","Meta"];
lovedna_format_meta_Meta.__super__ = lovedna_events_EventDispatcher;
lovedna_format_meta_Meta.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	addMeta: function(v) {
		this._list.push(v);
		if(v.path != null) {
			this._map.set(v.path,v);
		}
	}
	,getMeta: function(path) {
		return this._map.get(path);
	}
	,encode: function() {
		var ba = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		var len = this._list.length;
		ba.writeInt(len);
		while(len-- > 0) ba.writeUTF(this._list[len].encode());
		return ba;
	}
	,decode: function(ba) {
		var len = ba.readInt();
		while(len-- > 0) {
			var info = new lovedna_format_meta_MetaInfo();
			info.read(JSON.parse(ba.readUTF()));
			if(info.path != null) {
				this._map.set(info.path,info);
				haxe_Log.trace(info,{ fileName : "Meta.hx", lineNumber : 65, className : "lovedna.format.meta.Meta", methodName : "decode"});
			}
		}
	}
	,__class__: lovedna_format_meta_Meta
});
var lovedna_format_meta_MetaInfo = function() {
	this._meta = new haxe_ds_StringMap();
};
$hxClasses["lovedna.format.meta.MetaInfo"] = lovedna_format_meta_MetaInfo;
lovedna_format_meta_MetaInfo.__name__ = ["lovedna","format","meta","MetaInfo"];
lovedna_format_meta_MetaInfo.prototype = {
	get: function(name) {
		return this._meta.get(name);
	}
	,addInfo: function(name,value) {
		this._meta.set(name,value);
		if(name == "path") {
			this.path = value;
		} else if(name == "crc") {
			this.crc = value;
		} else if(name == "size") {
			this.size = value;
		}
	}
	,encode: function() {
		this._meta.set("path",this.path);
		return JSON.stringify(this._meta);
	}
	,read: function(json) {
		var keys = lovedna_utils_DynamicUtil.getKeys(json);
		var len = keys.length;
		while(len-- > 0) {
			var k = keys[len];
			this.addInfo(k,lovedna_utils_DynamicUtil.getValue(json,k));
		}
	}
	,__class__: lovedna_format_meta_MetaInfo
};
var lovedna_format_png_Png = function() {
	this._IEND = new lovedna_format_png_PngChunk();
	this._IEND.type = 1229278788;
	this._chunkList = [];
	if(lovedna_format_png_Png._keepType == null) {
		lovedna_format_png_Png._keepType = new haxe_ds_IntMap();
		var keepList = [1229472850,1229209940,1229278788,1665684045,1732332865,1933723988,1347179589,1649100612,1749635924,1951551059];
		var i = keepList.length;
		while(i-- > 0) lovedna_format_png_Png._keepType.set(keepList[i],true);
	}
};
$hxClasses["lovedna.format.png.Png"] = lovedna_format_png_Png;
lovedna_format_png_Png.__name__ = ["lovedna","format","png","Png"];
lovedna_format_png_Png.prototype = {
	decode: function(bytes) {
		var len = this._chunkList.length;
		if(len > 0) {
			this._chunkList.splice(0,len);
		}
		if(_$UInt_UInt_$Impl_$.gt(12,bytes.get_bytesAvailable())) {
			return;
		}
		bytes.bigEndian = true;
		var pos = bytes.position;
		bytes.position = pos + 8;
		var len1 = bytes.readInt();
		if(len1 > 100) {
			bytes.position = pos + 8;
			len1 = bytes.readInt();
			if(len1 > 100) {
				return;
			}
		}
		var type = bytes.readInt();
		if(type != 1229472850) {
			return;
		}
		bytes.position = pos + 8;
		while(_$UInt_UInt_$Impl_$.gt(bytes.get_length() - bytes.position,0)) {
			var chunk = new lovedna_format_png_PngChunk();
			chunk.decode(bytes);
			var type1 = chunk.type;
			if(type1 < 1) {
				break;
			}
			if(type1 == 1229278788) {
				this._IEND = chunk;
			} else {
				this.addChunk(chunk);
			}
		}
	}
	,pack: function() {
		var png = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		png.bigEndian = true;
		png.writeUnsignedInt(-1991225785);
		png.writeUnsignedInt(218765834);
		var len = this._chunkList.length;
		var ba;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			ba = this._chunkList[i].encode();
			png.writeBlob(ba);
		}
		ba = this._IEND.encode();
		png.writeBlob(ba);
		return png;
	}
	,getChunkList: function() {
		return this._chunkList;
	}
	,getChunk: function(type) {
		var len = this._chunkList.length;
		while(len-- > 0) {
			var chunk = this._chunkList[len];
			if(chunk.type == type) {
				return chunk;
			}
		}
		return null;
	}
	,addChunk: function(value) {
		this._chunkList.push(value);
	}
	,getData: function() {
		return this._bytes;
	}
	,removeChunk: function(type) {
		if(type == null) {
			type = 0;
		}
		if(this._chunkList == null) {
			return;
		}
		var len = this._chunkList.length;
		while(len-- > 0) {
			var chunk = this._chunkList[len];
			var ctype = chunk.type;
			if(lovedna_format_png_Png._keepType.exists(ctype)) {
				continue;
			}
			if(type == 0) {
				this._chunkList.splice(len,1);
			} else if(chunk.type == type) {
				this._chunkList.splice(len,1);
			}
		}
	}
	,__class__: lovedna_format_png_Png
};
var lovedna_format_png_PngChunk = function() {
};
$hxClasses["lovedna.format.png.PngChunk"] = lovedna_format_png_PngChunk;
lovedna_format_png_PngChunk.__name__ = ["lovedna","format","png","PngChunk"];
lovedna_format_png_PngChunk.prototype = {
	decode: function(blob) {
		var len = blob.readUnsignedInt();
		this.type = blob.readUnsignedInt();
		this._content = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		if(len > 0) {
			blob.readBlob(this._content,0,len);
		}
		this._crc = blob.readInt();
	}
	,encode: function() {
		var len = 0;
		if(this._content != null) {
			len = this._content.get_length();
		}
		var data = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		data.bigEndian = true;
		data.writeInt(len);
		data.writeUnsignedInt(this.type);
		if(this._content != null) {
			data.writeBlob(this._content);
		}
		data.writeInt(this._crc);
		return data;
	}
	,getContent: function() {
		this._content.bigEndian = false;
		return this._content;
	}
	,setContent: function(v) {
		this._content = v;
		var data = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		data.bigEndian = false;
		data.writeUnsignedInt(this.type);
		if(this._content != null) {
			data.writeBlob(this._content);
		}
		this._crc = lovedna_utils_BytesUtil.getCRC32(data.getBytes());
	}
	,toString: function() {
		return "Chunk:0x" + lovedna_utils_Helper.intToHex(this.type,8);
	}
	,__class__: lovedna_format_png_PngChunk
};
var lovedna_format_tag_TagData = function(type) {
	this.type = type;
	this.compress = true;
};
$hxClasses["lovedna.format.tag.TagData"] = lovedna_format_tag_TagData;
lovedna_format_tag_TagData.__name__ = ["lovedna","format","tag","TagData"];
lovedna_format_tag_TagData.prototype = {
	encode: function(data) {
		if(this.compress) {
			data.position = 0;
			data = lovedna_ds__$ByteArray_ByteArray_$Impl_$.fromBytes(lovedna_utils_BytesUtil.compress(lovedna_ds__$ByteArray_ByteArray_$Impl_$.toBytes(data)));
		}
		var len = data.get_length();
		var bytes = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
		bytes.writeUnsignedInt(-199789115);
		bytes.writeUnsignedInt(this.type);
		bytes.writeBoolean(this.compress);
		bytes.writeInt(len);
		bytes.writeBlob(data);
		return bytes;
	}
	,decode: function(bytes) {
		if(_$UInt_UInt_$Impl_$.gt(1,bytes.get_bytesAvailable())) {
			return null;
		}
		if(_$UInt_UInt_$Impl_$.gt(2,bytes.get_length() - bytes.position)) {
			return null;
		}
		if(_$UInt_UInt_$Impl_$.gt(13,bytes.get_bytesAvailable())) {
			return null;
		}
		var a = bytes.get_length();
		if(_$UInt_UInt_$Impl_$.gte(bytes.position + 13,a)) {
			return null;
		}
		var tagtype = bytes.readUnsignedInt();
		if(tagtype == -199789115) {
			this.type = bytes.readUnsignedInt();
			var compress = bytes.readBoolean();
			var len = bytes.readInt();
			var data = lovedna_ds__$ByteArray_ByteArray_$Impl_$._new();
			bytes.readBlob(data,0,len);
			if(compress) {
				return lovedna_ds__$ByteArray_ByteArray_$Impl_$.fromBytes(lovedna_utils_BytesUtil.uncompress(lovedna_ds__$ByteArray_ByteArray_$Impl_$.toBytes(data)));
			}
			return data;
		} else {
			bytes.position -= 4;
			return null;
		}
	}
	,__class__: lovedna_format_tag_TagData
};
var lovedna_game__$Actor_ComponentState = function(component,state) {
	this.component = component;
	this.state = state;
};
$hxClasses["lovedna.game._Actor.ComponentState"] = lovedna_game__$Actor_ComponentState;
lovedna_game__$Actor_ComponentState.__name__ = ["lovedna","game","_Actor","ComponentState"];
lovedna_game__$Actor_ComponentState.prototype = {
	__class__: lovedna_game__$Actor_ComponentState
};
var lovedna_game_CameraClearFlags = function() {
	this.type = 3;
	this.color = new lovedna_math_Color(0,0,0,0);
};
$hxClasses["lovedna.game.CameraClearFlags"] = lovedna_game_CameraClearFlags;
lovedna_game_CameraClearFlags.__name__ = ["lovedna","game","CameraClearFlags"];
lovedna_game_CameraClearFlags.prototype = {
	__class__: lovedna_game_CameraClearFlags
};
var lovedna_game_DefineName = function(name,size,index) {
	if(index == null) {
		index = 0;
	}
	if(size == null) {
		size = 0;
	}
	this.name = name;
	this.size = size;
	this.index = index;
};
$hxClasses["lovedna.game.DefineName"] = lovedna_game_DefineName;
lovedna_game_DefineName.__name__ = ["lovedna","game","DefineName"];
lovedna_game_DefineName.prototype = {
	__class__: lovedna_game_DefineName
};
var lovedna_game_Game = $hx_exports["lovedna"]["game"]["Game"] = function() {
	lovedna_events_EventDispatcher.call(this);
	this._frame = 0;
	this.pause = false;
	this.playStep = false;
	lovedna_game_Game.current = this;
	this.commands = new lovedna_game_render_GameRenderCommandBuffer();
	this.pause = false;
	this._worlds = new lovedna_ds_FastArray();
	this.system = new lovedna_game_System();
	this.clear = true;
	this.color = new lovedna_math_Color();
	this.color.setRGBA(-1412567041);
	this.system.addEventListener(lovedna_game_events_SystemEvent.init.get_type(),$bind(this,this.sysinit));
	haxe_Log.trace("Game build " + "2018-08-01 18:49:11",{ fileName : "Game.hx", lineNumber : 54, className : "lovedna.game.Game", methodName : "new"});
};
$hxClasses["lovedna.game.Game"] = lovedna_game_Game;
lovedna_game_Game.__name__ = ["lovedna","game","Game"];
lovedna_game_Game.debug = function() {
	debugger;
};
lovedna_game_Game.__super__ = lovedna_events_EventDispatcher;
lovedna_game_Game.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	addWorld: function(v) {
		lovedna_game_Game.current = this;
		v.width = this.system.width;
		v.height = this.system.height;
		this._worlds.remove(v);
		this._worlds.push(v);
		v._onAdd();
	}
	,removeWorld: function(v) {
		this._worlds.remove(v);
		v._onRemove();
	}
	,sysinit: function(e) {
		this.resize(null);
		this.system.addEventListener(lovedna_game_events_SystemEvent.update.get_type(),$bind(this,this.update));
		this.system.addEventListener(lovedna_game_events_SystemEvent.resize.get_type(),$bind(this,this.resize));
		lovedna_game_graphics_GLContext.init(lovedna_game_System.gl);
		if(this.onInit != null) {
			this.onInit();
		}
	}
	,update: function(e) {
		if(this.pause) {
			if(!this.playStep) {
				return;
			}
			this.playStep = false;
		}
		this.commands.clear();
		lovedna_game_graphics_GLContext.start(this.w,this.h);
		var t = this._target;
		if(lovedna_game_Screen.customBackBuffer != null) {
			t = lovedna_game_Screen.customBackBuffer;
		}
		lovedna_game_graphics_GLContext.pushTarget(t);
		if(this.clear && this.color != null) {
			lovedna_game_graphics_GLContext.clear(this.color,1,0);
		}
		var len = this._worlds.get_length();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._worlds.get(i)._update(this._frame);
		}
		this._frame += 1;
		lovedna_game_GameInput.update();
		var len1 = this._worlds.get_length();
		var _g11 = 0;
		var _g2 = len1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this._worlds.get(i1)._render();
		}
		this.commands.flush();
		this.dispatchEvent(lovedna_game_events_ActorEvent.onPostRender);
		lovedna_game_graphics_GLContext.popTarget();
		lovedna_game_Screen.blit(t,null,lovedna_game_Screen.customBackMaterial);
		lovedna_game_graphics_GLContext.end();
		lovedna_game_Actor._endFrame();
		lovedna_utils_TempPool.reset();
	}
	,resize: function(e) {
		var len = this._worlds.get_length();
		this.w = this.system.width;
		this.h = this.system.height;
		lovedna_game_Screen.setSize(this.w,this.h);
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._worlds.get(i)._resize(this.w,this.h);
		}
		if(this._target == null) {
			var depth = 0;
			if(this.system.depth) {
				depth = 16;
			}
			if(this.system.stencil) {
				depth = 24;
			}
			this._target = new lovedna_game_graphics_RenderTexture2D(this.w,this.h,depth);
		} else {
			this._target.resize(this.w,this.h);
		}
	}
	,__class__: lovedna_game_Game
});
var lovedna_game_LayerMask = function(names) {
	if(names == null) {
		this.data = new lovedna_ds_Bit32(-1);
	} else {
		this.data = new lovedna_ds_Bit32(0);
		var len = names.length;
		while(len-- > 0) {
			var layer = lovedna_game_LayerMask.nameToLayer(names[len]);
			this.data.setElement(layer);
		}
		if(this.data.value == 0) {
			this.data.value = -1;
		}
	}
};
$hxClasses["lovedna.game.LayerMask"] = lovedna_game_LayerMask;
lovedna_game_LayerMask.__name__ = ["lovedna","game","LayerMask"];
lovedna_game_LayerMask.setLayerName = function(index,name) {
	if(lovedna_game_LayerMask._names[index] == null) {
		lovedna_game_LayerMask._names[index] = name;
		lovedna_game_LayerMask._layers.set(name,index);
	}
};
lovedna_game_LayerMask.layerToName = function(layer) {
	return lovedna_game_LayerMask._names[layer];
};
lovedna_game_LayerMask.nameToLayer = function(name) {
	return lovedna_game_LayerMask._layers.get(name);
};
lovedna_game_LayerMask.prototype = {
	exist: function(layer) {
		return this.data.getElement(layer);
	}
	,clear: function() {
		this.data.clear();
	}
	,__class__: lovedna_game_LayerMask
};
var lovedna_game_GameInput = function() {
};
$hxClasses["lovedna.game.GameInput"] = lovedna_game_GameInput;
lovedna_game_GameInput.__name__ = ["lovedna","game","GameInput"];
lovedna_game_GameInput.raycastAll = function(ray,layerMask,distance,world) {
	if(distance == null) {
		distance = 99999999;
	}
	lovedna_game_GameInput._raycastList.clear();
	if(layerMask == null) {
		layerMask = lovedna_game_GameInput._layerMask;
	}
	if(world == null) {
		world = lovedna_game_World.current;
	}
	if(ray == null || world == null) {
		return lovedna_game_GameInput._raycastList;
	}
	var collector = world.collectorCollider;
	var len = collector.count;
	var d2 = distance * distance;
	while(len-- > 0) {
		var c = collector.get(len);
		if(!c.enabled) {
			continue;
		}
		if(!layerMask.exist(c.actor.layer)) {
			continue;
		}
		var hit = c.raycast(ray,d2);
		if(hit == null) {
			continue;
		}
		lovedna_game_GameInput._raycastList.push(hit);
	}
	return lovedna_game_GameInput._raycastList;
};
lovedna_game_GameInput.touchDown = function(button) {
	if(button == null) {
		button = 0;
	}
	return lovedna_game_GameInput._touchDown.get(button) == true;
};
lovedna_game_GameInput.touchUp = function(button) {
	if(button == null) {
		button = 0;
	}
	return lovedna_game_GameInput._touchUp.get(button) == true;
};
lovedna_game_GameInput.getTouch = function(button) {
	if(button == null) {
		button = 0;
	}
	return lovedna_game_GameInput._touchs[button];
};
lovedna_game_GameInput.update = function() {
	if(!lovedna_game_GameInput._init) {
		lovedna_game_GameInput._init = true;
		lovedna_game_GameInput._touchDown = new haxe_ds_IntMap();
		lovedna_game_GameInput._touchUp = new haxe_ds_IntMap();
		lovedna_game_GameInput._touchIdList = new lovedna_ds_FastArray();
		var len = 10;
		while(len-- > 0) {
			lovedna_game_GameInput._touchDown.set(len,false);
			lovedna_game_GameInput._touchUp.set(len,false);
		}
		lovedna_game_GameInput.touchCount = 0;
		lovedna_ui_Touch.onEvent.addEventListener(lovedna_events_TouchEvent.onUpdate.get_type(),lovedna_game_GameInput.ontouch);
	}
	if(lovedna_game_GameInput._touchChange) {
		lovedna_game_GameInput._touchChange = false;
		var len1 = lovedna_game_GameInput._touchIdList.get_length();
		while(len1-- > 0) {
			var tid = lovedna_game_GameInput._touchIdList.get(len1);
			if(lovedna_game_GameInput._touchUp.get(tid)) {
				lovedna_game_GameInput._touchIdList.removeAt(len1);
			}
			lovedna_game_GameInput._touchUp.set(tid,false);
			lovedna_game_GameInput._touchDown.set(tid,false);
		}
		lovedna_game_GameInput.touchCount = lovedna_game_GameInput._touchIdList.get_length();
	}
};
lovedna_game_GameInput.ontouch = function(e) {
	var e1 = lovedna_events_TouchEvent.onUpdate;
	var touch = e1.touch;
	var act = touch.type;
	if(act == 1) {
		if(lovedna_game_GameInput._touchDown.get(touch.touchId) == true) {
			return;
		}
		lovedna_game_GameInput._touchIdList.push(touch.touchId);
		lovedna_game_GameInput._touchDown.set(touch.touchId,true);
		lovedna_game_GameInput._touchChange = true;
		lovedna_game_GameInput.touchCount = lovedna_game_GameInput._touchIdList.get_length();
		lovedna_game_GameInput._touchs[touch.touchId] = touch;
	} else if(act == 5) {
		lovedna_game_GameInput._touchUp.set(touch.touchId,true);
		lovedna_game_GameInput._touchChange = true;
	}
};
lovedna_game_GameInput.prototype = {
	__class__: lovedna_game_GameInput
};
var lovedna_game_GameTime = function() {
};
$hxClasses["lovedna.game.GameTime"] = lovedna_game_GameTime;
lovedna_game_GameTime.__name__ = ["lovedna","game","GameTime"];
lovedna_game_GameTime.__properties__ = {get_now:"get_now"};
lovedna_game_GameTime.blur = function() {
	if(!lovedna_game_GameTime._focused) {
		lovedna_game_GameTime.focus();
	}
	lovedna_game_GameTime._blurTime = lovedna_Time.get_now();
};
lovedna_game_GameTime.focus = function() {
	var pass = lovedna_Time.get_now() - lovedna_game_GameTime._blurTime;
	lovedna_game_GameTime._offset += pass;
	lovedna_game_GameTime._blurTime = 0;
};
lovedna_game_GameTime.get_now = function() {
	return lovedna_Time.get_now() - lovedna_game_GameTime._offset;
};
lovedna_game_GameTime.prototype = {
	__class__: lovedna_game_GameTime
};
var lovedna_game_Material = function() {
	this.uniforms = new lovedna_game_ShaderUniform();
	this.define = new lovedna_game_ShaderDefine();
	this.renderQueue = 20000;
	this.shader = new lovedna_game_Shader(null);
	this.subMesh = -1;
	this.state = new lovedna_game_graphics_GLState();
	this.color = new lovedna_math_Color(1,1,1,1);
	this.uniforms.setColor(lovedna_game_DefineName.COLOR.name,this.color);
};
$hxClasses["lovedna.game.Material"] = lovedna_game_Material;
lovedna_game_Material.__name__ = ["lovedna","game","Material"];
lovedna_game_Material.getRenderQueue = function(value) {
	return lovedna_utils_Helper.floor(lovedna_utils_Helper.clamp(lovedna_utils_Helper.floor(value * 0.0001),1,5) * 10000);
};
lovedna_game_Material.prototype = {
	setTexture: function(value,name) {
		if(name == null) {
			name = lovedna_game_DefineName.TEX.name;
		}
		if(value == null) {
			this.uniforms.remove(name);
			this.define.define(name,"",false);
			return;
		}
		this.uniforms.setTexture(value);
		this.define.define(name,"",true);
	}
	,__class__: lovedna_game_Material
};
var lovedna_game_Mesh = function() {
	this.id = lovedna_game_Mesh._id--;
};
$hxClasses["lovedna.game.Mesh"] = lovedna_game_Mesh;
lovedna_game_Mesh.__name__ = ["lovedna","game","Mesh"];
lovedna_game_Mesh.deleteGeometryBuffer = function(id) {
	if(lovedna_game_Mesh._geombuffer.exists(id)) {
		var buffer = lovedna_game_Mesh._geombuffer.get(id);
		lovedna_game_Mesh._geombuffer.remove(id);
		buffer.unload();
	}
};
lovedna_game_Mesh.prototype = {
	fromGeometry: function(geom) {
		if(lovedna_game_Mesh._geombuffer.exists(geom.id)) {
			this.buffer = lovedna_game_Mesh._geombuffer.get(geom.id);
			this.id = geom.id;
			lovedna_game_Mesh._geombuffer.get(geom.id).build();
		} else {
			var gbuffer = new lovedna_game_geometry_GeometryBuffer(geom);
			gbuffer.build();
			this.id = geom.id;
			lovedna_game_Mesh._geombuffer.set(geom.id,gbuffer);
			this.buffer = gbuffer;
		}
		return this;
	}
	,__class__: lovedna_game_Mesh
};
var lovedna_game_RaycastHit = function() {
};
$hxClasses["lovedna.game.RaycastHit"] = lovedna_game_RaycastHit;
lovedna_game_RaycastHit.__name__ = ["lovedna","game","RaycastHit"];
lovedna_game_RaycastHit.prototype = {
	__class__: lovedna_game_RaycastHit
};
var lovedna_game_render_RenderCommand = function() { };
$hxClasses["lovedna.game.render.RenderCommand"] = lovedna_game_render_RenderCommand;
lovedna_game_render_RenderCommand.__name__ = ["lovedna","game","render","RenderCommand"];
lovedna_game_render_RenderCommand.prototype = {
	__class__: lovedna_game_render_RenderCommand
};
var lovedna_game_ShaderUniform = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["lovedna.game.ShaderUniform"] = lovedna_game_ShaderUniform;
lovedna_game_ShaderUniform.__name__ = ["lovedna","game","ShaderUniform"];
lovedna_game_ShaderUniform.prototype = {
	clear: function() {
		var k = this.data.iterator();
		while(k.hasNext()) {
			var k1 = k.next();
			this.data.remove(k1.name);
		}
	}
	,copy: function(v) {
		this.clear();
		var k = v.data.iterator();
		while(k.hasNext()) {
			var k1 = k.next();
			this.data.set(k1.name,k1);
		}
	}
	,add: function(v) {
		var k = v.data.iterator();
		while(k.hasNext()) {
			var k1 = k.next();
			this.data.set(k1.name,k1);
		}
	}
	,bind: function(v) {
		var k = this.data.iterator();
		while(k.hasNext()) {
			var k1 = k.next();
			var i = v.getUniformInput(k1.name);
			if(i == null) {
				continue;
			}
			if(!k1.bind(i)) {
				return false;
			}
			i.set_success(true);
		}
		return true;
	}
	,remove: function(name) {
		this.data.remove(name);
	}
	,setInt: function(name,value) {
		this.get(name).setInt(value);
	}
	,setFloat: function(name,value) {
		this.get(name).setFloat(value);
	}
	,setFloatArray: function(name,value) {
		this.get(name).setFloatArray(value);
	}
	,setFloat2: function(name,value) {
		this.get(name).setFloat2(value);
	}
	,setFloat3: function(name,value) {
		this.get(name).setFloat3(value);
	}
	,setFloat4: function(name,value) {
		this.get(name).setFloat4(value);
	}
	,setColor: function(name,value) {
		this.get(name).setFloat4(value);
	}
	,setMatrix44: function(name,value) {
		this.get(name).setMatrix(value);
	}
	,setMatrix44Handler: function(name,value) {
		this.get(name).setMatrixHandler(value);
	}
	,setMatrix44Array: function(name,value) {
		this.get(name).setMatrixArray(value);
	}
	,setTexture: function(value,name) {
		if(name == null) {
			name = lovedna_game_DefineName.TEX.name;
		}
		if(value == null) {
			this.remove(name);
			return;
		}
		this.get(name).setTexture(value);
	}
	,get: function(name) {
		if(this.data.exists(name)) {
			return this.data.get(name);
		}
		var d = new lovedna_game_graphics_ProgramUniformData();
		d.name = name;
		this.data.set(name,d);
		return d;
	}
	,__class__: lovedna_game_ShaderUniform
};
var lovedna_game_ShaderDefine = function() {
	this._defineMap = new haxe_ds_StringMap();
	this._define = null;
	this._id = -1;
};
$hxClasses["lovedna.game.ShaderDefine"] = lovedna_game_ShaderDefine;
lovedna_game_ShaderDefine.__name__ = ["lovedna","game","ShaderDefine"];
lovedna_game_ShaderDefine.prototype = {
	clear: function() {
		var i = this._defineMap.keys();
		while(i.hasNext()) {
			var i1 = i.next();
			this._defineMap.remove(i1);
			this.dirtyDefine();
		}
	}
	,define: function(name,value,set) {
		if(set == null) {
			set = true;
		}
		if(value == null) {
			value = "";
		}
		if(!set) {
			if(this._defineMap.exists(name)) {
				this._defineMap.remove(name);
				this.dirtyDefine();
			}
		} else {
			if(value == null) {
				value = "";
			}
			if(!this._defineMap.exists(name)) {
				this._defineMap.set(name,value);
				this.dirtyDefine();
			} else if(this._defineMap.get(name) != value) {
				this._defineMap.set(name,value);
				this.dirtyDefine();
			}
		}
	}
	,dirtyDefine: function() {
		this._define = null;
		this._id = -1;
	}
	,sortDefine: function(a,b) {
		if(a != b) {
			if(a > b) {
				return 1;
			} else {
				return -1;
			}
		}
		return 0;
	}
	,build: function() {
		this._id = 0;
		this._define = "";
		var deflist = [];
		var i = this._defineMap.keys();
		while(i.hasNext()) {
			var i1 = i.next();
			deflist.push(i1);
		}
		if(deflist.length < 1) {
			return;
		}
		deflist.sort($bind(this,this.sortDefine));
		var len = deflist.length;
		lovedna_game_ShaderDefine._fnv.reset();
		lovedna_game_ShaderDefine._fnv.addInt(len);
		var sb = new StringBuf();
		while(len-- > 0) {
			var i2 = deflist[len];
			var s = "#define " + i2 + " " + this._defineMap.get(i2) + "\n";
			lovedna_game_ShaderDefine._fnv.addString(s);
			sb.add(s);
		}
		this._id = lovedna_game_ShaderDefine._fnv.getCode();
		this._define = sb.toString();
	}
	,get_id: function() {
		if(this._id != -1) {
			return this._id;
		}
		this.build();
		return this._id;
	}
	,get_value: function() {
		if(this._define != null) {
			return this._define;
		}
		this.build();
		return this._define;
	}
	,__class__: lovedna_game_ShaderDefine
	,__properties__: {get_id:"get_id",get_value:"get_value"}
};
var lovedna_game_ShaderPrecision = function() {
	var vlist = ["precision highp float;","precision highp int;","precision lowp sampler2D;","precision lowp samplerCube;"];
	this._vert = vlist.join("\n") + "\n";
	var flist = ["precision highp float;","precision mediump int;","precision lowp sampler2D;","precision lowp samplerCube;"];
	this._frag = flist.join("\n") + "\n";
};
$hxClasses["lovedna.game.ShaderPrecision"] = lovedna_game_ShaderPrecision;
lovedna_game_ShaderPrecision.__name__ = ["lovedna","game","ShaderPrecision"];
lovedna_game_ShaderPrecision.prototype = {
	getVertPrecision: function() {
		return this._vert;
	}
	,getFragPrecision: function() {
		return this._frag;
	}
	,__class__: lovedna_game_ShaderPrecision
};
var lovedna_game_Shader = function(code) {
	if(code == null) {
		code = lovedna_game_ShaderCode.defaultCode;
	}
	this.uniforms = new lovedna_game_ShaderUniform();
	this._code = code;
	this._id = -1;
	this._defineHashList = [];
	this._defineList = [];
};
$hxClasses["lovedna.game.Shader"] = lovedna_game_Shader;
lovedna_game_Shader.__name__ = ["lovedna","game","Shader"];
lovedna_game_Shader.prototype = {
	clearDefine: function(channel) {
		if(channel == null) {
			channel = 0;
		}
		if(this._defineList[channel] != null) {
			this.dirtyDefine();
			this._defineList[channel] = null;
			this._defineHashList[channel] = -1;
		}
	}
	,setDefine: function(v,channel) {
		if(channel == null) {
			channel = 0;
		}
		if(channel < 0 || channel > 5) {
			return;
		}
		if(v == null) {
			return;
		}
		if(this._defineHashList[channel] == null || this._defineHashList[channel] != v.get_id()) {
			this._defineList[channel] = v;
			this.dirtyDefine();
		}
	}
	,bind: function() {
		if(this._code == null) {
			return false;
		}
		if(this.get_id() == -1) {
			return false;
		}
		if(this._program == null) {
			if(lovedna_game_Shader._programMap.exists(this.get_id())) {
				this._program = lovedna_game_Shader._programMap.get(this.get_id());
			} else {
				var vert = this._code.get_vert();
				var frag = this._code.get_frag();
				var define = this.createDefine();
				this._program = new lovedna_game_graphics_Program(define + lovedna_game_Shader.defaultPrecision.getVertPrecision() + vert,define + lovedna_game_Shader.defaultPrecision.getFragPrecision() + frag);
				lovedna_game_Shader._programMap.set(this.get_id(),this._program);
			}
		}
		if(this._program == null) {
			return false;
		}
		if(!this._program.enabled) {
			return false;
		}
		this._program.bind();
		return true;
	}
	,getBufferInput: function(name) {
		if(this._code == null) {
			return null;
		}
		if(this._program == null) {
			return null;
		}
		var key = this._code.getAttributeName(name);
		if(key != null) {
			return this._program.getBufferInput(key);
		}
		return this._program.getBufferInput(name);
	}
	,getUniformInput: function(name) {
		if(this._code == null) {
			return null;
		}
		if(this._program == null) {
			return null;
		}
		var key = this._code.getUniformName(name);
		if(key != null) {
			return this._program.getUniformInput(key);
		}
		return this._program.getUniformInput(name);
	}
	,setCode: function(v) {
		this.dirtyDefine();
		this._code = v;
	}
	,GetCode: function() {
		return this._code;
	}
	,checkUniformSuccess: function() {
		return this._program.checkUniformFail() == 0;
	}
	,dirtyDefine: function() {
		this._define = null;
		this._id = -1;
	}
	,sortDefine: function(a,b) {
		if(a != b) {
			if(a > b) {
				return 1;
			} else {
				return -1;
			}
		}
		return 0;
	}
	,createDefine: function() {
		if(this._define != null) {
			return this._define;
		}
		this._define = "";
		lovedna_game_Shader._fnv.reset();
		lovedna_game_Shader._fnv.addInt(this._code.id);
		if(this._code.get_defineCount() > 0) {
			var len = this._defineList.length;
			while(len-- > 0) {
				var d = this._defineList[len];
				if(d == null) {
					continue;
				}
				this._define += d.get_value();
				this._defineHashList[len] = d.get_id();
				lovedna_game_Shader._fnv.addInt(d.get_id());
			}
		}
		this._id = lovedna_game_Shader._fnv.getCode();
		return this._define;
	}
	,get_id: function() {
		if(this._id == -1) {
			this.createDefine();
		}
		return this._id;
	}
	,__class__: lovedna_game_Shader
	,__properties__: {get_id:"get_id"}
};
var lovedna_game_ShaderCode = function(name,vert,frag) {
	this._defineCount = 0;
	this.id = lovedna_game_ShaderCode._id++;
	this.name = name;
	if(vert == null || vert == "") {
		vert = lovedna_game_ShaderCode.defaultCode.sourceVert;
	}
	if(frag == null || frag == "") {
		frag = lovedna_game_ShaderCode.defaultCode.sourceFrag;
	}
	this.sourceVert = vert;
	this.sourceFrag = frag;
	this._vert = vert;
	this._frag = frag;
	this._attributeNames = new haxe_ds_StringMap();
	this._uniformNames = new haxe_ds_StringMap();
};
$hxClasses["lovedna.game.ShaderCode"] = lovedna_game_ShaderCode;
lovedna_game_ShaderCode.__name__ = ["lovedna","game","ShaderCode"];
lovedna_game_ShaderCode.prototype = {
	setAttributeAlias: function(name,alias) {
		this._attributeNames.set(alias,name);
	}
	,setUniformAlias: function(name,alias) {
		this._uniformNames.set(alias,name);
	}
	,getAttributeName: function(alias) {
		this.init();
		return this._attributeNames.get(alias);
	}
	,getUniformName: function(alias) {
		this.init();
		return this._uniformNames.get(alias);
	}
	,existDefine: function(name) {
		this.init();
		return this._defineMap.exists(name);
	}
	,init: function() {
		if(this._init) {
			return;
		}
		this._init = true;
		this._defineMap = new haxe_ds_StringMap();
		this._vert = "\n" + this.parse(this._vert);
		this._frag = "\n" + this.parse(this._frag);
	}
	,parse: function(source) {
		var strline = new lovedna_ds_StringLine(source);
		var out = "";
		while(strline.get_lineAvailable() > 0) {
			var line = strline.readLine();
			out += this.parseLine(line) + "\n";
		}
		return out;
	}
	,parseLine: function(source) {
		var line = lovedna_utils_Helper.trim(source);
		var temp = "";
		var key = [];
		var space = "";
		var id = 0;
		var len = line.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var code = line.charAt(i);
			if(code == " " || code == ":" || code == ";") {
				key[id] = temp;
				if(id == 0) {
					if(temp == "attribute" || temp == "uniform") {
						var start = source.indexOf(temp);
						space = HxOverrides.substr(source,0,start);
					} else if(temp == "#ifdef") {
						var start1 = source.indexOf(temp);
						space = HxOverrides.substr(source,0,start1);
					} else {
						id = 0;
						break;
					}
				}
				++id;
				temp = "";
			} else {
				temp += code;
			}
		}
		if(id == 0) {
			return source;
		} else {
			if(temp != "") {
				key[id] = temp;
			}
			var type = key[0];
			if(type == "attribute") {
				this._attributeNames.set(key[3],key[2]);
				return space + type + " " + key[1] + " " + key[2] + ";";
			} else if(type == "uniform") {
				var alias = key[2];
				var id1 = alias.indexOf("[");
				if(id1 != -1) {
					alias = HxOverrides.substr(alias,0,id1);
				}
				this._uniformNames.set(key[3],alias);
				return space + type + " " + key[1] + " " + key[2] + ";";
			} else if(type == "#ifdef") {
				var v = key[1];
				if(v != null) {
					if(!this._defineMap.exists(v)) {
						this._defineMap.set(v,true);
						this._defineCount++;
					}
				}
			}
			return source;
		}
	}
	,get_vert: function() {
		this.init();
		return this._vert;
	}
	,get_frag: function() {
		this.init();
		return this._frag;
	}
	,get_defineCount: function() {
		this.init();
		return this._defineCount;
	}
	,__class__: lovedna_game_ShaderCode
	,__properties__: {get_defineCount:"get_defineCount",get_frag:"get_frag",get_vert:"get_vert"}
};
var lovedna_game_graphics_GLState = function() {
	this.depthTest = true;
	this.depthWrite = true;
	this.cullMode = 1029;
	this.depthMode = 513;
	this.stencilTest = false;
	this.stencilMode = 519;
	this.stencilBothPass = 7680;
	this.stencilDepthFail = 7680;
	this.stencilFail = 7680;
	this.stencilReferenceValue = 0;
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blend = true;
	this.blendColorOperation = 32774;
	this.blendAlphaOperation = 32774;
	this.blendSrcColor = 770;
	this.blendDstColor = 771;
	this.blendSrcAlpha = 1;
	this.blendDstAlpha = 1;
	this.drawMode = 4;
};
$hxClasses["lovedna.game.graphics.GLState"] = lovedna_game_graphics_GLState;
lovedna_game_graphics_GLState.__name__ = ["lovedna","game","graphics","GLState"];
lovedna_game_graphics_GLState.set = function(v) {
};
lovedna_game_graphics_GLState.prototype = {
	copy: function(v) {
		if(v == null) {
			return this;
		}
		this.depthTest = v.depthTest;
		this.depthWrite = v.depthWrite;
		this.cullMode = v.cullMode;
		this.depthMode = v.depthMode;
		this.stencilTest = v.stencilTest;
		this.stencilMode = v.stencilMode;
		this.stencilBothPass = v.stencilBothPass;
		this.stencilDepthFail = v.stencilDepthFail;
		this.stencilFail = v.stencilFail;
		this.stencilReferenceValue = v.stencilReferenceValue;
		this.stencilReadMask = v.stencilReadMask;
		this.stencilWriteMask = v.stencilWriteMask;
		this.blend = v.blend;
		this.blendColorOperation = v.blendColorOperation;
		this.blendAlphaOperation = v.blendAlphaOperation;
		this.blendSrcColor = v.blendSrcColor;
		this.blendDstColor = v.blendDstColor;
		this.blendSrcAlpha = v.blendSrcAlpha;
		this.blendDstAlpha = v.blendDstAlpha;
		this.drawMode = v.drawMode;
		return this;
	}
	,defaultValue: function() {
		this.depthTest = false;
		this.depthWrite = false;
		this.cullMode = -1;
		this.depthMode = 519;
		this.stencilTest = true;
		this.stencilMode = 514;
		this.stencilBothPass = 7680;
		this.stencilDepthFail = 7680;
		this.stencilFail = 7680;
		this.stencilReferenceValue = 0;
		this.stencilReadMask = 255;
		this.stencilWriteMask = 255;
		this.blend = false;
		this.blendColorOperation = 32774;
		this.blendAlphaOperation = 32774;
		this.blendSrcColor = 770;
		this.blendDstColor = 771;
		this.blendSrcAlpha = 1;
		this.blendDstAlpha = 1;
		this.drawMode = 4;
	}
	,__class__: lovedna_game_graphics_GLState
};
var lovedna_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["lovedna.math.Vector4"] = lovedna_math_Vector4;
lovedna_math_Vector4.__name__ = ["lovedna","math","Vector4"];
lovedna_math_Vector4.__interfaces__ = [lovedna_ds_IArrayAccess,lovedna_ds_IFillArray];
lovedna_math_Vector4.__properties__ = {get_temp:"get_temp"};
lovedna_math_Vector4.get_temp = function() {
	return lovedna_math_Vector4._pool.get();
};
lovedna_math_Vector4.prototype = {
	toString: function() {
		return this.fixed(4);
	}
	,fixed: function(decimalPlaces) {
		if(decimalPlaces == null) {
			decimalPlaces = 4;
		}
		return "Vector4(" + lovedna_utils_Helper.fixed(this.x,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.y,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.z,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.w,decimalPlaces) + ")";
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,copy: function(v) {
		if(v == null || v == this) {
			return this;
		}
		return this.set(v.x,v.y,v.z,v.w);
	}
	,from: function(v) {
		return this.set(v.x,v.y,v.z,v.w);
	}
	,clone: function() {
		return new lovedna_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y && this.z == v.z) {
			return this.w == v.w;
		} else {
			return false;
		}
	}
	,add: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x + n.x,m.y + n.y,m.z + n.z,m.w + n.w);
	}
	,sub: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x - n.x,m.y - n.y,m.z - n.z,m.w - n.w);
	}
	,mul: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x * n.x,m.y * n.y,m.z * n.z,m.w * n.w);
	}
	,min: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(lovedna_utils_Helper.min(m.x,n.x),lovedna_utils_Helper.min(m.y,n.y),lovedna_utils_Helper.min(m.z,n.z),lovedna_utils_Helper.min(m.w,n.w));
	}
	,max: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(lovedna_utils_Helper.max(m.x,n.x),lovedna_utils_Helper.max(m.y,n.y),lovedna_utils_Helper.max(m.z,n.z),lovedna_utils_Helper.max(m.w,n.w));
	}
	,clamp: function(min,max) {
		return this.set(lovedna_utils_Helper.clamp(this.x,min.x,max.x),lovedna_utils_Helper.clamp(this.y,min.y,max.y),lovedna_utils_Helper.clamp(this.z,min.z,max.z),lovedna_utils_Helper.clamp(this.w,min.w,max.w));
	}
	,scale: function(v) {
		return this.set(this.x * v,this.y * v,this.z * v,this.w * v);
	}
	,negate: function() {
		return this.set(-this.x,-this.y,-this.z,-this.w);
	}
	,getElement: function(index) {
		if(index < 0) {
			index %= 4;
			index += 4;
		} else if(index >= 4) {
			index %= 4;
		}
		switch(index) {
		case 0:
			return this.x;
		case 1:
			return this.y;
		case 2:
			return this.z;
		case 3:
			return this.w;
		}
		return 0;
	}
	,setElement: function(index,v) {
		if(index < 0) {
			index %= 4;
			index += 4;
		} else if(index >= 4) {
			index %= 4;
		}
		switch(index) {
		case 0:
			this.x = v;
			break;
		case 1:
			this.y = v;
			break;
		case 2:
			this.z = v;
			break;
		case 3:
			this.w = v;
			break;
		}
	}
	,fillArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		list[offset++] = this.x;
		list[offset++] = this.y;
		list[offset++] = this.z;
		list[offset++] = this.w;
	}
	,fromArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(list == null) {
			return this;
		}
		var len = list.length;
		if(offset < len) {
			this.x = list[offset++];
		}
		if(offset < len) {
			this.y = list[offset++];
		}
		if(offset < len) {
			this.z = list[offset++];
		}
		if(offset < len) {
			this.w = list[offset++];
		}
		return this;
	}
	,__class__: lovedna_math_Vector4
};
var lovedna_math_Color = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 1;
	}
	if(y == null) {
		y = 1;
	}
	if(x == null) {
		x = 1;
	}
	lovedna_math_Vector4.call(this,x,y,z,w);
};
$hxClasses["lovedna.math.Color"] = lovedna_math_Color;
lovedna_math_Color.__name__ = ["lovedna","math","Color"];
lovedna_math_Color.__properties__ = {get_temp:"get_temp"};
lovedna_math_Color.get_temp = function() {
	return lovedna_math_Color._pool.get();
};
lovedna_math_Color.__super__ = lovedna_math_Vector4;
lovedna_math_Color.prototype = $extend(lovedna_math_Vector4.prototype,{
	setRGBA: function(v) {
		this.set_r((v >> 24 & 255) * 0.00392156863);
		this.set_g((v >> 16 & 255) * 0.00392156863);
		this.set_b((v >> 8 & 255) * 0.00392156863);
		this.set_a((v & 255) * 0.00392156863);
		return this;
	}
	,getRGBA: function() {
		var rr = Std["int"](this.get_r() * 255.0);
		var gg = Std["int"](this.get_g() * 255.0);
		var bb = Std["int"](this.get_b() * 255.0);
		var aa = Std["int"](this.get_a() * 255.0);
		return rr << 24 | gg << 16 | bb << 8 | aa;
	}
	,setByte: function(r,g,b,a) {
		if(a == null) {
			a = 255;
		}
		if(b == null) {
			b = 255;
		}
		if(g == null) {
			g = 255;
		}
		if(r == null) {
			r = 255;
		}
		this.set_r(r * 0.00392156863);
		this.set_g(g * 0.00392156863);
		this.set_b(b * 0.00392156863);
		this.set_a(a * 0.00392156863);
		return this;
	}
	,mix: function(v,alpha) {
		if(alpha < 0) {
			alpha = 0;
		}
		if(alpha > 1) {
			alpha = 1;
		}
		this.scale(1 - alpha);
		lovedna_math_Color.get_temp().copy(v);
		lovedna_math_Color.get_temp().scale(alpha);
		this.add(lovedna_math_Color.get_temp());
		return this;
	}
	,compress: function() {
		var rMask = 1.0;
		var gMask = 0.00392156862745098;
		var bMask = 1.5378700499807768e-005;
		var aMask = 6.0308629411010845e-008;
		return this.x * rMask + this.y * gMask + this.z * bMask + this.w * aMask;
	}
	,decompress: function(v) {
		if(v >= 0 || v <= 1) {
			var rr = v;
			var gg = lovedna_utils_Helper.fract(rr * 255.0);
			var bb = lovedna_utils_Helper.fract(gg * 255.0);
			var aa = lovedna_utils_Helper.fract(bb * 255.0);
			rr -= gg * 0.00392156863;
			gg -= bb * 0.00392156863;
			bb -= aa * 0.00392156863;
			this.set(rr,gg,bb,aa);
		}
		return this;
	}
	,fixed: function(decimalPlaces) {
		if(decimalPlaces == null) {
			decimalPlaces = 4;
		}
		return "Color(" + lovedna_utils_Helper.fixed(this.x,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.y,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.z,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.w,decimalPlaces) + ")";
	}
	,get_r: function() {
		return this.x;
	}
	,get_g: function() {
		return this.y;
	}
	,get_b: function() {
		return this.z;
	}
	,get_a: function() {
		return this.w;
	}
	,set_r: function(v) {
		return this.x = v;
	}
	,set_g: function(v) {
		return this.y = v;
	}
	,set_b: function(v) {
		return this.z = v;
	}
	,set_a: function(v) {
		return this.w = v;
	}
	,__class__: lovedna_math_Color
	,__properties__: {set_a:"set_a",get_a:"get_a",set_b:"set_b",get_b:"get_b",set_g:"set_g",get_g:"get_g",set_r:"set_r",get_r:"get_r"}
});
var lovedna_game_render_commands_Blit = function() {
};
$hxClasses["lovedna.game.render.commands.Blit"] = lovedna_game_render_commands_Blit;
lovedna_game_render_commands_Blit.__name__ = ["lovedna","game","render","commands","Blit"];
lovedna_game_render_commands_Blit.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_Blit.prototype = {
	execute: function(ctx) {
		if(this.material == null) {
			this.material = lovedna_game_render_commands_Blit._material;
		}
		if(lovedna_game_render_commands_Blit._mesh == null) {
			lovedna_game_render_commands_Blit._color = new lovedna_math_Color(0,0,0,0);
			lovedna_game_render_commands_Blit._mat = new lovedna_math_Matrix44();
			lovedna_game_render_commands_Blit._mesh = new lovedna_game_Mesh();
			var geom = new lovedna_format_mesh_Geometry();
			geom.position = [new lovedna_math_Vector3(-1,-1,0),new lovedna_math_Vector3(1,-1,0),new lovedna_math_Vector3(1,1,0),new lovedna_math_Vector3(-1,1,0)];
			geom.uv = [new lovedna_math_Vector2(0,0),new lovedna_math_Vector2(1,0),new lovedna_math_Vector2(1,1),new lovedna_math_Vector2(0,1)];
			geom.addGroup([0,1,2,0,2,3]);
			lovedna_game_render_commands_Blit._mesh.fromGeometry(geom);
		}
		var shader = this.material.shader;
		if(shader == null) {
			return;
		}
		if(!this.source.enabled) {
			return;
		}
		this.material.uniforms.setMatrix44(lovedna_game_DefineName.M.name,lovedna_game_render_commands_Blit._mat);
		this.material.uniforms.setMatrix44(lovedna_game_DefineName.V.name,lovedna_game_render_commands_Blit._mat);
		this.material.uniforms.setMatrix44(lovedna_game_DefineName.P.name,lovedna_game_render_commands_Blit._mat);
		this.material.uniforms.setMatrix44(lovedna_game_DefineName.VP.name,lovedna_game_render_commands_Blit._mat);
		this.material.setTexture(this.source);
		shader.setDefine(this.material.define,2);
		shader.setDefine(lovedna_game_render_commands_Blit._mesh.buffer.define,1);
		if(!shader.bind()) {
			return;
		}
		lovedna_game_render_commands_Blit._mesh.buffer.updateLocations(shader);
		lovedna_game_render_commands_Blit._mesh.buffer.getPositionBuffer().bind(shader.get_id());
		lovedna_game_render_commands_Blit._mesh.buffer.getVertexBuffer().bind(shader.get_id());
		lovedna_game_render_commands_Blit._mesh.buffer.getIndexBuffer().bind();
		lovedna_game_graphics_GLContext.state(this.material.state);
		lovedna_game_graphics_GLContext.pushTarget(this.dest);
		lovedna_game_graphics_GLContext.drawBefore();
		if(this.rect != null) {
			lovedna_game_graphics_GLContext.viewport(lovedna_utils_Helper.floor(this.rect.x),lovedna_utils_Helper.floor(this.rect.get_height() - this.rect.y),lovedna_utils_Helper.floor(this.rect.get_width()),lovedna_utils_Helper.floor(this.rect.get_height()));
		}
		if(!this.material.uniforms.bind(shader)) {
			return;
		}
		lovedna_game_System.gl.drawElements(this.material.state.drawMode,lovedna_game_render_commands_Blit._mesh.buffer.getIndexBuffer().length,5123,0);
		lovedna_game_graphics_GLContext.drawAfter();
		lovedna_game_graphics_GLContext.popTarget();
	}
	,__class__: lovedna_game_render_commands_Blit
};
var lovedna_game_render_commands_Draw = function() {
};
$hxClasses["lovedna.game.render.commands.Draw"] = lovedna_game_render_commands_Draw;
lovedna_game_render_commands_Draw.__name__ = ["lovedna","game","render","commands","Draw"];
lovedna_game_render_commands_Draw.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_Draw.prototype = {
	execute: function(ctx) {
		var material = ctx.currentMaterial;
		if(material == null) {
			return;
		}
		var shader = material.shader;
		if(shader == null) {
			return;
		}
		ctx.currentUniforms.add(material.uniforms);
		shader.setDefine(material.define,2);
		shader.setDefine(ctx.globalDefine,0);
		if(ctx.currentMeshBuffer != null) {
			var mesh = ctx.currentMeshBuffer.buffer;
			if(!mesh.enabled) {
				return;
			}
			ctx.currentIndexBuffer = mesh.getIndexBuffer();
			ctx.currentVertexBuffers.clear();
			ctx.currentVertexBuffers.push(mesh.getPositionBuffer());
			if(mesh.getVertexBuffer() != null) {
				ctx.currentVertexBuffers.push(mesh.getVertexBuffer());
			}
			if(mesh.getColorBuffer() != null) {
				ctx.currentVertexBuffers.push(mesh.getColorBuffer());
			}
			if(mesh.getBoneBuffer() != null) {
				ctx.currentVertexBuffers.push(mesh.getBoneBuffer());
			}
			shader.setDefine(mesh.define,1);
			shader.bind();
			mesh.updateLocations(shader);
		} else {
			if(ctx.currentIndexBuffer == null) {
				return;
			}
			shader.bind();
			var len = ctx.currentVertexBuffers.get_length();
			while(len-- > 0) {
				var vb = ctx.currentVertexBuffers.getElement(len);
				var layouts = vb.layouts;
				if(layouts == null) {
					ctx.currentVertexBuffers.removeAt(len);
					continue;
				}
				var c = layouts.length;
				while(c-- > 0) {
					var l = layouts[c];
					var i = shader.getBufferInput(l.name);
					if(i == null) {
						continue;
					}
					l.location = i.location;
				}
			}
		}
		var len1 = ctx.currentVertexBuffers.get_length();
		while(len1-- > 0) if(!ctx.currentVertexBuffers.getElement(len1).bind(shader.get_id())) {
			return;
		}
		lovedna_game_graphics_GLContext.drawBefore();
		if(!ctx.globalUniforms.bind(shader)) {
			return;
		}
		if(!ctx.currentUniforms.bind(shader)) {
			return;
		}
		if(!shader.checkUniformSuccess()) {
			return;
		}
		ctx.currentIndexBuffer.bind();
		var drawsub = true;
		var sub = ctx.currentMaterial.subMesh;
		if(sub < 0) {
			drawsub = false;
		}
		if(drawsub) {
			if(ctx.currentIndexBuffer.layouts == null) {
				drawsub = false;
			} else if(ctx.currentIndexBuffer.layouts[sub] == null) {
				drawsub = false;
			}
		}
		lovedna_game_graphics_GLContext.state(material.state);
		if(!drawsub) {
			var blen = ctx.currentIndexBuffer.length;
			if(blen > 20000) {
				debugger;
			}
			lovedna_game_System.gl.drawElements(material.state.drawMode,blen,5123,0);
		} else {
			var s = ctx.currentIndexBuffer.layouts[sub];
			lovedna_game_System.gl.drawElements(material.state.drawMode,s.length,5123,s.offset);
		}
		lovedna_game_graphics_GLContext.drawAfter();
		ctx.clearCurrent();
	}
	,__class__: lovedna_game_render_commands_Draw
};
var lovedna_game_render_commands_SetCallback = function() {
};
$hxClasses["lovedna.game.render.commands.SetCallback"] = lovedna_game_render_commands_SetCallback;
lovedna_game_render_commands_SetCallback.__name__ = ["lovedna","game","render","commands","SetCallback"];
lovedna_game_render_commands_SetCallback.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetCallback.prototype = {
	execute: function(ctx) {
		this.v(ctx);
	}
	,__class__: lovedna_game_render_commands_SetCallback
};
var lovedna_game_render_commands_SetRenderContext = function() {
};
$hxClasses["lovedna.game.render.commands.SetRenderContext"] = lovedna_game_render_commands_SetRenderContext;
lovedna_game_render_commands_SetRenderContext.__name__ = ["lovedna","game","render","commands","SetRenderContext"];
lovedna_game_render_commands_SetRenderContext.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetRenderContext.prototype = {
	execute: function(ctx) {
		lovedna_game_render_RenderBufferContex.current = this.value;
	}
	,__class__: lovedna_game_render_commands_SetRenderContext
};
var lovedna_game_render_commands_SetGlobalShaderUniform = function() {
};
$hxClasses["lovedna.game.render.commands.SetGlobalShaderUniform"] = lovedna_game_render_commands_SetGlobalShaderUniform;
lovedna_game_render_commands_SetGlobalShaderUniform.__name__ = ["lovedna","game","render","commands","SetGlobalShaderUniform"];
lovedna_game_render_commands_SetGlobalShaderUniform.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetGlobalShaderUniform.prototype = {
	execute: function(ctx) {
		ctx.globalUniforms.add(this.v);
	}
	,__class__: lovedna_game_render_commands_SetGlobalShaderUniform
};
var lovedna_game_render_commands_SetIndexBuffer = function() {
};
$hxClasses["lovedna.game.render.commands.SetIndexBuffer"] = lovedna_game_render_commands_SetIndexBuffer;
lovedna_game_render_commands_SetIndexBuffer.__name__ = ["lovedna","game","render","commands","SetIndexBuffer"];
lovedna_game_render_commands_SetIndexBuffer.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetIndexBuffer.prototype = {
	execute: function(ctx) {
		ctx.currentIndexBuffer = this.v;
	}
	,__class__: lovedna_game_render_commands_SetIndexBuffer
};
var lovedna_game_render_commands_SetMaterial = function() {
};
$hxClasses["lovedna.game.render.commands.SetMaterial"] = lovedna_game_render_commands_SetMaterial;
lovedna_game_render_commands_SetMaterial.__name__ = ["lovedna","game","render","commands","SetMaterial"];
lovedna_game_render_commands_SetMaterial.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetMaterial.prototype = {
	execute: function(ctx) {
		ctx.currentMaterial = this.v;
	}
	,__class__: lovedna_game_render_commands_SetMaterial
};
var lovedna_game_render_commands_SetMeshBuffer = function() {
};
$hxClasses["lovedna.game.render.commands.SetMeshBuffer"] = lovedna_game_render_commands_SetMeshBuffer;
lovedna_game_render_commands_SetMeshBuffer.__name__ = ["lovedna","game","render","commands","SetMeshBuffer"];
lovedna_game_render_commands_SetMeshBuffer.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetMeshBuffer.prototype = {
	execute: function(ctx) {
		ctx.currentMeshBuffer = this.v;
	}
	,__class__: lovedna_game_render_commands_SetMeshBuffer
};
var lovedna_game_render_commands_SetShaderDefine = function() {
};
$hxClasses["lovedna.game.render.commands.SetShaderDefine"] = lovedna_game_render_commands_SetShaderDefine;
lovedna_game_render_commands_SetShaderDefine.__name__ = ["lovedna","game","render","commands","SetShaderDefine"];
lovedna_game_render_commands_SetShaderDefine.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetShaderDefine.prototype = {
	execute: function(ctx) {
	}
	,__class__: lovedna_game_render_commands_SetShaderDefine
};
var lovedna_game_render_commands_SetShaderUniform = function() {
};
$hxClasses["lovedna.game.render.commands.SetShaderUniform"] = lovedna_game_render_commands_SetShaderUniform;
lovedna_game_render_commands_SetShaderUniform.__name__ = ["lovedna","game","render","commands","SetShaderUniform"];
lovedna_game_render_commands_SetShaderUniform.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetShaderUniform.prototype = {
	execute: function(ctx) {
		ctx.currentUniforms.add(this.v);
	}
	,__class__: lovedna_game_render_commands_SetShaderUniform
};
var lovedna_game_render_commands_SetVertexBuffer = function() {
};
$hxClasses["lovedna.game.render.commands.SetVertexBuffer"] = lovedna_game_render_commands_SetVertexBuffer;
lovedna_game_render_commands_SetVertexBuffer.__name__ = ["lovedna","game","render","commands","SetVertexBuffer"];
lovedna_game_render_commands_SetVertexBuffer.__interfaces__ = [lovedna_game_render_RenderCommand];
lovedna_game_render_commands_SetVertexBuffer.prototype = {
	execute: function(ctx) {
		ctx.currentVertexBuffers.push(this.v);
	}
	,__class__: lovedna_game_render_commands_SetVertexBuffer
};
var lovedna_game_render_RenderBuffer = function() {
	this.enabled = false;
	this._list = new lovedna_ds_FastArray();
	this.shaderId = 0;
	this.distance = 0;
};
$hxClasses["lovedna.game.render.RenderBuffer"] = lovedna_game_render_RenderBuffer;
lovedna_game_render_RenderBuffer.__name__ = ["lovedna","game","render","RenderBuffer"];
lovedna_game_render_RenderBuffer.__properties__ = {get_temp:"get_temp"};
lovedna_game_render_RenderBuffer.get_temp = function() {
	return lovedna_game_render_RenderBuffer._pool.get();
};
lovedna_game_render_RenderBuffer.prototype = {
	clear: function() {
		this._list.clear();
	}
	,add: function(v) {
		this._list.push(v);
	}
	,execute: function() {
		var len = this._list.get_length();
		lovedna_game_render_RenderBuffer.$length += len;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var c = this._list.getElement(i);
			c.execute(lovedna_game_render_RenderBufferContex.current);
		}
	}
	,setContext: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetContext.get();
		cmd.value = v;
		this.add(cmd);
	}
	,setGlobalShaderUniform: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetGlobalShaderUniform.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setGlobalShaderDefine: function(v) {
	}
	,setShaderDefine: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetShaderDefine.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setShaderUniform: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetShaderUniform.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setMaterial: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetMaterial.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setMeshBuffer: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetMeshBuffer.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setIndexBuffer: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetIndexBuffer.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setVertexBuffer: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetVertexBuffer.get();
		cmd.v = v;
		this.add(cmd);
	}
	,setCallback: function(v) {
		var cmd = lovedna_game_render_RenderBuffer._SetCallback.get();
		cmd.v = v;
		this.add(cmd);
	}
	,draw: function() {
		var cmd = lovedna_game_render_RenderBuffer._Draw.get();
		this.add(cmd);
	}
	,blit: function(source,dest,material,rect) {
		var cmd = lovedna_game_render_RenderBuffer._Blit.get();
		cmd.source = source;
		cmd.dest = dest;
		cmd.material = material;
		cmd.rect = rect;
		this.add(cmd);
	}
	,__class__: lovedna_game_render_RenderBuffer
};
var lovedna_game_Screen = function() {
};
$hxClasses["lovedna.game.Screen"] = lovedna_game_Screen;
lovedna_game_Screen.__name__ = ["lovedna","game","Screen"];
lovedna_game_Screen.__properties__ = {get_currentBackBuffer:"get_currentBackBuffer"};
lovedna_game_Screen.blit = function(source,dest,material,rect) {
	if(source == dest) {
		return;
	}
	if(material == null) {
		material = lovedna_game_Screen._material;
	}
	lovedna_game_Screen._buffer.clear();
	lovedna_game_Screen._buffer.blit(source,dest,material,rect);
	lovedna_game_Screen._buffer.execute();
};
lovedna_game_Screen.setSize = function(w,h) {
	lovedna_game_Screen.width = w;
	lovedna_game_Screen.height = h;
};
lovedna_game_Screen.get_currentBackBuffer = function() {
	return lovedna_game_graphics_GLContext.getTarget();
};
lovedna_game_Screen.prototype = {
	__class__: lovedna_game_Screen
};
var lovedna_game_graphics_RenderContext = function() {
};
$hxClasses["lovedna.game.graphics.RenderContext"] = lovedna_game_graphics_RenderContext;
lovedna_game_graphics_RenderContext.__name__ = ["lovedna","game","graphics","RenderContext"];
lovedna_game_graphics_RenderContext.prototype = {
	setup: function(webgl,version) {
		this.__context = webgl;
		this.gl = this.__context;
		this.version = version;
	}
	,beginQuery: function(target,query) {
		this.__context.beginQuery(target,query);
	}
	,beginTransformFeedback: function(primitiveNode) {
		this.__context.beginTransformFeedback(primitiveNode);
	}
	,bindBufferBase: function(target,index,buffer) {
		this.__context.bindBufferBase(target,index,buffer);
	}
	,bindBufferRange: function(target,index,buffer,offset,size) {
		this.__context.bindBufferRange(target,index,buffer,offset,size);
	}
	,bindSampler: function(unit,sampler) {
		this.__context.bindSampler(unit,sampler);
	}
	,bindTransformFeedback: function(target,transformFeedback) {
		this.__context.bindTransformFeedback(target,transformFeedback);
	}
	,bindVertexArray: function(vertexArray) {
		this.__context.bindVertexArray(vertexArray);
	}
	,blitFramebuffer: function(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter) {
		this.__context.blitFramebuffer(srcX0,srcY0,srcX1,srcY1,dstX0,dstY0,dstX1,dstY1,mask,filter);
	}
	,bufferData: function(target,size,data,usage) {
		this.__context.bufferData(target,data,usage);
	}
	,bufferSubData: function(target,dstByteOffset,size,data) {
		this.__context.bufferSubData(target,dstByteOffset,data);
	}
	,activeTexture: function(texture) {
		this.__context.activeTexture(texture);
	}
	,attachShader: function(program,shader) {
		this.__context.attachShader(program,shader);
	}
	,bindAttribLocation: function(program,index,name) {
		this.__context.bindAttribLocation(program,index,name);
	}
	,bindBuffer: function(target,buffer) {
		this.__context.bindBuffer(target,buffer);
	}
	,bindFramebuffer: function(target,framebuffer) {
		this.__context.bindFramebuffer(target,framebuffer);
	}
	,bindRenderbuffer: function(target,renderbuffer) {
		this.__context.bindRenderbuffer(target,renderbuffer);
	}
	,bindTexture: function(target,texture) {
		this.__context.bindTexture(target,texture);
	}
	,blendColor: function(red,green,blue,alpha) {
		this.__context.blendColor(red,green,blue,alpha);
	}
	,blendEquation: function(mode) {
		this.__context.blendEquation(mode);
	}
	,blendEquationSeparate: function(modeRGB,modeAlpha) {
		this.__context.blendEquationSeparate(modeRGB,modeAlpha);
	}
	,blendFunc: function(sfactor,dfactor) {
		this.__context.blendFunc(sfactor,dfactor);
	}
	,blendFuncSeparate: function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
		this.__context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
	}
	,bufferDataWEBGL: function(target,srcData,usage,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.bufferData(target,srcData,usage,srcOffset,length);
		} else {
			this.__context.bufferData(target,srcData,usage);
		}
	}
	,bufferSubDataWEBGL: function(target,dstByteOffset,srcData,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.bufferSubData(target,dstByteOffset,srcData,srcOffset,length);
		} else {
			this.__context.bufferSubData(target,dstByteOffset,srcData);
		}
	}
	,checkFramebufferStatus: function(target) {
		return this.__context.checkFramebufferStatus(target);
	}
	,clear: function(mask) {
		this.__context.clear(mask);
	}
	,clearBufferfi: function(buffer,drawbuffer,depth,stencil) {
		this.__context.clearBufferfi(buffer,drawbuffer,depth,stencil);
	}
	,clearBufferfv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferfv(buffer,drawbuffer,values);
	}
	,clearBufferfvWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferfv(buffer,drawbuffer,values,srcOffset);
	}
	,clearBufferiv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferiv(buffer,drawbuffer,values);
	}
	,clearBufferivWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferiv(buffer,drawbuffer,values,srcOffset);
	}
	,clearBufferuiv: function(buffer,drawbuffer,values) {
		this.__context.clearBufferuiv(buffer,drawbuffer,values.toUInt32Array());
	}
	,clearBufferuivWEBGL: function(buffer,drawbuffer,values,srcOffset) {
		this.__context.clearBufferuiv(buffer,drawbuffer,values,srcOffset);
	}
	,clearColor: function(red,green,blue,alpha) {
		this.__context.clearColor(red,green,blue,alpha);
	}
	,clearDepth: function(depth) {
		this.__context.clearDepth(depth);
	}
	,clearDepthf: function(depth) {
		this.clearDepth(depth);
	}
	,clearStencil: function(s) {
		this.__context.clearStencil(s);
	}
	,clientWaitSync: function(sync,flags,timeout) {
		return this.__context.clientWaitSync(sync,flags,timeout);
	}
	,copyBufferSubData: function(readTarget,writeTarget,readOffset,writeOffset,size) {
	}
	,colorMask: function(red,green,blue,alpha) {
		this.__context.colorMask(red,green,blue,alpha);
	}
	,compileShader: function(shader) {
		this.__context.compileShader(shader);
	}
	,compressedTexImage2D: function(target,level,internalformat,width,height,border,imageSize,data) {
		this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,data.toBufferView(imageSize));
	}
	,compressedTexImage2DWEBGL: function(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride) {
		if(srcOffset != null) {
			this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,srcData,srcOffset,srcLengthOverride);
		} else {
			this.__context.compressedTexImage2D(target,level,internalformat,width,height,border,srcData);
		}
	}
	,compressedTexImage3D: function(target,level,internalformat,width,height,depth,border,imageSize,data) {
		this.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,data.toBufferView(imageSize));
	}
	,compressedTexImage3DWEBGL: function(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride) {
		this.__context.compressedTexImage3D(target,level,internalformat,width,height,depth,border,srcData,srcOffset,srcLengthOverride);
	}
	,compressedTexSubImage2D: function(target,level,xoffset,yoffset,width,height,format,imageSize,data) {
		this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data.toBufferView(imageSize));
	}
	,compressedTexSubImage2DWEBGL: function(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride) {
		if(srcOffset != null) {
			this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData,srcOffset,srcLengthOverride);
		} else {
			this.__context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,srcData);
		}
	}
	,compressedTexSubImage3D: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,imageSize,data) {
		this.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,data.toBufferView(imageSize));
	}
	,compressedTexSubImage3DWEBGL: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride) {
		this.__context.compressedTexSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,srcData,srcOffset,srcLengthOverride);
	}
	,copySubBufferData: function(readTarget,writeTarget,readOffset,writeOffset,size) {
		this.__context.copySubBufferData(readTarget,writeTarget,readOffset,writeOffset,size);
	}
	,copyTexImage2D: function(target,level,internalformat,x,y,width,height,border) {
		this.__context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
	}
	,copyTexSubImage2D: function(target,level,xoffset,yoffset,x,y,width,height) {
		this.__context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
	}
	,copyTexSubImage3D: function(target,level,xoffset,yoffset,zoffset,x,y,width,height) {
		this.__context.copyTexSubImage3D(target,level,xoffset,yoffset,zoffset,x,y,width,height);
	}
	,createBuffer: function() {
		return this.__context.createBuffer();
	}
	,createFramebuffer: function() {
		return this.__context.createFramebuffer();
	}
	,createProgram: function() {
		return this.__context.createProgram();
	}
	,createQuery: function() {
		return this.__context.createQuery();
	}
	,createRenderbuffer: function() {
		return this.__context.createRenderbuffer();
	}
	,createSampler: function() {
		return this.__context.createSampler();
	}
	,createShader: function(type) {
		return this.__context.createShader(type);
	}
	,createTexture: function() {
		return this.__context.createTexture();
	}
	,createTransformFeedback: function() {
		return this.__context.createTransformFeedback();
	}
	,createVertexArray: function() {
		return this.__context.createVertexArray();
	}
	,cullFace: function(mode) {
		this.__context.cullFace(mode);
	}
	,deleteBuffer: function(buffer) {
		this.__context.deleteBuffer(buffer);
	}
	,deleteFramebuffer: function(framebuffer) {
		this.__context.deleteFramebuffer(framebuffer);
	}
	,deleteProgram: function(program) {
		this.__context.deleteProgram(program);
	}
	,deleteQuery: function(query) {
		this.__context.deleteQuery(query);
	}
	,deleteRenderbuffer: function(renderbuffer) {
		this.__context.deleteRenderbuffer(renderbuffer);
	}
	,deleteSampler: function(sampler) {
		this.__context.deleteSampler(sampler);
	}
	,deleteShader: function(shader) {
		this.__context.deleteShader(shader);
	}
	,deleteSync: function(sync) {
		this.__context.deleteSync(sync);
	}
	,deleteTexture: function(texture) {
		this.__context.deleteTexture(texture);
	}
	,deleteTransformFeedback: function(transformFeedback) {
		this.__context.deleteTransformFeedback(transformFeedback);
	}
	,deleteVertexArray: function(vertexArray) {
		this.__context.deleteVertexArray(vertexArray);
	}
	,depthFunc: function(func) {
		this.__context.depthFunc(func);
	}
	,depthMask: function(flag) {
		this.__context.depthMask(flag);
	}
	,depthRange: function(zNear,zFar) {
		this.__context.depthRange(zNear,zFar);
	}
	,depthRangef: function(zNear,zFar) {
		this.depthRange(zNear,zFar);
	}
	,detachShader: function(program,shader) {
		this.__context.detachShader(program,shader);
	}
	,disable: function(cap) {
		this.__context.disable(cap);
	}
	,disableVertexAttribArray: function(index) {
		this.__context.disableVertexAttribArray(index);
	}
	,drawArrays: function(mode,first,count) {
		this.__context.drawArrays(mode,first,count);
	}
	,drawArraysInstanced: function(mode,first,count,instanceCount) {
		this.__context.drawArraysInstanced(mode,first,count,instanceCount);
	}
	,drawBuffers: function(buffers) {
		this.__context.drawBuffers(buffers);
	}
	,drawElements: function(mode,count,type,offset) {
		this.__context.drawElements(mode,count,type,offset);
	}
	,drawElementsInstanced: function(mode,count,type,offset,instanceCount) {
		this.__context.drawElementsInstanced(mode,count,type,offset,instanceCount);
	}
	,drawRangeElements: function(mode,start,end,count,type,offset) {
		this.__context.drawRangeElements(mode,start,end,count,type,offset);
	}
	,enable: function(cap) {
		this.__context.enable(cap);
	}
	,enableVertexAttribArray: function(index) {
		this.__context.enableVertexAttribArray(index);
	}
	,endQuery: function(target) {
		this.__context.endQuery(target);
	}
	,endTransformFeedback: function() {
		this.__context.endTransformFeedback();
	}
	,fenceSync: function(condition,flags) {
		return this.__context.fenceSync(condition,flags);
	}
	,finish: function() {
		this.__context.finish();
	}
	,flush: function() {
		this.__context.flush();
	}
	,framebufferRenderbuffer: function(target,attachment,renderbuffertarget,renderbuffer) {
		this.__context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
	}
	,framebufferTexture2D: function(target,attachment,textarget,texture,level) {
		this.__context.framebufferTexture2D(target,attachment,textarget,texture,level);
	}
	,framebufferTextureLayer: function(target,attachment,texture,level,layer) {
		this.__context.framebufferTextureLayer(target,attachment,texture,level,layer);
	}
	,frontFace: function(mode) {
		this.__context.frontFace(mode);
	}
	,generateMipmap: function(target) {
		this.__context.generateMipmap(target);
	}
	,getActiveAttrib: function(program,index) {
		return this.__context.getActiveAttrib(program,index);
	}
	,getActiveUniform: function(program,index) {
		return this.__context.getActiveUniform(program,index);
	}
	,getActiveUniformBlocki: function(program,uniformBlockIndex,pname) {
		return this.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniformBlockiv: function(program,uniformBlockIndex,pname,params) {
		var view = params;
		view[0] = this.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniformBlockName: function(program,uniformBlockIndex) {
		return this.__context.getActiveUniformBlockName(program,uniformBlockIndex);
	}
	,getActiveUniformBlockParameter: function(program,uniformBlockIndex,pname) {
		return this.__context.getActiveUniformBlockParameter(program,uniformBlockIndex,pname);
	}
	,getActiveUniforms: function(program,uniformIndices,pname) {
		return this.__context.getActiveUniforms(program,uniformIndices,pname);
	}
	,getActiveUniformsiv: function(program,uniformIndices,pname,params) {
	}
	,getAttachedShaders: function(program) {
		return this.__context.getAttachedShaders(program);
	}
	,getAttribLocation: function(program,name) {
		return this.__context.getAttribLocation(program,name);
	}
	,getBoolean: function(pname) {
		return this.getParameter(pname);
	}
	,getBooleanv: function(pname,params) {
		var view = params;
		var result = this.getParameter(pname);
		if((result instanceof Array) && result.__enum__ == null) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i] ? 1 : 0;
			}
		} else {
			view[0] = js_Boot.__cast(result , Bool) ? 1 : 0;
		}
	}
	,getBufferParameter: function(target,pname) {
		return this.__context.getBufferParameter(target,pname);
	}
	,getBufferParameteri: function(target,pname) {
		return this.getBufferParameter(target,pname);
	}
	,getBufferParameteri64v: function(target,pname,params) {
	}
	,getBufferParameteriv: function(target,pname,data) {
		var view = data;
		view[0] = this.getBufferParameter(target,pname);
	}
	,getBufferPointerv: function(target,pname) {
		return 0;
	}
	,getBufferSubData: function(target,offset,size,data) {
		this.__context.getBufferSubData(target,offset,data);
	}
	,getBufferSubDataWEBGL: function(target,srcByteOffset,dstData,srcOffset,length) {
		if(srcOffset != null) {
			this.__context.getBufferSubData(target,srcByteOffset,dstData,srcOffset,length);
		} else {
			this.__context.getBufferSubData(target,srcByteOffset,dstData);
		}
	}
	,getContextAttributes: function() {
		return this.__context.getContextAttributes();
	}
	,getError: function() {
		return this.__context.getError();
	}
	,getExtension: function(name) {
		return this.__context.getExtension(name);
	}
	,getFloat: function(pname) {
		return this.getParameter(pname);
	}
	,getFloatv: function(pname,params) {
		var view = params;
		var result = this.getParameter(pname);
		if(Std["is"](result,ArrayBufferView)) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i];
			}
		} else {
			view[0] = js_Boot.__cast(result , Float);
		}
	}
	,getFragDataLocation: function(program,name) {
		return this.__context.getFragDataLocation(program,name);
	}
	,getFramebufferAttachmentParameter: function(target,attachment,pname) {
		return this.__context.getFramebufferAttachmentParameter(target,attachment,pname);
	}
	,getFramebufferAttachmentParameteri: function(target,attachment,pname) {
		return this.getFramebufferAttachmentParameter(target,attachment,pname);
	}
	,getFramebufferAttachmentParameteriv: function(target,attachment,pname,params) {
		var value = this.getFramebufferAttachmentParameteri(target,attachment,pname);
		var view = params;
		view[0] = value;
	}
	,getIndexedParameter: function(target,index) {
		return this.__context.getIndexedParameter(target,index);
	}
	,getInteger: function(pname) {
		return this.getParameter(pname);
	}
	,getInteger64: function(pname) {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,getInteger64i: function(pname) {
		var this1 = new haxe__$Int64__$_$_$Int64(0,0);
		return this1;
	}
	,getInteger64i_v: function(pname,index,params) {
	}
	,getInteger64v: function(pname,params) {
	}
	,getIntegeri: function(pname) {
		return 0;
	}
	,getIntegeri_v: function(pname,index,params) {
	}
	,getIntegerv: function(pname,params) {
		var view = params;
		var result = this.getParameter(pname);
		if(Std["is"](result,ArrayBufferView)) {
			var data = result;
			var _g1 = 0;
			var _g = data.length;
			while(_g1 < _g) {
				var i = _g1++;
				view[i] = data[i];
			}
		} else {
			view[0] = js_Boot.__cast(result , Int);
		}
	}
	,getInternalformati: function(target,internalformat,pname) {
		return 0;
	}
	,getInternalformativ: function(target,internalformat,pname,bufSize,params) {
	}
	,getInternalformatParameter: function(target,internalformat,pname) {
		return this.__context.getInternalformatParameter(target,internalformat,pname);
	}
	,getParameter: function(pname) {
		return this.__context.getParameter(pname);
	}
	,getProgramBinary: function(program,binaryFormat) {
		return null;
	}
	,getProgrami: function(program,pname) {
		return this.getProgramParameter(program,pname);
	}
	,getProgramiv: function(program,pname,params) {
		var view = params;
		view[0] = this.getProgramParameter(program,pname);
	}
	,getProgramInfoLog: function(program) {
		return this.__context.getProgramInfoLog(program);
	}
	,getProgramParameter: function(program,pname) {
		return this.__context.getProgramParameter(program,pname);
	}
	,getQuery: function(target,pname) {
		return this.__context.getQuery(target,pname);
	}
	,getQueryi: function(target,pname) {
		return 0;
	}
	,getQueryiv: function(target,pname,params) {
	}
	,getQueryObjectui: function(query,pname) {
		return 0;
	}
	,getQueryObjectuiv: function(query,pname,params) {
	}
	,getQueryParameter: function(query,pname) {
		return this.__context.getQueryParameter(query,pname);
	}
	,getRenderbufferParameter: function(target,pname) {
		return this.__context.getRenderbufferParameter(target,pname);
	}
	,getRenderbufferParameteri: function(target,pname) {
		return this.getRenderbufferParameter(target,pname);
	}
	,getRenderbufferParameteriv: function(target,pname,params) {
		var view = params;
		view[0] = this.getRenderbufferParameter(target,pname);
	}
	,getSamplerParameter: function(sampler,pname) {
		return this.__context.getSamplerParameter(sampler,pname);
	}
	,getSamplerParameterf: function(sampler,pname) {
		return 0;
	}
	,getSamplerParameterfv: function(sampler,pname,params) {
	}
	,getSamplerParameteri: function(sampler,pname) {
		return 0;
	}
	,getSamplerParameteriv: function(sampler,pname,params) {
	}
	,getShaderi: function(shader,pname) {
		return this.getShaderParameter(shader,pname);
	}
	,getShaderiv: function(shader,pname,params) {
		var view = params;
		view[0] = this.getShaderParameter(shader,pname);
	}
	,getShaderInfoLog: function(shader) {
		return this.__context.getShaderInfoLog(shader);
	}
	,getShaderParameter: function(shader,pname) {
		return this.__context.getShaderParameter(shader,pname);
	}
	,getShaderPrecisionFormat: function(shadertype,precisiontype) {
		return this.__context.getShaderPrecisionFormat(shadertype,precisiontype);
	}
	,getShaderSource: function(shader) {
		return this.__context.getShaderSource(shader);
	}
	,getString: function(pname) {
		return this.getParameter(pname);
	}
	,getStringi: function(name,index) {
		return null;
	}
	,getSupportedExtensions: function() {
		return this.__context.getSupportedExtensions();
	}
	,getSyncParameter: function(sync,pname) {
		return this.__context.getSyncParameter(sync,pname);
	}
	,getSyncParameteri: function(sync,pname) {
		return 0;
	}
	,getSyncParameteriv: function(sync,pname,params) {
	}
	,getTexParameter: function(target,pname) {
		return this.__context.getTexParameter(target,pname);
	}
	,getTexParameterf: function(target,pname) {
		return this.getTexParameter(target,pname);
	}
	,getTexParameterfv: function(target,pname,params) {
		var view = params;
		view[0] = this.getTexParameter(target,pname);
	}
	,getTexParameteri: function(target,pname) {
		return this.getTexParameter(target,pname);
	}
	,getTexParameteriv: function(target,pname,params) {
		var view = params;
		view[0] = this.getTexParameter(target,pname);
	}
	,getTransformFeedbackVarying: function(program,index) {
		return this.__context.getTransformFeedbackVarying(program,index);
	}
	,getUniform: function(program,location) {
		return this.__context.getUniform(program,location);
	}
	,getUniformf: function(program,location) {
		return this.getUniform(program,location);
	}
	,getUniformfv: function(program,location,params) {
		var view = params;
		view[0] = this.getUniformf(program,location);
	}
	,getUniformi: function(program,location) {
		return this.getUniform(program,location);
	}
	,getUniformiv: function(program,location,params) {
		var value = this.getUniformi(program,location);
		var view = params;
		view[0] = value;
	}
	,getUniformui: function(program,location) {
		return 0;
	}
	,getUniformuiv: function(program,location,params) {
	}
	,getUniformBlockIndex: function(program,uniformBlockName) {
		return this.__context.getUniformBlockIndex(program,uniformBlockName);
	}
	,getUniformIndices: function(program,uniformNames) {
		return this.__context.getUniformIndices(program,uniformNames);
	}
	,getUniformLocation: function(program,name) {
		return this.__context.getUniformLocation(program,name);
	}
	,getVertexAttrib: function(index,pname) {
		return this.__context.getVertexAttrib(index,pname);
	}
	,getVertexAttribf: function(index,pname) {
		return 0;
	}
	,getVertexAttribfv: function(index,pname,params) {
	}
	,getVertexAttribi: function(index,pname) {
		return 0;
	}
	,getVertexAttribIi: function(index,pname) {
		return 0;
	}
	,getVertexAttribIiv: function(index,pname,params) {
	}
	,getVertexAttribIui: function(index,pname) {
		return 0;
	}
	,getVertexAttribIuiv: function(index,pname,params) {
	}
	,getVertexAttribiv: function(index,pname,params) {
	}
	,getVertexAttribOffset: function(index,pname) {
		return this.__context.getVertexAttribOffset(index,pname);
	}
	,getVertexAttribPointerv: function(index,pname) {
		return this.getVertexAttribOffset(index,pname);
	}
	,hint: function(target,mode) {
		this.__context.hint(target,mode);
	}
	,invalidateFramebuffer: function(target,attachments) {
		this.__context.invalidateFramebuffer(target,attachments);
	}
	,invalidateSubFramebuffer: function(target,attachments,x,y,width,height) {
		this.__context.invalidateSubFramebuffer(target,attachments,x,y,width,height);
	}
	,isBuffer: function(buffer) {
		return this.__context.isBuffer(buffer);
	}
	,isEnabled: function(cap) {
		return this.__context.isEnabled(cap);
	}
	,isFramebuffer: function(framebuffer) {
		return this.__context.isFramebuffer(framebuffer);
	}
	,isProgram: function(program) {
		return this.__context.isProgram(program);
	}
	,isQuery: function(query) {
		return this.__context.isQuery(query);
	}
	,isRenderbuffer: function(renderbuffer) {
		return this.__context.isRenderbuffer(renderbuffer);
	}
	,isSampler: function(sampler) {
		return this.__context.isSampler(sampler);
	}
	,isShader: function(shader) {
		return this.__context.isShader(shader);
	}
	,isSync: function(sync) {
		return this.__context.isSync(sync);
	}
	,isTexture: function(texture) {
		return this.__context.isTexture(texture);
	}
	,isTransformFeedback: function(transformFeedback) {
		return this.__context.isTransformFeedback(transformFeedback);
	}
	,isVertexArray: function(vertexArray) {
		return this.__context.isVertexArray(vertexArray);
	}
	,lineWidth: function(width) {
		this.__context.lineWidth(width);
	}
	,linkProgram: function(program) {
		this.__context.linkProgram(program);
	}
	,mapBufferRange: function(target,offset,length,access) {
		return 0;
	}
	,pauseTransformFeedback: function() {
		this.__context.pauseTransformFeedback();
	}
	,pixelStorei: function(pname,param) {
		this.__context.pixelStorei(pname,param);
	}
	,polygonOffset: function(factor,units) {
		this.__context.polygonOffset(factor,units);
	}
	,programBinary: function(program,binaryFormat,binary,length) {
	}
	,programParameteri: function(program,pname,value) {
	}
	,readBuffer: function(src) {
		this.__context.readBuffer(src);
	}
	,readPixels: function(x,y,width,height,format,type,pixels) {
		this.__context.readPixels(x,y,width,height,format,type,pixels.toBufferView());
	}
	,readPixelsWEBGL: function(x,y,width,height,format,type,pixels,dstOffset) {
		if(dstOffset != null) {
			this.__context.readPixels(x,y,width,height,format,type,pixels,dstOffset);
		} else {
			this.__context.readPixels(x,y,width,height,format,type,pixels);
		}
	}
	,releaseShaderCompiler: function() {
	}
	,renderbufferStorage: function(target,internalformat,width,height) {
		this.__context.renderbufferStorage(target,internalformat,width,height);
	}
	,renderbufferStorageMultisample: function(target,samples,internalFormat,width,height) {
		if(this.version == 1) {
			this.renderbufferStorage(target,internalFormat,width,height);
		} else if(this.version == 2) {
			this.__context.renderbufferStorageMultisample(target,samples,internalFormat,width,height);
		}
	}
	,resumeTransformFeedback: function() {
		this.__context.resumeTransformFeedback();
	}
	,sampleCoverage: function(value,invert) {
		this.__context.sampleCoverage(value,invert);
	}
	,samplerParameterf: function(sampler,pname,param) {
		this.__context.samplerParameterf(sampler,pname,param);
	}
	,samplerParameteri: function(sampler,pname,param) {
		this.__context.samplerParameteri(sampler,pname,param);
	}
	,scissor: function(x,y,width,height) {
		this.__context.scissor(x,y,width,height);
	}
	,shaderBinary: function(shaders,binaryformat,binary,length) {
	}
	,shaderSource: function(shader,source) {
		this.__context.shaderSource(shader,source);
	}
	,stencilFunc: function(func,ref,mask) {
		this.__context.stencilFunc(func,ref,mask);
	}
	,stencilFuncSeparate: function(face,func,ref,mask) {
		this.__context.stencilFuncSeparate(face,func,ref,mask);
	}
	,stencilMask: function(mask) {
		this.__context.stencilMask(mask);
	}
	,stencilMaskSeparate: function(face,mask) {
		this.__context.stencilMaskSeparate(face,mask);
	}
	,stencilOp: function(fail,zfail,zpass) {
		this.__context.stencilOp(fail,zfail,zpass);
	}
	,stencilOpSeparate: function(face,fail,zfail,zpass) {
		this.__context.stencilOpSeparate(face,fail,zfail,zpass);
	}
	,texImage2D: function(target,level,internalformat,width,height,border,format,type,data) {
		this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,data);
	}
	,texImage2DWEBGL: function(target,level,internalformat,width,height,border,format,type,srcData,srcOffset) {
		if(srcOffset != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
		} else if(format != null) {
			this.__context.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
		} else {
			this.__context.texImage2D(target,level,internalformat,width,height,border);
		}
	}
	,texImage3D: function(target,level,internalformat,width,height,depth,border,format,type,data) {
		this.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,data.toBufferView());
	}
	,texImage3DWEBGL: function(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset) {
		this.__context.texImage3D(target,level,internalformat,width,height,depth,border,format,type,srcData,srcOffset);
	}
	,texStorage2D: function(target,level,internalformat,width,height) {
		this.__context.texStorage2D(target,level,internalformat,width,height);
	}
	,texStorage3D: function(target,level,internalformat,width,height,depth) {
		this.__context.texStorage3D(target,level,internalformat,width,height,depth);
	}
	,texParameterf: function(target,pname,param) {
		this.__context.texParameterf(target,pname,param);
	}
	,texParameteri: function(target,pname,param) {
		this.__context.texParameteri(target,pname,param);
	}
	,texSubImage2D: function(target,level,xoffset,yoffset,width,height,format,type,data) {
		this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data.toBufferView());
	}
	,texSubImage2DWEBGL: function(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset) {
		if(srcOffset != null) {
			this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData,srcOffset);
		} else if(type != null) {
			this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,srcData);
		} else {
			this.__context.texSubImage2D(target,level,xoffset,yoffset,width,height,format);
		}
	}
	,texSubImage3D: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data) {
		this.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,data.toBufferView());
	}
	,texSubImage3DWEBGL: function(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset) {
		this.__context.texSubImage3D(target,level,xoffset,yoffset,zoffset,width,height,depth,format,type,source,srcOffset);
	}
	,transformFeedbackVaryings: function(program,varyings,bufferMode) {
		this.__context.transformFeedbackVaryings(program,varyings,bufferMode);
	}
	,uniform1f: function(location,v0) {
		this.__context.uniform1f(location,v0);
	}
	,uniform1fv: function(location,count,v) {
		this.__context.uniform1fv(location,v);
	}
	,uniform1fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform1fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform1fv(location,data);
		}
	}
	,uniform1i: function(location,v0) {
		this.__context.uniform1i(location,v0);
	}
	,uniform1iv: function(location,count,v) {
		this.__context.uniform1iv(location,v);
	}
	,uniform1ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform1iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform1iv(location,data);
		}
	}
	,uniform1ui: function(location,v0) {
		this.__context.uniform1ui(location,v0);
		return;
	}
	,uniform1uiv: function(location,count,v) {
		this.__context.uniform1uiv(location,v);
	}
	,uniform1uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform1uiv(location,data,srcOffset,srcLength);
	}
	,uniform2f: function(location,v0,v1) {
		this.__context.uniform2f(location,v0,v1);
	}
	,uniform2fv: function(location,count,v) {
		this.__context.uniform2fv(location,v);
	}
	,uniform2fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform2fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform2fv(location,data);
		}
	}
	,uniform2i: function(location,x,y) {
		this.__context.uniform2i(location,x,y);
	}
	,uniform2iv: function(location,count,v) {
		this.__context.uniform2iv(location,v);
	}
	,uniform2ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform2iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform2iv(location,data);
		}
	}
	,uniform2ui: function(location,v0,v1) {
		this.__context.uniform2ui(location,v0,v1);
	}
	,uniform2uiv: function(location,count,v) {
		this.__context.uniform2uiv(location,v);
	}
	,uniform2uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform2uiv(location,data,srcOffset,srcLength);
	}
	,uniform3f: function(location,v0,v1,v2) {
		this.__context.uniform3f(location,v0,v1,v2);
	}
	,uniform3fv: function(location,count,v) {
		this.__context.uniform3fv(location,v);
	}
	,uniform3fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform3fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform3fv(location,data);
		}
	}
	,uniform3i: function(location,x,y,z) {
		this.__context.uniform3i(location,x,y,z);
	}
	,uniform3iv: function(location,count,v) {
		this.__context.uniform3iv(location,v);
	}
	,uniform3ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform3iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform3iv(location,data);
		}
	}
	,uniform3ui: function(location,v0,v1,v2) {
		this.__context.uniform3ui(location,v0,v1,v2);
	}
	,uniform3uiv: function(location,count,v) {
		this.__context.uniform3uiv(location,v);
	}
	,uniform3uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform3uiv(location,data,srcOffset,srcLength);
	}
	,uniform4f: function(location,v0,v1,v2,v3) {
		this.__context.uniform4f(location,v0,v1,v2,v3);
	}
	,uniform4fv: function(location,count,v) {
		this.__context.uniform4fv(location,v);
	}
	,uniform4fvWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform4fv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform4fv(location,data);
		}
	}
	,uniform4i: function(location,v0,v1,v2,v3) {
		this.__context.uniform4i(location,v0,v1,v2,v3);
	}
	,uniform4iv: function(location,count,v) {
		this.__context.uniform4iv(location,v);
	}
	,uniform4ivWEBGL: function(location,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniform4iv(location,data,srcOffset,srcLength);
		} else {
			this.__context.uniform4iv(location,data);
		}
	}
	,uniform4ui: function(location,v0,v1,v2,v3) {
		this.__context.uniform4ui(location,v0,v1,v2,v3);
	}
	,uniform4uiv: function(location,count,v) {
		this.__context.uniform4uiv(location,v);
	}
	,uniform4uivWEBGL: function(location,data,srcOffset,srcLength) {
		this.__context.uniform4uiv(location,data,srcOffset,srcLength);
	}
	,uniformBlockBinding: function(program,uniformBlockIndex,uniformBlockBinding) {
		this.__context.uniformBlockBinding(program,uniformBlockIndex,uniformBlockBinding);
	}
	,uniformMatrix2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2fv(location,transpose,v);
	}
	,uniformMatrix2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix2fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix2fv(location,transpose,data);
		}
	}
	,uniformMatrix2x3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2x3fv(location,transpose,v);
	}
	,uniformMatrix2x3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix2x3fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix2x4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix2x4fv(location,transpose,v);
	}
	,uniformMatrix2x4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix2x4fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3fv(location,transpose,v);
	}
	,uniformMatrix3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix3fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix3fv(location,transpose,data);
		}
	}
	,uniformMatrix3x2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3x2fv(location,transpose,v);
	}
	,uniformMatrix3x2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix3x2fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix3x4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix3x4fv(location,transpose,v);
	}
	,uniformMatrix3x4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix3x4fv(location,transpose,data,srcOffset,srcLength);
	}
	,uniformMatrix4fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4fv(location,transpose,v);
	}
	,uniformMatrix4fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix4fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix4fv(location,transpose,data);
		}
	}
	,uniformMatrix4x2fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4x2fv(location,transpose,v);
	}
	,uniformMatrix4x2fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		if(srcOffset != null) {
			this.__context.uniformMatrix4x2fv(location,transpose,data,srcOffset,srcLength);
		} else {
			this.__context.uniformMatrix4x2fv(location,transpose,data);
		}
	}
	,uniformMatrix4x3fv: function(location,count,transpose,v) {
		this.__context.uniformMatrix4x3fv(location,transpose,v);
	}
	,uniformMatrix4x3fvWEBGL: function(location,transpose,data,srcOffset,srcLength) {
		this.__context.uniformMatrix4x3fv(location,transpose,data,srcOffset,srcLength);
	}
	,unmapBuffer: function(target) {
		return false;
	}
	,useProgram: function(program) {
		this.__context.useProgram(program);
	}
	,validateProgram: function(program) {
		this.__context.validateProgram(program);
	}
	,vertexAttrib1f: function(index,v0) {
		this.__context.vertexAttrib1f(index,v0);
	}
	,vertexAttrib1fv: function(index,v) {
		this.__context.vertexAttrib1fv(index,v);
	}
	,vertexAttrib1fvWEBGL: function(index,v) {
		this.__context.vertexAttrib1fv(index,v);
	}
	,vertexAttrib2f: function(index,v0,v1) {
		this.__context.vertexAttrib2f(index,v0,v1);
	}
	,vertexAttrib2fv: function(index,v) {
		this.__context.vertexAttrib2fv(index,v);
	}
	,vertexAttrib2fvWEBGL: function(index,v) {
		this.__context.vertexAttrib2fv(index,v);
	}
	,vertexAttrib3f: function(index,v0,v1,v2) {
		this.__context.vertexAttrib3f(index,v0,v1,v2);
	}
	,vertexAttrib3fv: function(index,v) {
		this.__context.vertexAttrib3fv(index,v);
	}
	,vertexAttrib3fvWEBGL: function(index,v) {
		this.__context.vertexAttrib3fv(index,v);
	}
	,vertexAttrib4f: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttrib4f(index,v0,v1,v2,v3);
	}
	,vertexAttrib4fv: function(index,v) {
		this.__context.vertexAttrib4fv(index,v);
	}
	,vertexAttrib4fvWEBGL: function(index,v) {
		this.__context.vertexAttrib4fv(index,v);
	}
	,vertexAttribDivisor: function(index,divisor) {
		this.__context.vertexAttribDivisor(index,divisor);
	}
	,vertexAttribI4i: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttribI4i(index,v0,v1,v2,v3);
	}
	,vertexAttribI4iv: function(index,v) {
		this.__context.vertexAttribI4iv(index,v);
	}
	,vertexAttribI4ivWEBGL: function(index,v) {
		this.__context.vertexAttribI4iv(index,v);
	}
	,vertexAttribI4ui: function(index,v0,v1,v2,v3) {
		this.__context.vertexAttribI4ui(index,v0,v1,v2,v3);
	}
	,vertexAttribI4uiv: function(index,v) {
		this.__context.vertexAttribI4uiv(index,v.toUInt32Array());
	}
	,vertexAttribI4uivWEBGL: function(index,v) {
		this.__context.vertexAttribI4uiv(index,v);
	}
	,vertexAttribIPointer: function(index,size,type,stride,offset) {
		this.__context.vertexAttribIPointer(index,size,type,stride,offset);
	}
	,vertexAttribPointer: function(index,size,type,normalized,stride,offset) {
		this.__context.vertexAttribPointer(index,size,type,normalized,stride,offset);
	}
	,viewport: function(x,y,width,height) {
		this.__context.viewport(x,y,width,height);
	}
	,waitSync: function(sync,flags,timeout) {
		this.__context.waitSync(sync,flags,timeout);
	}
	,__class__: lovedna_game_graphics_RenderContext
};
var lovedna_game_System = function() {
	lovedna_events_EventDispatcher.call(this);
	this.depth = true;
	this.stencil = true;
	this._initDelay = new lovedna_task_DelayCall($bind(this,this.init));
	this._inited = false;
	this._focusDelay = new lovedna_task_DelayCall($bind(this,this.focus));
	this._touchManager = new lovedna_ui_TouchManager(false);
	this._touch = new lovedna_ui_Touch();
	var events = ["blur","resize","focus","beforeunload"];
	var _g = 0;
	while(_g < events.length) {
		var e = events[_g];
		++_g;
		js_Browser.get_window().addEventListener(e,$bind(this,this.handleWindowEvent),{capture: false,passive: false});
	}
	this._keyManager = lovedna_ui_KeyManager.getInstance();
	this._key = new lovedna_ui_Key();
	js_Browser.get_window().addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
	js_Browser.get_window().addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
	
						var vendors = ['ms', 'moz', 'webkit', 'o'];
						for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
						window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
						window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
					}
						;
	this._frame = 0;
	this._active = true;
	if(($_=js_Browser.get_window(),$bind($_,$_.requestAnimationFrame)) != null) {
		this.handleWindowUpdate();
	} else {
		haxe_Log.trace("RequestAnimationFrame is null",{ fileName : "System.hx", lineNumber : 86, className : "lovedna.game.System", methodName : "new"});
	}
	js_Browser.get_window().oncontextmenu = function(e1) {
		e1.preventDefault();
	};
	this.isFullscreen = false;
	this.requestedFullscreen = false;
};
$hxClasses["lovedna.game.System"] = lovedna_game_System;
lovedna_game_System.__name__ = ["lovedna","game","System"];
lovedna_game_System.__super__ = lovedna_events_EventDispatcher;
lovedna_game_System.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	setup: function(config) {
		if(config == null) {
			return;
		}
		if(lovedna_utils_DynamicUtil.exist(config,"canvas")) {
			var canvas = lovedna_utils_DynamicUtil.getValue(config,"canvas");
			if(canvas != null) {
				this._canvas_webgl = canvas;
				this.setupTouchInput(this._canvas_webgl);
				this.depth = lovedna_utils_DynamicUtil.getBool(config,"depth",true);
				this.stencil = lovedna_utils_DynamicUtil.getBool(config,"stencil",true);
				var options = { alpha : lovedna_utils_DynamicUtil.getBool(config,"alpha",true), antialias : lovedna_utils_DynamicUtil.getBool(config,"alpha",false), depth : this.depth, premultipliedAlpha : lovedna_utils_DynamicUtil.getBool(config,"premultipliedAlpha",true), stencil : this.stencil, preserveDrawingBuffer : lovedna_utils_DynamicUtil.getBool(config,"preserveDrawingBuffer",false)};
				var glContextType = ["webgl","experimental-webgl"];
				if(lovedna_utils_DynamicUtil.getInt(config,"webgl") == 2) {
					glContextType.unshift("webgl2");
				}
				var webgl = null;
				var version = 1;
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this._canvas_webgl.getContext(name,options);
					if(webgl != null) {
						if(name == "webgl2") {
							version = 2;
						}
						break;
					}
				}
				if(webgl != null) {
					if(!this._inited) {
						lovedna_task_DelayCall.add(this._initDelay,0.1);
					}
					this._inited = true;
					lovedna_game_System.gl.setup(webgl,version);
				}
			}
		}
		if(lovedna_utils_DynamicUtil.exist(config,"input")) {
			var input = lovedna_utils_DynamicUtil.getValue(config,"input");
			this.setupTouchInput(input);
		}
	}
	,setFullscreen: function(value) {
		var document = js_Browser.get_window().document;
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this._inputElement,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this._inputElement.requestFullscreen();
				} else if(this._inputElement.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this._inputElement.mozRequestFullScreen();
				} else if(this._inputElement.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this._inputElement.webkitRequestFullscreen();
				} else if(this._inputElement.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this._inputElement.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if($bind(document,document.exitFullscreen)) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
	}
	,init: function() {
		this.width = this._canvas_webgl.width;
		this.height = this._canvas_webgl.height;
		this.doResize();
		this.dispatchEvent(lovedna_game_events_SystemEvent.init);
	}
	,setupTouchInput: function(element) {
		if(element == null) {
			return;
		}
		if(this._inputElement == element) {
			return;
		}
		if(this._inputElement != null) {
			this.touchdisconnect();
		}
		this._inputElement = element;
		this.touchconnect();
	}
	,touchconnect: function() {
		var fnv = new lovedna_ds_Fnv();
		fnv.addString(this._inputElement.id);
		this._touch.device = fnv.getCode();
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			this._inputElement.addEventListener(event,$bind(this,this.handleMouseEvent),{capture: false,passive: false});
		}
		events = ["touchstart","touchmove","touchend","touchcancel"];
		var _g1 = 0;
		while(_g1 < events.length) {
			var event1 = events[_g1];
			++_g1;
			this._inputElement.addEventListener(event1,$bind(this,this.handleTouchEvent),{capture: false,passive: false});
		}
	}
	,touchdisconnect: function() {
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			this._inputElement.removeEventListener(event,$bind(this,this.handleMouseEvent));
		}
		events = ["touchstart","touchmove","touchend","touchcancel"];
		var _g1 = 0;
		while(_g1 < events.length) {
			var event1 = events[_g1];
			++_g1;
			this._inputElement.removeEventListener(event1,$bind(this,this.handleTouchEvent));
		}
	}
	,handleMouseEvent: function(event) {
		if(this._touchManager.touchType == 0) {
			this._touchManager.touchType = 1;
		}
		if(this._touchManager.touchType != 1) {
			return;
		}
		var type = event.type;
		this._touch.position.set(0,0);
		this._touch.touchId = event.button;
		this._touch.pressure = -1;
		if(type != "wheel") {
			var rect = this._inputElement.getBoundingClientRect();
			this._touch.position.set(event.offsetX / rect.width,event.offsetY / rect.height);
			if(type == "mousemove") {
				this._touchManager.move(this._touch);
			} else {
				var tmp = type == "mouseenter";
			}
			if(type == "mousedown") {
				this._touchManager.begin(this._touch);
			}
			if(type == "mouseup") {
				this._touchManager.end(this._touch);
			}
			if(type == "mouseleave") {
				this._touchManager.cancel(this._touch);
			}
		} else {
			var we = event;
			if(we == null) {
				return;
			}
		}
	}
	,handleTouchEvent: function(event) {
		if(this._touchManager.touchType == 0) {
			this._touchManager.touchType = 2;
		}
		if(this._touchManager.touchType != 2) {
			return;
		}
		var type = event.type;
		var rect = this._inputElement.getBoundingClientRect();
		this._touch.position.set(0,0);
		this._touch.touchId = 0;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			this._touch.position.set((data.clientX - rect.left) / rect.width,(data.clientY - rect.top) / rect.height);
			this._touch.touchId = data.identifier;
			this._touch.pressure = data.force;
			if(type == "touchmove") {
				this._touchManager.move(this._touch);
			} else if(type == "touchstart") {
				this._touchManager.begin(this._touch);
			} else if(type == "touchend") {
				this._touchManager.end(this._touch);
			} else if(type == "touchcancel") {
				this._touchManager.cancel(this._touch);
			}
		}
	}
	,handleWindowEvent: function(event) {
		var type = event.type;
		if(type == "focus") {
			lovedna_task_DelayCall.add(this._focusDelay,0.1);
		} else if(type == "blur") {
			lovedna_game_GameTime.blur();
			this._active = false;
			this._frame = 0;
		} else if(type == "resize") {
			if(this._inited) {
				this.doResize();
			}
		} else {
			var tmp = type == "beforeunload";
		}
	}
	,focus: function() {
		lovedna_game_GameTime.focus();
		this._active = true;
		if(this._frame == 0) {
			this.handleWindowUpdate();
		}
	}
	,handleWindowUpdate: function(e) {
		if(this._frame != 0) {
			this.dispatchEvent(lovedna_game_events_SystemEvent.update);
		}
		if(this._active) {
			this._frame++;
			js_Browser.get_window().requestAnimationFrame($bind(this,this.handleWindowUpdate));
		}
	}
	,doResize: function() {
		var cw = 0;
		var ch = 0;
		if(this._canvas_webgl.parentElement != null) {
			cw = this._canvas_webgl.parentElement.clientWidth;
			ch = this._canvas_webgl.parentElement.clientHeight;
		} else {
			cw = js_Browser.get_window().innerWidth;
			ch = js_Browser.get_window().innerHeight;
		}
		if(this.width != cw || this.height != ch) {
			this.width = lovedna_utils_Helper.floor(cw);
			this.height = lovedna_utils_Helper.floor(ch);
			this._canvas_webgl.width = this.width;
			this._canvas_webgl.height = this.height;
			lovedna_game_events_SystemEvent.resize.vintlist[0] = this.width;
			lovedna_game_events_SystemEvent.resize.vintlist[1] = this.height;
			this.dispatchEvent(lovedna_game_events_SystemEvent.resize);
		}
	}
	,handleFullscreenEvent: function(event) {
		var document = js_Browser.get_window().document;
		this.requestedFullscreen = false;
		var isfull = true;
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			isfull = true;
		} else {
			isfull = false;
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g1 = 0;
			var _g = changeEvents.length;
			while(_g1 < _g) {
				var i = _g1++;
				js_Browser.get_document().removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				js_Browser.get_document().removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
		if(isfull != this.isFullscreen) {
			this.isFullscreen = isfull;
			lovedna_game_events_SystemEvent.resize.vbool = this.isFullscreen;
			this.dispatchEvent(lovedna_game_events_SystemEvent.fullScreen);
		}
	}
	,handleKeyEvent: function(event) {
		this._key.deviceType = 0;
		this._key.deviceId = 0;
		this._key.keyCode = event.keyCode;
		this._key.key = event.key;
		this._key.value = 0;
		this._key.modifier.clear();
		this._key.modifier.setElement(3,event.altKey);
		this._key.modifier.setElement(2,event.ctrlKey);
		this._key.modifier.setElement(1,event.shiftKey);
		this._key.modifier.setElement(4,event.metaKey);
		this._key.type = event.type == "keydown" ? 1 : 2;
		this._keyManager.keyTrigger(this._key);
	}
	,__class__: lovedna_game_System
});
var lovedna_game_World = function() {
	this.fixedCount = 1;
	lovedna_Object.call(this);
	this._dirty = true;
	this.set_dirty(true);
	this._resized = true;
	this._now = lovedna_Time.get_now();
	this._fixedTime = 0;
	this._root = new lovedna_game_Actor();
	this._actorList = new lovedna_ds_FastArray();
	this._actorMap = new haxe_ds_IntMap();
	this._addMap = new haxe_ds_IntMap();
	this._collectorMap = new haxe_ds_StringMap();
	this._collectorList = [];
	this.collectorCamera = new lovedna_game_collectors_CameraCollector();
	this.collectorRenderer = new lovedna_game_collectors_RendererCollector();
	this.collectorCollider = new lovedna_game_collectors_ColliderCollector();
	this.collectorLight = new lovedna_game_collectors_LightCollector();
	this.addCollector(this.collectorCamera);
	this.addCollector(this.collectorRenderer);
	this.addCollector(this.collectorCollider);
	this.addCollector(this.collectorLight);
};
$hxClasses["lovedna.game.World"] = lovedna_game_World;
lovedna_game_World.__name__ = ["lovedna","game","World"];
lovedna_game_World.__super__ = lovedna_Object;
lovedna_game_World.prototype = $extend(lovedna_Object.prototype,{
	addChild: function(v) {
		this._root.get_transform().addChild(v.get_transform());
		this.set_dirty(true);
	}
	,removeChild: function(v) {
		this._root.get_transform().removeChild(v.get_transform());
		this.set_dirty(true);
	}
	,addCollector: function(v) {
		if(this._collectorList.indexOf(v) == -1) {
			this._collectorList.push(v);
		}
	}
	,removeCollector: function(v) {
		var id = this._collectorList.indexOf(v);
		if(id != -1) {
			this._collectorList.splice(id,1);
		}
		var n = this._collectorMap.keys();
		while(n.hasNext()) {
			var n1 = n.next();
			var c = this._collectorMap.get(n1);
			if(c == v) {
				this._collectorMap.remove(n1);
			}
		}
	}
	,getCollector: function(v) {
		var c = this._collectorMap.iterator();
		while(c.hasNext()) {
			var c1 = c.next();
			if(Std["is"](c1,v)) {
				return c1;
			}
		}
		return null;
	}
	,_onAdd: function() {
		this._now = lovedna_Time.get_now();
		this._fixedTime = 0;
		this.game = lovedna_game_Game.current;
	}
	,_onRemove: function() {
	}
	,_resize: function(w,h) {
		this.width = w;
		this.height = h;
		this._resized = true;
	}
	,_update: function(frame) {
		lovedna_game_World.current = this;
		var resized = this._resized;
		this._resized = false;
		var time = lovedna_game_GameTime.get_now();
		this.deltaTime = time - this._now;
		if(this.deltaTime < 0 || this.deltaTime > lovedna_game_World.maxDeltaTime) {
			this.deltaTime = lovedna_game_World.maxDeltaTime;
		}
		this._root.deltaTime = this.deltaTime;
		this._fixedTime += this.deltaTime;
		this.fixedCount = 0;
		if(this._fixedTime >= 0.0166666666666667) {
			this.fixedCount = lovedna_utils_Helper.floor(this._fixedTime / 0.0166666666666667);
			this._fixedTime %= 0.0166666666666667;
		}
		this._now = time;
		var len = this._actorList.get_length();
		var actor = null;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			actor = this._actorList.get(i);
			if(actor.get_enabled()) {
				actor._update(this.fixedCount);
			}
		}
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			actor = this._actorList.get(i1);
			if(actor.get_enabled()) {
				actor.dispatchEvent(lovedna_game_events_ActorEvent.onLateUpdate);
			}
		}
		this.collectActors();
		len = this._actorList.get_length();
		var _g12 = 0;
		var _g3 = len;
		while(_g12 < _g3) {
			var i2 = _g12++;
			actor = this._actorList.get(i2);
			if(actor.get_enabled()) {
				if(resized) {
					actor.dispatchEvent(lovedna_game_events_ActorEvent.onScreenResize);
				}
				actor._updateTransform(frame);
			}
		}
		len = this.collectorCamera.count;
		var _g13 = 0;
		var _g4 = len;
		while(_g13 < _g4) {
			var i3 = _g13++;
			this.collectorCamera.get(i3).data.render(this.collectorRenderer);
		}
	}
	,_render: function() {
	}
	,collectActors: function() {
		if(this._dirty) {
			this._dirty = false;
			var len = this._actorList.get_length();
			while(len-- > 0) {
				var a = this._actorList.get(len);
				this._addMap.set(a.instanceID,a);
			}
			this._actorList.clear();
			this._root._collectActors(this._actorList);
			len = this._actorList.get_length();
			while(len-- > 0) {
				var a1 = this._actorList.get(len);
				if(!this._actorMap.exists(a1.instanceID)) {
					a1._connectWorld(this);
					this._actorMap.set(a1.instanceID,a1);
				}
				this._addMap.remove(a1.instanceID);
			}
			var a2 = this._addMap.iterator();
			while(a2.hasNext()) {
				var a3 = a2.next();
				a3._disconnectWorld();
				this._addMap.remove(a3.instanceID);
			}
		}
	}
	,addComponent: function(v) {
		var type = v.classType;
		if(this._collectorMap.exists(type)) {
			this._collectorMap.get(type).add(v);
		} else {
			var len = this._collectorList.length;
			while(len-- > 0) {
				var c = this._collectorList[len];
				if(c.exist(v)) {
					c.add(v);
					this._collectorMap.set(type,c);
				}
			}
		}
	}
	,removeComponent: function(v) {
		var type = v.classType;
		if(this._collectorMap.exists(type)) {
			this._collectorMap.get(type).remove(v);
		}
	}
	,set_dirty: function(v) {
		this._dirty = true;
		return true;
	}
	,__class__: lovedna_game_World
	,__properties__: {set_dirty:"set_dirty"}
});
var lovedna_game_collectors_ComponentCollector = function() { };
$hxClasses["lovedna.game.collectors.ComponentCollector"] = lovedna_game_collectors_ComponentCollector;
lovedna_game_collectors_ComponentCollector.__name__ = ["lovedna","game","collectors","ComponentCollector"];
lovedna_game_collectors_ComponentCollector.prototype = {
	__class__: lovedna_game_collectors_ComponentCollector
};
var lovedna_game_collectors_CameraCollector = function() {
	this._dirty = false;
	this.count = 0;
	this._cameras = new haxe_ds_IntMap();
	this._list = [];
};
$hxClasses["lovedna.game.collectors.CameraCollector"] = lovedna_game_collectors_CameraCollector;
lovedna_game_collectors_CameraCollector.__name__ = ["lovedna","game","collectors","CameraCollector"];
lovedna_game_collectors_CameraCollector.__interfaces__ = [lovedna_game_collectors_ComponentCollector];
lovedna_game_collectors_CameraCollector.prototype = {
	exist: function(v) {
		return Std["is"](v,lovedna_game_components_Camera);
	}
	,add: function(v) {
		if(this._cameras.exists(v.instanceID)) {
			return;
		}
		this._cameras.set(v.instanceID,v);
		this._dirty = true;
		this._list.push(v);
		this.count = this._list.length;
	}
	,remove: function(v) {
		if(!this._cameras.exists(v.instanceID)) {
			return;
		}
		this._cameras.remove(v.instanceID);
		HxOverrides.remove(this._list,v);
		this.count = this._list.length;
	}
	,get: function(i) {
		if(this._dirty) {
			this._list.sort($bind(this,this.sort));
		}
		return this._list[i];
	}
	,sort: function(a,b) {
		if(a.depth != b.depth) {
			if(a.depth > b.depth) {
				return 1;
			} else {
				return -1;
			}
		}
		return 0;
	}
	,__class__: lovedna_game_collectors_CameraCollector
};
var lovedna_game_collectors_ColliderCollector = function() {
	this._list = [];
	this.count = 0;
	this._map = new haxe_ds_IntMap();
};
$hxClasses["lovedna.game.collectors.ColliderCollector"] = lovedna_game_collectors_ColliderCollector;
lovedna_game_collectors_ColliderCollector.__name__ = ["lovedna","game","collectors","ColliderCollector"];
lovedna_game_collectors_ColliderCollector.__interfaces__ = [lovedna_game_collectors_ComponentCollector];
lovedna_game_collectors_ColliderCollector.prototype = {
	exist: function(v) {
		return Std["is"](v,lovedna_game_components_Collider);
	}
	,add: function(v) {
		if(this._map.exists(v.instanceID)) {
			return;
		}
		this._map.set(v.instanceID,this._list.length);
		this._list.push(v);
		this.count = this._list.length;
	}
	,remove: function(v) {
		if(!this._map.exists(v.instanceID)) {
			return;
		}
		var id = this._map.get(v.instanceID);
		this._list.splice(id,1);
		this._map.remove(v.instanceID);
		var len = this._list.length;
		var _g1 = id;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var r = this._list[i];
			this._map.set(r.instanceID,i);
		}
		this.count = this._list.length;
	}
	,get: function(i) {
		return this._list[i];
	}
	,__class__: lovedna_game_collectors_ColliderCollector
};
var lovedna_game_collectors_LightCollector = function() {
	this._dirty = false;
	this.count = 0;
	this._map = new haxe_ds_IntMap();
	this._list = [];
};
$hxClasses["lovedna.game.collectors.LightCollector"] = lovedna_game_collectors_LightCollector;
lovedna_game_collectors_LightCollector.__name__ = ["lovedna","game","collectors","LightCollector"];
lovedna_game_collectors_LightCollector.__interfaces__ = [lovedna_game_collectors_ComponentCollector];
lovedna_game_collectors_LightCollector.prototype = {
	exist: function(v) {
		return Std["is"](v,lovedna_game_components_Light);
	}
	,add: function(v) {
		if(this._map.exists(v.instanceID)) {
			return;
		}
		this._map.set(v.instanceID,v);
		this._dirty = true;
		this._list.push(v);
		this.count = this._list.length;
	}
	,remove: function(v) {
		if(!this._map.exists(v.instanceID)) {
			return;
		}
		this._map.remove(v.instanceID);
		HxOverrides.remove(this._list,v);
		this.count = this._list.length;
	}
	,get: function(i) {
		var tmp = this._dirty;
		return this._list[i];
	}
	,__class__: lovedna_game_collectors_LightCollector
};
var lovedna_game_collectors_RendererCollector = function() {
	this._list = [];
	this.count = 0;
	this._map = new haxe_ds_IntMap();
};
$hxClasses["lovedna.game.collectors.RendererCollector"] = lovedna_game_collectors_RendererCollector;
lovedna_game_collectors_RendererCollector.__name__ = ["lovedna","game","collectors","RendererCollector"];
lovedna_game_collectors_RendererCollector.__interfaces__ = [lovedna_game_collectors_ComponentCollector];
lovedna_game_collectors_RendererCollector.prototype = {
	exist: function(v) {
		return Std["is"](v,lovedna_game_components_Renderer);
	}
	,add: function(v) {
		if(this._map.exists(v.instanceID)) {
			return;
		}
		this._map.set(v.instanceID,this._list.length);
		this._list.push(v);
		this.count = this._list.length;
	}
	,remove: function(v) {
		if(!this._map.exists(v.instanceID)) {
			return;
		}
		var id = this._map.get(v.instanceID);
		this._list.splice(id,1);
		this._map.remove(v.instanceID);
		var len = this._list.length;
		var _g1 = id;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var r = this._list[i];
			this._map.set(r.instanceID,i);
		}
		this.count = this._list.length;
	}
	,get: function(i) {
		return this._list[i];
	}
	,__class__: lovedna_game_collectors_RendererCollector
};
var lovedna_game_components_AxisLine = function() {
	this.size = 1;
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.AxisLine"] = lovedna_game_components_AxisLine;
lovedna_game_components_AxisLine.__name__ = ["lovedna","game","components","AxisLine"];
lovedna_game_components_AxisLine.__super__ = lovedna_game_components_Component;
lovedna_game_components_AxisLine.prototype = $extend(lovedna_game_components_Component.prototype,{
	onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this.size = 1000;
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		var mr = this.actor.addComponent(lovedna_game_components_MeshRenderer);
		mr.get_material().renderQueue = 30000;
		mr.get_material().state.depthTest = false;
		mr.cameraCull = false;
		mr.get_material().state.drawMode = 1;
		var geom = new lovedna_game_geometry_GeomAxisLine();
		geom.size = this.size;
		mr.mesh = new lovedna_game_Mesh().fromGeometry(geom.build());
	}
	,__class__: lovedna_game_components_AxisLine
});
var lovedna_game_components_Collider = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.Collider"] = lovedna_game_components_Collider;
lovedna_game_components_Collider.__name__ = ["lovedna","game","components","Collider"];
lovedna_game_components_Collider.__super__ = lovedna_game_components_Component;
lovedna_game_components_Collider.prototype = $extend(lovedna_game_components_Component.prototype,{
	raycast: function(ray,maxDistance) {
		return null;
	}
	,onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this._transformFrame = -1;
		this.enabled = true;
	}
	,get_bounds: function() {
		return null;
	}
	,__class__: lovedna_game_components_Collider
	,__properties__: {get_bounds:"get_bounds"}
});
var lovedna_game_components_BoxCollider = function() {
	lovedna_game_components_Collider.call(this);
};
$hxClasses["lovedna.game.components.BoxCollider"] = lovedna_game_components_BoxCollider;
lovedna_game_components_BoxCollider.__name__ = ["lovedna","game","components","BoxCollider"];
lovedna_game_components_BoxCollider.__super__ = lovedna_game_components_Collider;
lovedna_game_components_BoxCollider.prototype = $extend(lovedna_game_components_Collider.prototype,{
	raycast: function(ray,maxDistance) {
		var b = this.get_bounds();
		var v = ray.intersectSphere(b.sphere);
		if(v == null) {
			return null;
		}
		v = ray.intersectBox(b.box);
		if(v == null) {
			return null;
		}
		if(v.distanceSquared(ray.start) > maxDistance) {
			return null;
		}
		var hit = new lovedna_game_RaycastHit();
		hit.point = v;
		return hit;
	}
	,onAwake: function() {
		lovedna_game_components_Collider.prototype.onAwake.call(this);
		this.center = new lovedna_math_Vector3();
		this.size = new lovedna_math_Vector3(1,1,1);
		this._bounds = new lovedna_game_geometry_Bounds();
	}
	,get_bounds: function() {
		if(this._transformFrame != this.actor.frame) {
			this._transformFrame = this.actor.frame;
			this._bounds.reset();
			var s = lovedna_math_Vector3.get_temp().copy(this.size);
			s.scale(0.5);
			this._bounds.expand(s.add(this.center));
			s.copy(this.size).scale(-0.5);
			this._bounds.expand(s.add(this.center));
			this._bounds.multiplyMatrix44(this.actor.get_transform().getLocalToWorld());
		}
		return this._bounds;
	}
	,__class__: lovedna_game_components_BoxCollider
});
var lovedna_game_components_Camera = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.Camera"] = lovedna_game_components_Camera;
lovedna_game_components_Camera.__name__ = ["lovedna","game","components","Camera"];
lovedna_game_components_Camera.__super__ = lovedna_game_components_Component;
lovedna_game_components_Camera.prototype = $extend(lovedna_game_components_Component.prototype,{
	viewportToScreenPoint: function(v) {
		var px = lovedna_utils_Helper.lerpTo(-1,1,0,1,v.x);
		var py = lovedna_utils_Helper.lerpTo(1,-1,0,1,v.y);
		return lovedna_math_Vector3.get_temp().set(px,py,v.z);
	}
	,screenToViewportPoint: function(v) {
		var px = lovedna_utils_Helper.lerpTo(0,1,-1,1,v.x);
		var py = lovedna_utils_Helper.lerpTo(0,1,1,-1,v.y);
		return lovedna_math_Vector3.get_temp().set(px,py,v.z);
	}
	,viewportToWorldPoint: function(v) {
		var p1 = lovedna_math_Vector3.get_temp().set(v.x,v.y,-1);
		var p2 = lovedna_math_Vector3.get_temp().copy(p1);
		p2.z = 1;
		this.projectionViewInverseMatrix.transformVector(p1,true);
		this.projectionViewInverseMatrix.transformVector(p2,true);
		return p2.sub(p1).scale(lovedna_utils_Helper.lerpTo(-1,1,0,1,v.z)).add(p1);
	}
	,worldToViewport: function(v) {
		var p1 = lovedna_math_Vector3.get_temp().copy(v);
		this.projectionViewMatrix.transformVector(p1,true);
		return p1;
	}
	,worldToScreenPoint: function(v) {
		var p1 = lovedna_math_Vector3.get_temp().copy(v);
		this.projectionViewMatrix.transformVector(p1,true);
		return this.viewportToScreenPoint(p1);
	}
	,screenToWorldPoint: function(v) {
		return this.viewportToWorldPoint(this.screenToViewportPoint(v));
	}
	,viewportPointToRay: function(v) {
		var p1 = lovedna_math_Vector3.get_temp().set(v.x,v.y,-1);
		var p2 = lovedna_math_Vector3.get_temp().copy(p1);
		p2.z = 1;
		this.projectionViewInverseMatrix.transformVector(p1,true);
		this.projectionViewInverseMatrix.transformVector(p2,true);
		return lovedna_geom_Ray.get_temp().set(p1,p2);
	}
	,ScreenPointToRay: function(v) {
		return this.viewportPointToRay(this.screenToViewportPoint(v));
	}
	,onConstruct: function() {
		lovedna_game_components_Component.prototype.onConstruct.call(this);
		this.clearFlags = new lovedna_game_CameraClearFlags();
		this.cullingMask = new lovedna_game_LayerMask();
		this.orthographic = false;
		this.orthographicScale = 1;
		this.depth = 0;
		this.render = true;
		this.viewMatrix = this.worldToCameraMatrix = new lovedna_math_Matrix44();
		this.viewInverseMatrix = this.cameraToWorldMatrix = new lovedna_math_Matrix44();
		this.projectionMatrix = new lovedna_math_Matrix44();
		this.projectionViewMatrix = new lovedna_math_Matrix44();
		this.projectionViewInverseMatrix = new lovedna_math_Matrix44();
		this.nearClipPlane = 0.1;
		this.farClipPlane = 2000;
		this.fieldOfView = 60;
		this._projectionParams = new lovedna_math_Vector4(this.nearClipPlane,this.farClipPlane,this.fieldOfView,0);
		this.frustum = new lovedna_geom_Frustum();
		this._orthographicParams = new lovedna_math_Vector4();
		this._transformFrame = 0;
		this._eye = new lovedna_math_Vector3();
		this.uniforms = new lovedna_game_ShaderUniform();
		this.uniforms.setMatrix44(lovedna_game_DefineName.P.name,this.projectionMatrix);
		this.uniforms.setMatrix44(lovedna_game_DefineName.V.name,this.viewMatrix);
		this.uniforms.setMatrix44(lovedna_game_DefineName.IV.name,this.viewInverseMatrix);
		this.uniforms.setMatrix44(lovedna_game_DefineName.VP.name,this.projectionViewMatrix);
		this.uniforms.setMatrix44(lovedna_game_DefineName.IVP.name,this.projectionViewInverseMatrix);
		this.uniforms.setMatrix44(lovedna_game_DefineName.IVP.name,this.projectionViewInverseMatrix);
		this.uniforms.setFloat4(lovedna_game_DefineName.PROJECTION_PARAMS.name,this._projectionParams);
		this.uniforms.setFloat4(lovedna_game_DefineName.ORTHOGRAPHIC_PARAMS.name,this._orthographicParams);
		this.uniforms.setFloat3(lovedna_game_DefineName.EYE.name,this._eye);
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this._orthographicParams.x = this.actor.world.width;
		this._orthographicParams.y = this.actor.world.height;
		this._aspect = this._orthographicParams.x / this._orthographicParams.y;
		this.bindEvent(lovedna_game_events_ActorEvent.onScreenResize,$bind(this,this.screenResize));
		this.bindEvent(lovedna_game_events_ActorEvent.onTransformComplete,$bind(this,this.transformComplete));
		this.data = new lovedna_game_render_CameraRenderData(this);
	}
	,screenResize: function(e) {
		this._orthographicParams.x = this.actor.world.width;
		this._orthographicParams.y = this.actor.world.height;
		this._aspect = this._orthographicParams.x / this._orthographicParams.y;
	}
	,transformComplete: function(e) {
		this.updateCamera();
	}
	,updateCamera: function() {
		var dirty = false;
		if(this._projectionParams.x != this.nearClipPlane || this._projectionParams.y != this.farClipPlane || this._projectionParams.z != this.fieldOfView || this._projectionParams.w != this._aspect || this._orthographicParams.z != (this.orthographic ? 1 : 0) || this._orthographicParams.w != this.orthographicScale) {
			this._projectionParams.set(this.nearClipPlane,this.farClipPlane,this.fieldOfView,this._aspect);
			this._orthographicParams.z = this.orthographic ? 1 : 0;
			this._orthographicParams.w = this.orthographicScale;
			if(this.orthographic) {
				var w = this._orthographicParams.x;
				var h = this._orthographicParams.y;
				this.projectionMatrix.setOrtho(-w * this.orthographicScale,w * this.orthographicScale,-h * this.orthographicScale,h * this.orthographicScale,this.nearClipPlane,this.farClipPlane);
			} else {
				this.projectionMatrix.setProjection(this.nearClipPlane,this.farClipPlane,this.fieldOfView,this._aspect);
			}
			dirty = true;
		}
		if(this.actor.frame != this._transformFrame) {
			this._transformFrame = this.actor.frame;
			this._eye.copy(this.actor.get_transform().get_worldPosition());
			var p2 = this.actor.get_transform().get_worldRotation().rotate(lovedna_math_Vector3.get_forward());
			p2.scale(this.farClipPlane - this.nearClipPlane).add(this._eye);
			this.viewMatrix.lookAt(this._eye,p2,this.actor.get_transform().get_worldRotation().rotate(lovedna_math_Vector3.get_up()));
			dirty = true;
		}
		if(!dirty) {
			return;
		}
		this.projectionViewMatrix.copy(this.projectionMatrix);
		this.projectionViewMatrix.append(this.viewMatrix);
		this.viewInverseMatrix.copy(this.viewMatrix);
		this.viewInverseMatrix.inverse();
		this.frustum.multiplyMatrix44(this.projectionViewMatrix);
		this.projectionViewInverseMatrix.copy(this.projectionViewMatrix);
		this.projectionViewInverseMatrix.inverse();
		this.actor.dispatchEvent(lovedna_game_events_ActorEvent.onCameraUpdate);
	}
	,__class__: lovedna_game_components_Camera
});
var lovedna_game_components_CameraControl = function() {
	this.maxy = 89.9;
	this.miny = -89.9;
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.CameraControl"] = lovedna_game_components_CameraControl;
lovedna_game_components_CameraControl.__name__ = ["lovedna","game","components","CameraControl"];
lovedna_game_components_CameraControl.__super__ = lovedna_game_components_Component;
lovedna_game_components_CameraControl.prototype = $extend(lovedna_game_components_Component.prototype,{
	onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this.target = new lovedna_math_Vector3();
		this._rotationStart = new lovedna_math_Vector2();
		this._rotationEnd = new lovedna_math_Vector2();
		this._rotationDelta = new lovedna_math_Vector2();
		this._rotation = new lovedna_math_Quaternion();
		this.rotationSpeed = 0.5;
		this.distance = 100;
		this.miny = -89.9;
		this.maxy = 89.9;
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this._camera = this.actor.getComponent(lovedna_game_components_Camera);
		if(this._camera == null) {
			return;
		}
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onUpdate));
	}
	,onUpdate: function(e) {
		if(lovedna_game_GameInput.touchCount == 1) {
			var touch = lovedna_game_GameInput.getTouch(0);
			if(lovedna_game_GameInput.touchDown(0)) {
				this._rotationStart.copy(touch.position);
			}
			this._rotationEnd.copy(touch.position);
			this._rotationDelta.sub(this._rotationEnd,this._rotationStart);
			this._rotationStart.copy(this._rotationEnd);
			if(this._rotationDelta.isZero()) {
				return;
			}
			this._rotationDelta.scale(180 * this.rotationSpeed);
			this._rotation.setEulerAngles(this._rotationDelta.y,-this._rotationDelta.x,0);
			var v = this.actor.get_transform().rotation.getEulerAngles().add(lovedna_math_Vector3.instance.set(this._rotationDelta.y,-this._rotationDelta.x,0));
			if(v.x > this.maxy) {
				v.x = this.maxy;
			}
			if(v.x < this.miny) {
				v.x = this.miny;
			}
			this.actor.get_transform().rotation.setEulerAngles(v.x,v.y,v.z);
			this.actor.get_transform().position.copy(this.actor.get_transform().rotation.rotate(lovedna_math_Vector3.get_forward()).scale(-this.distance).add(this.target));
		}
	}
	,__class__: lovedna_game_components_CameraControl
});
var lovedna_game_components_UI = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.UI"] = lovedna_game_components_UI;
lovedna_game_components_UI.__name__ = ["lovedna","game","components","UI"];
lovedna_game_components_UI.__super__ = lovedna_game_components_Component;
lovedna_game_components_UI.prototype = $extend(lovedna_game_components_Component.prototype,{
	onConstruct: function() {
		lovedna_game_components_Component.prototype.onConstruct.call(this);
	}
	,onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		var trans = this.actor.getComponent(lovedna_game_components_Transform);
		if(trans != null) {
			this.actor.removeComponent(lovedna_game_components_Transform);
			this.transform = this.actor.addComponent(lovedna_game_components_RectTransform);
			this.transform.position.copy(trans.position);
			this.transform.scale.copy(trans.scale);
			this.transform.rotation.copy(trans.rotation);
		} else {
			this.transform = this.actor.addComponent(lovedna_game_components_RectTransform);
		}
	}
	,__class__: lovedna_game_components_UI
});
var lovedna_game_components_Canvas = function() {
	lovedna_game_components_UI.call(this);
};
$hxClasses["lovedna.game.components.Canvas"] = lovedna_game_components_Canvas;
lovedna_game_components_Canvas.__name__ = ["lovedna","game","components","Canvas"];
lovedna_game_components_Canvas.__super__ = lovedna_game_components_UI;
lovedna_game_components_Canvas.prototype = $extend(lovedna_game_components_UI.prototype,{
	onAwake: function() {
		lovedna_game_components_UI.prototype.onAwake.call(this);
		this.width = 800;
		this.height = 480;
		this.scaleMode = 1;
		this.bindEvent(lovedna_game_events_ActorEvent.onAdded,$bind(this,this.onScreenResize));
	}
	,onStart: function() {
		lovedna_game_components_UI.prototype.onStart.call(this);
		this.bindEvent(lovedna_game_events_ActorEvent.onScreenResize,$bind(this,this.onScreenResize));
		this.bindEvent(lovedna_game_events_ActorEvent.onTransform,$bind(this,this.onTransform));
	}
	,onScreenResize: function(e) {
		if(this.scaleMode == 0) {
			this.transform.width = lovedna_game_Screen.width;
			this.transform.height = lovedna_game_Screen.height;
			this.transform.scale.set(1,1,1);
		} else if(this.scaleMode == 1) {
			var p = this.width / this.height;
			var sp = lovedna_game_Screen.width / lovedna_game_Screen.height;
			if(p > sp) {
				p = lovedna_game_Screen.width / this.width;
			} else {
				p = lovedna_game_Screen.height / this.height;
			}
			this.transform.scale.set(p,p,p);
			this.transform.width = this.width;
			this.transform.height = this.height;
		}
	}
	,onTransform: function(e) {
	}
	,__class__: lovedna_game_components_Canvas
});
var lovedna_game_components_G3D = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.G3D"] = lovedna_game_components_G3D;
lovedna_game_components_G3D.__name__ = ["lovedna","game","components","G3D"];
lovedna_game_components_G3D.__super__ = lovedna_game_components_Component;
lovedna_game_components_G3D.prototype = $extend(lovedna_game_components_Component.prototype,{
	onDestroy: function() {
		lovedna_game_components_Component.prototype.onDestroy.call(this);
		this.clear();
		this.set_resource(null);
		this.jointMap = null;
		if(this._skinMeshRenderers != null) {
			this._skinMeshRenderers.dispose();
			this._skinMeshRenderers = null;
		}
		if(this._bones != null) {
			this._bones.dispose();
			this._bones = null;
		}
		if(this._renderers != null) {
			this._renderers.dispose();
			this._renderers = null;
		}
	}
	,getRenderer: function(index) {
		return this._renderers.getElement(index);
	}
	,getVisible: function() {
		var len = this._renderers.get_length();
		while(len-- > 0) if(this._renderers.getElement(len).actor.visible) {
			return true;
		}
		return false;
	}
	,onConstruct: function() {
		lovedna_game_components_Component.prototype.onConstruct.call(this);
		this._init = false;
		this.jointMap = new haxe_ds_StringMap();
		this._skinMeshRenderers = new lovedna_ds_FastArray();
		this._renderers = new lovedna_ds_FastArray();
		this._bones = new lovedna_ds_FastArray();
		this.useRoot = false;
	}
	,clear: function() {
		var n = this.jointMap.keys();
		while(n.hasNext()) {
			var n1 = n.next();
			var j = this.jointMap.get(n1);
			j.actor.get_transform().removeFromParent();
			j.clear();
			this.jointMap.remove(n1);
		}
		this._init = false;
		this._renderers.clear();
		this._skinMeshRenderers.clear();
		this._bones.clear();
		this.rendererCount = 0;
	}
	,srcLoaded: function(e) {
		if(this.resource == null) {
			return;
		}
		if(!this.resource.enabled) {
			return;
		}
		this.clear();
		this.resource.removeEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.srcLoaded));
		var nodes = this.resource.modelData.nodes;
		var len = nodes.length;
		haxe_Log.trace(this.resource.get_file().path,{ fileName : "G3D.hx", lineNumber : 123, className : "lovedna.game.components.G3D", methodName : "srcLoaded"});
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.parseNode(nodes[i],null);
		}
		this.rendererCount = this._renderers.get_length();
		len = this._skinMeshRenderers.get_length();
		if(len > 0) {
			var _g11 = 0;
			var _g2 = len;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var mr = this._skinMeshRenderers.getElement(i1);
				var bones = mr.bones;
				var part = this._bones.getElement(i1);
				if(part != null) {
					if(part.bones != null && part.bones.length > 0) {
						var c = part.bones.length;
						var _g3 = 0;
						var _g21 = c;
						while(_g3 < _g21) {
							var j = _g3++;
							var name = part.bones[j];
							var joint = this.jointMap.get(name);
							if(joint == null) {
								bones.push(null);
							} else {
								bones.push(joint.animation);
							}
						}
					}
				}
				mr.set_bones(bones);
			}
			var ani = this.actor.getComponent(lovedna_game_components_G3DAnimator);
			if(ani == null) {
				ani = this.actor.addComponent(lovedna_game_components_G3DAnimator);
			}
			if(ani.resource == null) {
				ani.set_resource(this.resource);
			} else {
				ani.setJointMap(this.jointMap);
			}
		}
		this._init = true;
		this.dispatchEvent(lovedna_events_Event.complete);
	}
	,parseNode: function(node,parent) {
		if(node.parts != null) {
			var len = node.parts.length;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var part = node.parts[i];
				var modelMesh = this.resource.modelData.getMeshByPartId(part.meshPartId);
				var meshpart = modelMesh.getPart(part.meshPartId);
				var obj = null;
				if(this.resource.modelData.partCount == 1 && !this.useRoot) {
					obj = this.actor;
				} else {
					obj = new lovedna_game_Actor();
				}
				if(part.bones != null) {
					var skin = obj.addComponent(lovedna_game_components_SkinnedMeshRenderer);
					this._skinMeshRenderers.push(skin);
					this._bones.push(part);
				} else if(obj.getComponent(lovedna_game_components_MeshRenderer) == null) {
					obj.addComponent(lovedna_game_components_MeshRenderer);
				}
				obj.name = node.id;
				if(parent != null) {
					parent.actor.get_transform().addChild(obj.get_transform());
				} else {
					this.actor.get_transform().addChild(obj.get_transform());
				}
				obj.get_transform().position.copy(node.translation);
				obj.get_transform().rotation.copy(node.rotation);
				obj.get_transform().scale.copy(node.scale);
				var mr = obj.getComponent(lovedna_game_components_MeshRenderer);
				this._renderers.push(mr);
				mr.mesh = new lovedna_game_Mesh().fromGeometry(this.resource.modelData.getMeshByPartId(part.meshPartId).geom);
				mr.get_material().subMesh = meshpart.subMeshId;
				var mat = this.resource.modelData.getMaterial(part.materialId);
				if(mat != null) {
					var t = mat.getTexture();
					if(t != null) {
						var path = t.fileName;
						var p = lovedna_net_Path.Combine(new lovedna_net_Path(this.resource.get_file().path).getDir(),path);
						mr.get_material().uniforms.setTexture(lovedna_resource_Assets.texture.get(p).texture);
						mr.get_material().define.define(lovedna_game_DefineName.TEX.name);
					}
				}
			}
		} else {
			var id = node.id;
			var obj1 = new lovedna_game_Actor();
			obj1.name = id;
			var joint = obj1.addComponent(lovedna_game_components_Joint);
			this.jointMap.set(id,joint);
			var bone = this.resource.modelData.getBone(id);
			if(bone != null) {
				joint.worldToLocal = new lovedna_math_Matrix44().setTRS(bone.translation,bone.rotation,bone.scale).inverse();
			}
			if(parent == null) {
				this.actor.get_transform().addChild(obj1.get_transform());
			} else {
				parent.actor.get_transform().addChild(obj1.get_transform());
			}
			joint.updateLocal(node.translation,node.rotation,node.scale);
			if(node.children != null) {
				var _g2 = 0;
				var _g11 = node.children;
				while(_g2 < _g11.length) {
					var n = _g11[_g2];
					++_g2;
					this.parseNode(n,joint);
				}
			}
		}
	}
	,set_resource: function(v) {
		if(this.resource == v) {
			return v;
		}
		if(this.resource != null) {
			haxe_Log.trace("resource  " + Std.string(this.resource.enabled),{ fileName : "G3D.hx", lineNumber : 278, className : "lovedna.game.components.G3D", methodName : "set_resource"});
			if(!this.resource.enabled) {
				this.resource.removeEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.srcLoaded));
			}
		}
		this._init = false;
		this.resource = v;
		if(this.resource.enabled) {
			this.srcLoaded();
		} else {
			this.resource.addEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.srcLoaded));
		}
		return this.resource;
	}
	,__class__: lovedna_game_components_G3D
	,__properties__: {set_resource:"set_resource"}
});
var lovedna_game_components_G3DAnimator = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.G3DAnimator"] = lovedna_game_components_G3DAnimator;
lovedna_game_components_G3DAnimator.__name__ = ["lovedna","game","components","G3DAnimator"];
lovedna_game_components_G3DAnimator.__super__ = lovedna_game_components_Component;
lovedna_game_components_G3DAnimator.prototype = $extend(lovedna_game_components_Component.prototype,{
	Play: function(action,flash) {
		if(flash == null) {
			flash = false;
		}
		this.action = action;
		if(!this.enabled) {
			return;
		}
		if(!this._clips.exists(action)) {
			return;
		}
		this._animation = this._clips.get(action);
		this._totalTime = this._animation.totalTime;
		this._time.set(0,0);
		this._preTime.set(0,0);
		var tmp = !flash;
	}
	,onConstruct: function() {
		lovedna_game_components_Component.prototype.onConstruct.call(this);
		this.enabled = false;
		this.update = false;
		this._totalTime = 0;
		this._loop = -1;
		this._time = new lovedna_math_Vector2();
		this._preTime = new lovedna_math_Vector2();
		this._t = new lovedna_math_Vector3();
		this._r = new lovedna_math_Quaternion();
		this._s = new lovedna_math_Vector3();
		this.playing = true;
		this.updateTime = 0;
		this._lastTime = 0;
		this._processId = -1;
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this.bindEvent(lovedna_game_events_ActorEvent.onUpdate,$bind(this,this.onUpdate));
	}
	,onUpdate: function(e) {
		this.updateAnimation();
	}
	,updateAnimation: function() {
		if(!this.playing) {
			return;
		}
		if(!this.enabled) {
			return;
		}
		if(this._totalTime == 0) {
			return;
		}
		if(this._loop == 0) {
			return;
		}
		if(this._animation == null) {
			return;
		}
		this._time.x += this.actor.deltaTime;
		this._time.y = this._time.x % this._totalTime;
		if(this._time.y < 0) {
			this._time.y += this._totalTime;
		}
		var inc = 0;
		var started = false;
		if(this._preTime.x != 0) {
			inc = this._time.x - this._preTime.x;
		} else {
			started = true;
		}
		this._preTime.x = this._time.x;
		if(inc > 0 && this._time.y < this._preTime.y) {
			if(this._loop > 0) {
				this._loop--;
			}
			started = true;
		} else if(inc < 0 && this._time.y > this._preTime.y) {
			if(this._loop > 0) {
				this._loop--;
			}
			started = true;
		}
		if(this._loop == 0) {
			return;
		}
		var started1 = started;
		if(!this.playing) {
			return;
		}
		if(!this.enabled) {
			return;
		}
		if(this._loop == 0) {
			return;
		}
		if(this._totalTime == 0) {
			return;
		}
		if(lovedna_utils_Helper.abs(this._lastTime - this._time.x) < this.updateTime) {
			return;
		}
		if(this._g3d != null) {
			if(!this._g3d.getVisible()) {
				return;
			}
		}
		this._lastTime = this._time.x;
		this._preTime.y = this._time.y;
		var alpha = this._time.y;
		this._processId++;
		var tmp = this._processId % 7 != 0;
		var len = this._animation.nodeAnimations.length;
		var count = 0;
		while(len-- > 0) {
			var node = this._animation.nodeAnimations[len];
			var nodeid = node.nodeId;
			var obj = this._jointMap.get(nodeid);
			if(obj == null) {
				continue;
			}
			this.currentTranslation = node.getTranslation(alpha);
			this.currentRotation = node.getRotation(alpha);
			this.currentScale = node.getScaling(alpha);
			if(this.currentTranslation != null) {
				this._t.copy(this.currentTranslation);
				this.currentTranslation = this._t;
			}
			if(this.currentRotation != null) {
				this._r.copy(this.currentRotation);
				this.currentRotation = this._r;
			}
			if(this.currentScale != null) {
				this._s.copy(this.currentScale);
				this.currentScale = this._s;
			}
			obj.updateLocal(this.currentTranslation,this.currentRotation,this.currentScale);
			++count;
		}
		if(count < 1) {
			return;
		}
	}
	,animationResourceLoaded: function(e) {
		this.enabled = false;
		this.dirtyTime = lovedna_Time.get_now();
		if(this.resource.modelData.animations == null) {
			return;
		}
		var len = this.resource.modelData.animations.length;
		if(len < 1) {
			return;
		}
		this._clips = new haxe_ds_StringMap();
		while(len-- > 0) {
			var ani = this.resource.modelData.animations[len];
			this._clips.set(ani.id,ani);
			if(this.action == null) {
				this.action = ani.id;
			}
		}
		if(this.action == null) {
			return;
		}
		this._animation = this._clips.get(this.action);
		if(this._animation == null) {
			return;
		}
		var g3d = this.actor.getComponent(lovedna_game_components_G3D);
		if(g3d != null) {
			this.setJointMap(g3d.jointMap);
		}
		this._g3d = g3d;
		this.enabled = true;
		this._totalTime = this._animation.totalTime;
		this._time.set(0,0);
		this._preTime.set(0,0);
		this._lastTime = 0;
		this.updateAnimation();
	}
	,setJointMap: function(v) {
		this._jointMap = v;
	}
	,set_resource: function(v) {
		if(this.resource == v) {
			return v;
		}
		if(this.resource != null) {
			if(!this.resource.enabled) {
				this.resource.removeEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.animationResourceLoaded));
			}
		}
		this.resource = v;
		if(this.resource.enabled) {
			this.animationResourceLoaded();
		} else {
			this.resource.addEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.animationResourceLoaded));
		}
		return this.resource;
	}
	,__class__: lovedna_game_components_G3DAnimator
	,__properties__: {set_resource:"set_resource"}
});
var lovedna_game_components_Image = function() {
	lovedna_game_components_UI.call(this);
};
$hxClasses["lovedna.game.components.Image"] = lovedna_game_components_Image;
lovedna_game_components_Image.__name__ = ["lovedna","game","components","Image"];
lovedna_game_components_Image.__super__ = lovedna_game_components_UI;
lovedna_game_components_Image.prototype = $extend(lovedna_game_components_UI.prototype,{
	load: function(url) {
		if(this.sprite != null && !this.sprite.enabled) {
			this.sprite.removeEventListener(lovedna_events_Event.init.get_type(),$bind(this,this.onSpriteInit));
		}
		this.sprite = lovedna_resource_Assets.sprite.get(url);
		if(this.sprite.enabled) {
			this.onSpriteInit();
		} else {
			this.sprite.addEventListener(lovedna_events_Event.init.get_type(),$bind(this,this.onSpriteInit));
		}
	}
	,onAwake: function() {
		lovedna_game_components_UI.prototype.onAwake.call(this);
		this.material = new lovedna_game_Material();
		this.material.state.depthTest = false;
		this.material.state.depthWrite = false;
		this.material.state.cullMode = -1;
		this.material.renderQueue = 40000;
		this.geometry = new lovedna_format_mesh_Geometry();
	}
	,onStart: function() {
		lovedna_game_components_UI.prototype.onStart.call(this);
		this.bindEvent(lovedna_game_events_ActorEvent.onRectTransform,$bind(this,this.onRectTransform));
	}
	,onDestroy: function() {
		lovedna_game_components_UI.prototype.onDestroy.call(this);
		lovedna_game_Mesh.deleteGeometryBuffer(this.geometry.id);
	}
	,onSpriteInit: function(e) {
		this.sprite.removeEventListener(lovedna_events_Event.init.get_type(),$bind(this,this.onSpriteInit));
		if(!this.sprite.enabled) {
			return;
		}
		this.material.setTexture(this.sprite.texture.texture);
		if(this.transform.width < 1) {
			this.transform.width = this.sprite.data.frame.z;
		}
		if(this.transform.height < 1) {
			this.transform.height = this.sprite.data.frame.w;
		}
		this.onRectTransform();
	}
	,onRectTransform: function(e) {
		this.draw();
	}
	,draw: function() {
		if(!this.sprite.enabled) {
			return;
		}
		this.simpleFill();
		this.dispatchEvent(lovedna_events_Event.init);
	}
	,simpleFill: function() {
		var w = this.transform.width;
		var h = this.transform.height;
		var sx = w / this.sprite.data.sourceSize.x;
		var sy = h / this.sprite.data.sourceSize.y;
		var offsetx = this.sprite.data.offset.x;
		var offsety = this.sprite.data.sourceSize.y - this.sprite.data.offset.y - this.sprite.data.frame.get_height();
		offsetx *= sx;
		offsety *= sy;
		offsetx -= this.transform.pivot.x * w;
		offsety -= this.transform.pivot.y * h;
		w = this.sprite.data.frame.get_width() * sx;
		h = this.sprite.data.frame.get_height() * sy;
		var tmp = new lovedna_math_Vector3(offsetx,offsety,0);
		var tmp1 = new lovedna_math_Vector3(w + offsetx,offsety,0);
		var tmp2 = new lovedna_math_Vector3(w + offsetx,h + offsety,0);
		this.geometry.position = [tmp,tmp1,tmp2,new lovedna_math_Vector3(offsetx,h + offsety,0)];
		var tmp3 = this.sprite.getUV(0,1).clone();
		var tmp4 = this.sprite.getUV(1,1).clone();
		var tmp5 = this.sprite.getUV(1,0).clone();
		var tmp6 = this.sprite.getUV(0,0).clone();
		this.geometry.uv = [tmp3,tmp4,tmp5,tmp6];
		var tmp7 = new lovedna_math_Vector4(1,1,1,1).mul(this.material.color);
		var tmp8 = new lovedna_math_Vector4(1,1,1,1).mul(this.material.color);
		var tmp9 = new lovedna_math_Vector4(1,1,1,1).mul(this.material.color);
		var tmp10 = new lovedna_math_Vector4(1,1,1,1).mul(this.material.color);
		this.geometry.color = [tmp7,tmp8,tmp9,tmp10];
		this.geometry.clearGroup();
		this.geometry.addGroup([0,1,2,0,2,3]);
		lovedna_game_components_Image.mesh.fromGeometry(this.geometry);
	}
	,__class__: lovedna_game_components_Image
});
var lovedna_game_components_Joint = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.Joint"] = lovedna_game_components_Joint;
lovedna_game_components_Joint.__name__ = ["lovedna","game","components","Joint"];
lovedna_game_components_Joint.__super__ = lovedna_game_components_Component;
lovedna_game_components_Joint.prototype = $extend(lovedna_game_components_Component.prototype,{
	updateLocal: function(position,rotation,scale) {
		this.actor.get_transform().position.copy(position);
		this.actor.get_transform().rotation.copy(rotation);
		this.actor.get_transform().scale.copy(scale);
	}
	,updateWorld: function() {
		if(this.worldToLocal != null) {
			this.animation.copy(this.actor.get_transform().getLocalToWorld()).append(this.worldToLocal);
		}
	}
	,clear: function() {
		this.animation = null;
		this.worldToLocal = null;
	}
	,onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this.animation = new lovedna_math_Matrix44();
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this.bindEvent(lovedna_game_events_ActorEvent.onTransform,$bind(this,this.onTrasform));
	}
	,onTrasform: function(e) {
		this.updateWorld();
	}
	,__class__: lovedna_game_components_Joint
});
var lovedna_game_components_Light = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.Light"] = lovedna_game_components_Light;
lovedna_game_components_Light.__name__ = ["lovedna","game","components","Light"];
lovedna_game_components_Light.__super__ = lovedna_game_components_Component;
lovedna_game_components_Light.prototype = $extend(lovedna_game_components_Component.prototype,{
	onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this.position = new lovedna_math_Vector3();
		this.ambient = new lovedna_math_Vector4(0,0,0,1);
		this.diffuse = new lovedna_math_Vector4(1,1,1,1);
		this.specular = new lovedna_math_Vector4(0,0,0,10);
		this.uniforms = new lovedna_game_ShaderUniform();
		this.uniforms.setFloat3(lovedna_game_DefineName.LIGHT_POSITION.name,this.position);
		this.uniforms.setFloat4(lovedna_game_DefineName.LIGHT_AMBIENT.name,this.ambient);
		this.uniforms.setFloat4(lovedna_game_DefineName.LIGHT_DIFFUSE.name,this.diffuse);
		this.uniforms.setFloat4(lovedna_game_DefineName.LIGHT_SPECULAR.name,this.specular);
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this.onTransform();
		this.bindEvent(lovedna_game_events_ActorEvent.onTransform,$bind(this,this.onTransform));
	}
	,onTransform: function(e) {
		var pos = this.actor.get_transform().get_worldRotation().rotate(lovedna_math_Vector3.get_backward()).normalize();
		this.position.copy(pos);
	}
	,__class__: lovedna_game_components_Light
});
var lovedna_game_components_Renderer = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.Renderer"] = lovedna_game_components_Renderer;
lovedna_game_components_Renderer.__name__ = ["lovedna","game","components","Renderer"];
lovedna_game_components_Renderer.__super__ = lovedna_game_components_Component;
lovedna_game_components_Renderer.prototype = $extend(lovedna_game_components_Component.prototype,{
	cullWithCamera: function(v) {
		return true;
	}
	,collectRenderBuffer: function(v) {
	}
	,onConstruct: function() {
		lovedna_game_components_Component.prototype.onConstruct.call(this);
		this.visible = true;
		this.materials = [new lovedna_game_Material()];
		this.cameraCull = true;
	}
	,onDestroy: function() {
		lovedna_game_components_Component.prototype.onDestroy.call(this);
		this.materials = null;
	}
	,get_material: function() {
		return this.materials[0];
	}
	,__class__: lovedna_game_components_Renderer
	,__properties__: {get_material:"get_material"}
});
var lovedna_game_components_MeshRenderer = function() {
	lovedna_game_components_Renderer.call(this);
};
$hxClasses["lovedna.game.components.MeshRenderer"] = lovedna_game_components_MeshRenderer;
lovedna_game_components_MeshRenderer.__name__ = ["lovedna","game","components","MeshRenderer"];
lovedna_game_components_MeshRenderer.__super__ = lovedna_game_components_Renderer;
lovedna_game_components_MeshRenderer.prototype = $extend(lovedna_game_components_Renderer.prototype,{
	cullWithCamera: function(v) {
		if(this.mesh == null || this.mesh.buffer == null) {
			return true;
		}
		if(!this.cameraCull) {
			return false;
		}
		var f = v.frustum;
		if(this._meshId != this.mesh.id) {
			this._meshId = this.mesh.id;
			this._transformFrame -= 1;
		}
		if(this.actor.world == null) {
			return true;
		}
		if(this._transformFrame != this.actor.frame) {
			this._transformFrame = this.actor.frame;
			this.bounds.copy(this.mesh.buffer.bounds);
			this.bounds.multiplyMatrix44(this.actor.get_transform().getLocalToWorld());
		}
		if(!f.intersectsSphere(this.bounds.sphere)) {
			return true;
		}
		if(!f.intersectsBox(this.bounds.box)) {
			return true;
		}
		this._distanceToCamera = v.actor.get_transform().get_worldPosition().distanceSquared(this.actor.get_transform().get_worldPosition());
		return false;
	}
	,collectRenderBuffer: function(v) {
		if(this.mesh == null) {
			return;
		}
		if(this.skipFrame > 0) {
			this.skipFrame--;
			return;
		}
		if(!this.mesh.buffer.enabled) {
			return;
		}
		var len = this.materials.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var mat = this.materials[i];
			if(mat == null) {
				continue;
			}
			if(mat.shader == null) {
				continue;
			}
			mat.uniforms.setMatrix44Handler(lovedna_game_DefineName.M.name,($_=this.actor.get_transform(),$bind($_,$_.getLocalToWorld)));
			mat.uniforms.setMatrix44Handler(lovedna_game_DefineName.IM.name,($_=this.actor.get_transform(),$bind($_,$_.getWorldToLocal)));
			var buffer = lovedna_game_render_RenderBuffer.get_temp();
			buffer.clear();
			buffer.name = this.actor.name;
			buffer.renderQueue = mat.renderQueue;
			buffer.shaderId = mat.shader.get_id();
			buffer.renderIndex = this.mesh.id;
			buffer.distance = this._distanceToCamera;
			buffer.setMaterial(mat);
			buffer.setMeshBuffer(this.mesh);
			buffer.draw();
			this.onFillBuffer(mat,buffer);
			v.add(buffer);
		}
	}
	,onConstruct: function() {
		lovedna_game_components_Renderer.prototype.onConstruct.call(this);
		this._meshId = 10000000;
		this.bounds = new lovedna_game_geometry_Bounds();
		this.skipFrame = 0;
	}
	,onAwake: function() {
		this._distanceToCamera = 0;
		this._transformFrame = -1;
	}
	,onDestroy: function() {
		lovedna_game_components_Renderer.prototype.onDestroy.call(this);
		this.mesh = null;
		this.bounds = null;
	}
	,onFillBuffer: function(material,buffer) {
	}
	,__class__: lovedna_game_components_MeshRenderer
});
var lovedna_game_components_Transform = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.Transform"] = lovedna_game_components_Transform;
lovedna_game_components_Transform.__name__ = ["lovedna","game","components","Transform"];
lovedna_game_components_Transform.__super__ = lovedna_game_components_Component;
lovedna_game_components_Transform.prototype = $extend(lovedna_game_components_Component.prototype,{
	transformLocalToWorld: function(v) {
		this.getLocalToWorld().transformVector(v);
	}
	,transformWorldToLocal: function(v) {
		this.getWorldToLocal().transformVector(v);
	}
	,getWorldToLocalMatrix: function(v) {
		var mat = lovedna_math_Matrix44.get_temp();
		mat.copy(this.getWorldToLocal());
		mat.append(v.getLocalToWorld());
		return mat;
	}
	,addChild: function(v,keep) {
		if(keep == null) {
			keep = false;
		}
		this.addChildAt(v,10000000,keep);
	}
	,addChildAt: function(v,index,keep) {
		if(keep == null) {
			keep = false;
		}
		if(v == null || v == this) {
			return;
		}
		if(v.hasChild(this)) {
			return;
		}
		if(v.parent != null) {
			v.parent.removeChild(v);
			if(v.parent == this) {
				keep = false;
			}
		}
		if(this._childs == null) {
			this._childs = new lovedna_ds_FastArray();
		}
		if(index < 0) {
			this._childs.unshift(v);
		} else if(index >= this._childs.get_length()) {
			this._childs.push(v);
		} else {
			this._childs.insert(index,v);
		}
		if(keep) {
			var mat = lovedna_math_Matrix44.get_temp();
			mat.copy(this.getWorldToLocal());
			mat.append(v.getLocalToWorld());
			v.rotation.copy(mat.getRotation());
			v.position.copy(mat.getTranslation());
			v.scale.copy(mat.getScale());
		}
		v.parent = this;
		v.actor.dispatchEvent(lovedna_game_events_ActorEvent.onAdded);
		if(this.actor.world != null) {
			this.actor.world.set_dirty(true);
		}
		this.childCount = this._childs.get_length();
	}
	,removeFromParent: function() {
		if(this.parent == null) {
			return;
		}
		this.parent.removeChild(this);
	}
	,removeChild: function(v) {
		if(v == null || v == this || v.parent != this || this._childs == null) {
			return;
		}
		if(this._childs.remove(v) != -1) {
			this.childCount = this._childs.get_length();
			v.actor.dispatchEvent(lovedna_game_events_ActorEvent.onRemoved);
			if(this.actor.world != null) {
				this.actor.world.set_dirty(true);
			}
		}
	}
	,removeChildAt: function(index) {
		if(this._childs == null) {
			return;
		}
		if(index < 0 || index >= this._childs.get_length()) {
			return;
		}
		var v = this._childs.getElement(index);
		this.childCount = this._childs.get_length();
		this._childs.removeAt(index);
		if(v != null) {
			v.dispatchEvent(lovedna_game_events_ActorEvent.onRemoved);
			if(this.actor.world != null) {
				this.actor.world.set_dirty(true);
			}
		}
	}
	,getChild: function(index,smart) {
		if(smart == null) {
			smart = false;
		}
		if(this._childs == null) {
			return null;
		}
		return this._childs.get(index,smart);
	}
	,findChild: function(path) {
		return null;
	}
	,hasChild: function(v) {
		if(v == null || v == this || v.parent == null) {
			return false;
		}
		var p = v.parent;
		var len = 200;
		while(p != null) {
			if(p == this) {
				return true;
			}
			var np = p.parent;
			if(np == p) {
				return false;
			}
			p = np;
			--len;
			if(len < 1) {
				return false;
			}
		}
		return false;
	}
	,getLocalToWorld: function() {
		if(this._localToWorld == null) {
			if(this.__localToWorld == null) {
				this.__localToWorld = new lovedna_math_Matrix44();
			}
			this._localToWorld = this.__localToWorld;
			this._doUpdateTransform();
		}
		return this._localToWorld;
	}
	,getWorldToLocal: function() {
		if(this._worldToLocal == null) {
			if(this.__worldToLocal == null) {
				this.__worldToLocal = new lovedna_math_Matrix44();
			}
			this._worldToLocal = this.__worldToLocal;
			this._worldToLocal.copy(this.getLocalToWorld());
			this._worldToLocal.inverse();
		}
		return this._worldToLocal;
	}
	,onConstruct: function() {
		lovedna_game_components_Component.prototype.onConstruct.call(this);
		this.position = new lovedna_math_Vector3(0,0,0);
		this.scale = new lovedna_math_Vector3(1,1,1);
		this.rotation = new lovedna_math_Quaternion();
		this._localPosition = new lovedna_math_Vector3(0.1,0.2,0.3);
		this._localScale = new lovedna_math_Vector3(1.1,1.2,1.3);
		this._localRotation = new lovedna_math_Quaternion();
		this.childCount = 0;
	}
	,onDestroy: function() {
		lovedna_game_components_Component.prototype.onDestroy.call(this);
		if(this._childs != null) {
			var len = this._childs.get_length();
			while(len-- > 0) {
				var child = this._childs.getElement(len);
				this.removeChild(child);
				lovedna_game_Actor.destory(child.actor);
			}
		}
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
		this._childs = null;
		this.parent = null;
		this.position = null;
		this.scale = null;
		this.rotation = null;
		this._localPosition = null;
		this._localScale = null;
		this._localRotation = null;
		this.__localToWorld = null;
		this._localToWorld = null;
		this.__worldToLocal = null;
		this._worldToLocal = null;
	}
	,needTransformUpdate: function() {
		if(!this._localPosition.equals(this.position)) {
			return true;
		}
		if(!this._localRotation.equals(this.rotation)) {
			return true;
		}
		if(!this._localScale.equals(this.scale)) {
			return true;
		}
		return false;
	}
	,_updateTransform: function(frame) {
		var needupdate = this.needTransformUpdate();
		if(!needupdate) {
			if(this.parent != null && this.transformFrame < this.parent.transformFrame) {
				needupdate = true;
			}
		}
		if(needupdate) {
			this.transformFrame = frame;
			this.cacheTransform();
			this.actor.dispatchEvent(lovedna_game_events_ActorEvent.onTransform);
		}
		this.actor.dispatchEvent(lovedna_game_events_ActorEvent.onTransformComplete);
	}
	,cacheTransform: function() {
		this._localPosition.copy(this.position);
		this._localScale.copy(this.scale);
		this._localRotation.copy(this.rotation);
		this._localToWorld = null;
		this._position = null;
		this._rotation = null;
		this._scale = null;
		this._worldToLocal = null;
	}
	,_doUpdateTransform: function() {
		if(this.parent == null) {
			this._localToWorld.setTRS(this.position,this.rotation,this.scale);
		} else {
			this._localToWorld.copy(this.parent.getLocalToWorld());
			this._localToWorld.appendTRS(this.position,this.rotation,this.scale);
		}
	}
	,get_worldPosition: function() {
		if(this._position == null) {
			if(this.__position == null) {
				this.__position = new lovedna_math_Vector3();
			}
			this._position = this.__position;
			this.getLocalToWorld().getTranslation(this._position);
		}
		return this._position;
	}
	,get_worldScale: function() {
		if(this._scale == null) {
			if(this.__scale == null) {
				this.__scale = new lovedna_math_Vector3();
			}
			this._scale = this.__scale;
			this.getLocalToWorld().getScale(this._scale);
		}
		return this._position;
	}
	,get_worldRotation: function() {
		if(this._rotation == null) {
			if(this.__rotation == null) {
				this.__rotation = new lovedna_math_Quaternion();
			}
			this._rotation = this.__rotation;
			this.getLocalToWorld().getRotation(this._rotation);
		}
		return this._rotation;
	}
	,__class__: lovedna_game_components_Transform
	,__properties__: {get_worldRotation:"get_worldRotation",get_worldScale:"get_worldScale",get_worldPosition:"get_worldPosition"}
});
var lovedna_game_components_RectTransform = function() {
	lovedna_game_components_Transform.call(this);
};
$hxClasses["lovedna.game.components.RectTransform"] = lovedna_game_components_RectTransform;
lovedna_game_components_RectTransform.__name__ = ["lovedna","game","components","RectTransform"];
lovedna_game_components_RectTransform.__super__ = lovedna_game_components_Transform;
lovedna_game_components_RectTransform.prototype = $extend(lovedna_game_components_Transform.prototype,{
	onAwake: function() {
		lovedna_game_components_Transform.prototype.onAwake.call(this);
		this.anchorX = new lovedna_math_Vector2(0.5,0.5);
		this.anchorY = new lovedna_math_Vector2(0.5,0.5);
		this.width = 0;
		this.height = 0;
		this._size = new lovedna_math_Vector2();
		this._anchorX = new lovedna_math_Vector2(0.5,0.5);
		this._anchorY = new lovedna_math_Vector2(0.5,0.5);
		this.pivot = new lovedna_math_Vector2(0.5,0.5);
		this._pivot = new lovedna_math_Vector2(0.5,0.5);
		this._rectDirty = true;
		this.bindEvent(lovedna_game_events_ActorEvent.onAdded,$bind(this,this.onAdded));
	}
	,needTransformUpdate: function() {
		this._rectDirty = true;
		if(this.width != this._size.x) {
			return true;
		}
		if(this.height != this._size.y) {
			return true;
		}
		if(!this.pivot.equals(this.pivot)) {
			return true;
		}
		if(!this._anchorY.equals(this.anchorY)) {
			return true;
		}
		if(!this._anchorX.equals(this.anchorX)) {
			return true;
		}
		this._rectDirty = false;
		return lovedna_game_components_Transform.prototype.needTransformUpdate.call(this);
	}
	,cacheTransform: function() {
		lovedna_game_components_Transform.prototype.cacheTransform.call(this);
		this._size.set(this.width,this.height);
		this._anchorY.copy(this.anchorY);
		this._anchorX.copy(this.anchorX);
		this._pivot.copy(this.pivot);
		if(this._rectDirty) {
			this._rectDirty = false;
			this.actor.dispatchEvent(lovedna_game_events_ActorEvent.onRectTransform);
		}
	}
	,_doUpdateTransform: function() {
		var p = lovedna_math_Vector3.get_temp().copy(this.position);
		if(this._parent != null) {
			this.anchorX.clamp(0,1);
			this.anchorY.clamp(0,1);
			if(this.anchorX.y > this.anchorX.x) {
				var py = this.anchorX.y - this.anchorX.x;
				var v = this._parent.width * py;
				this.width = v;
				p.x += (this.anchorX.x + py * 0.5 - 0.5) * this._parent.width + (this.pivot.x - 0.5) * this.width;
			} else {
				p.x += (this.anchorX.x - 0.5) * this._parent.width;
			}
			if(this.anchorY.y > this.anchorY.x) {
				var py1 = this.anchorY.y - this.anchorY.x;
				var v1 = this._parent.height * py1;
				this.height = v1;
				p.y += (this.anchorY.x + py1 * 0.5 - 0.5) * this._parent.height + (this.pivot.y - 0.5) * this.height;
			} else {
				p.y += (this.anchorY.x - 0.5) * this._parent.height;
			}
		}
		if(this.parent == null) {
			this._localToWorld.setTRS(p,this.rotation,this.scale);
		} else {
			this._localToWorld.copy(this.parent.getLocalToWorld());
			this._localToWorld.appendTRS(p,this.rotation,this.scale);
		}
	}
	,onAdded: function(e) {
		if(Std["is"](this.parent,lovedna_game_components_RectTransform)) {
			this._parent = this.parent;
		}
	}
	,__class__: lovedna_game_components_RectTransform
});
var lovedna_game_components_SkinnedMeshRenderer = function() {
	lovedna_game_components_MeshRenderer.call(this);
};
$hxClasses["lovedna.game.components.SkinnedMeshRenderer"] = lovedna_game_components_SkinnedMeshRenderer;
lovedna_game_components_SkinnedMeshRenderer.__name__ = ["lovedna","game","components","SkinnedMeshRenderer"];
lovedna_game_components_SkinnedMeshRenderer.__super__ = lovedna_game_components_MeshRenderer;
lovedna_game_components_SkinnedMeshRenderer.prototype = $extend(lovedna_game_components_MeshRenderer.prototype,{
	onConstruct: function() {
		lovedna_game_components_MeshRenderer.prototype.onConstruct.call(this);
		this.set_bones([]);
	}
	,onStart: function() {
		lovedna_game_components_MeshRenderer.prototype.onStart.call(this);
	}
	,onFillBuffer: function(material,buffer) {
		if(this.bones == null) {
			return;
		}
		if(this.bones.length < 1) {
			return;
		}
		material.uniforms.setMatrix44Array(lovedna_game_DefineName.BONE.name,this.bones);
	}
	,set_bones: function(v) {
		return this.bones = v;
	}
	,__class__: lovedna_game_components_SkinnedMeshRenderer
	,__properties__: $extend(lovedna_game_components_MeshRenderer.prototype.__properties__,{set_bones:"set_bones"})
});
var lovedna_game_components__$Text_CharInfo = function() {
	this.rect = new lovedna_geom_Rect();
	this.lineIndex = 0;
};
$hxClasses["lovedna.game.components._Text.CharInfo"] = lovedna_game_components__$Text_CharInfo;
lovedna_game_components__$Text_CharInfo.__name__ = ["lovedna","game","components","_Text","CharInfo"];
lovedna_game_components__$Text_CharInfo.isNewLine = function(code) {
	if(code != 10) {
		return code == 13;
	} else {
		return true;
	}
};
lovedna_game_components__$Text_CharInfo.prototype = {
	set_char: function(v) {
		this["char"] = v;
		return this["char"];
	}
	,__class__: lovedna_game_components__$Text_CharInfo
	,__properties__: {set_char:"set_char"}
};
var lovedna_geom_Rect = function(x,y,width,height) {
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._vec2 = new lovedna_math_Vector2();
	lovedna_math_Vector4.call(this,x,y,width,height);
	this.x = x;
	this.y = y;
	this.set_width(width);
	this.set_height(height);
};
$hxClasses["lovedna.geom.Rect"] = lovedna_geom_Rect;
lovedna_geom_Rect.__name__ = ["lovedna","geom","Rect"];
lovedna_geom_Rect.__super__ = lovedna_math_Vector4;
lovedna_geom_Rect.prototype = $extend(lovedna_math_Vector4.prototype,{
	setScale: function(w,h) {
		this.x *= w;
		this.y *= h;
		var _g = this;
		_g.set_width(_g.get_width() * w);
		var _g1 = this;
		_g1.set_height(_g1.get_height() * h);
		return this;
	}
	,setSize: function(width,height) {
		this.set_width(width);
		this.set_height(height);
		return this;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,setEdge: function(left,right,top,bottom) {
		this.x = left;
		this.y = top;
		var _g = this;
		_g.set_width(_g.get_width() - (left + right));
		var _g1 = this;
		_g1.set_height(_g1.get_height() - (top + bottom));
		return this;
	}
	,setEdgeFromRect: function(v) {
		this.x = v.x;
		this.y = v.y;
		var _g = this;
		_g.set_width(_g.get_width() - (v.x + v.get_width()));
		var _g1 = this;
		_g1.set_height(_g1.get_height() - (v.y + v.get_height()));
		return this;
	}
	,normalize: function(size) {
		this.x /= size.x;
		var _g = this;
		_g.set_width(_g.get_width() / size.x);
		this.y /= size.y;
		var _g1 = this;
		_g1.set_height(_g1.get_height() / size.y);
		return this;
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.get_width() <= 0 || rect.get_height() <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,overlap: function(rect,border) {
		if(border == null) {
			border = 0;
		}
		var c1 = lovedna_geom_Rect._helpVec0;
		var c2 = lovedna_geom_Rect._helpVec1;
		var w1 = rect.get_width() * 0.5 + border;
		var h1 = rect.get_height() * 0.5 + border;
		var w2 = this.get_width() * 0.5 + border;
		var h2 = this.get_height() * 0.5 + border;
		c1.set(rect.get_left() + w1,rect.get_top() + h1);
		c2.set(this.get_left() + w2,this.get_top() + h2);
		if(lovedna_utils_Helper.abs(c1.x - c2.x) <= w1 + w2) {
			return lovedna_utils_Helper.abs(c1.y - c2.y) <= h1 + h2;
		} else {
			return false;
		}
	}
	,isEmpty: function() {
		if(!(this.get_width() <= 0)) {
			return this.get_height() <= 0;
		} else {
			return true;
		}
	}
	,set_width: function(v) {
		return this.z = v;
	}
	,get_width: function() {
		return this.z;
	}
	,get_height: function() {
		return this.w;
	}
	,set_height: function(v) {
		return this.w = v;
	}
	,get_bottom: function() {
		return this.y + this.get_height();
	}
	,set_bottom: function(value) {
		this.set_height(value - this.y);
		return value;
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(value) {
		var _g = this;
		_g.set_width(_g.get_width() - (value - this.x));
		this.x = value;
		return value;
	}
	,get_right: function() {
		return this.x + this.get_width();
	}
	,set_right: function(value) {
		this.set_width(value - this.x);
		return value;
	}
	,get_size: function() {
		return this._vec2.set(this.get_width(),this.get_height());
	}
	,set_size: function(value) {
		this.set_width(value.x);
		this.set_height(value.y);
		return value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(value) {
		var _g = this;
		_g.set_height(_g.get_height() - (value - this.y));
		this.y = value;
		return value;
	}
	,__class__: lovedna_geom_Rect
	,__properties__: {set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottom:"set_bottom",get_bottom:"get_bottom",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
});
var lovedna_utils_string_RichChunk = function() {
	this._paramKey = new lovedna_ds_FastArray();
};
$hxClasses["lovedna.utils.string.RichChunk"] = lovedna_utils_string_RichChunk;
lovedna_utils_string_RichChunk.__name__ = ["lovedna","utils","string","RichChunk"];
lovedna_utils_string_RichChunk.prototype = {
	Parse: function(v,start) {
		this._paramMap = new haxe_ds_StringMap();
		this.name = null;
		this.value = null;
		this.next = null;
		this._paramKey.clear();
		this.start = start;
		v = lovedna_utils_Helper.replace(v,"<","");
		v = lovedna_utils_Helper.replace(v,">","");
		v = lovedna_utils_Helper.trim(v);
		this.type = -1;
		var slash = v.indexOf("/");
		if(slash == 0) {
			this.type = 1;
			this.name = HxOverrides.substr(v,slash + 1,null);
			return;
		}
		if(slash == v.length - 1) {
			this.type = 0;
			v = lovedna_utils_Helper.trim(HxOverrides.substr(v,0,v.length - 1));
		}
		var space = v.indexOf(" ");
		var equ = v.indexOf("=");
		if(space == -1 && equ == -1) {
			this.name = v;
			return;
		}
		if(space != -1 && equ != -1) {
			if(equ < space) {
				var list = v.split("=");
				this.name = lovedna_utils_Helper.trim(list[0]);
				if(list.length > 1) {
					this.value = list[1];
				}
			} else {
				this.name = HxOverrides.substr(v,0,space);
				this.parseParams(HxOverrides.substr(v,space + 1,null));
			}
		} else if(space != -1) {
			this.name = HxOverrides.substr(v,0,space);
			this.parseParams(HxOverrides.substr(v,space + 1,null));
		} else if(equ != -1) {
			this.name = lovedna_utils_Helper.trim(HxOverrides.substr(v,0,equ));
			this.parseParams(HxOverrides.substr(v,equ + 1,null));
		}
	}
	,GetParamList: function() {
		return this._paramKey;
	}
	,GetParam: function(name) {
		if(this._paramMap == null) {
			return null;
		}
		return this._paramMap.get(name);
	}
	,GetParams: function() {
		return this._paramMap;
	}
	,setNext: function(v) {
		this.next = v;
	}
	,toString: function() {
		return "{" + this.name + " start " + this.start + (this.next != null ? " end " + this.next.start : "") + (this.value != null ? " " + this.value : "") + (this._paramKey.get_length() > 0 ? " has " + this._paramKey.get_length() + " param" : "") + "}";
	}
	,parseParams: function(param) {
		param = lovedna_utils_Helper.trim(param);
		if(param.indexOf(" ") == -1 && param.indexOf("=") == -1) {
			this.value = param;
			return;
		}
		var list = param.split(" ");
		var len = list.length;
		if(len == 0) {
			return;
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var p = lovedna_utils_Helper.trim(list[i]);
			if(p == "") {
				continue;
			}
			var l = p.split("=");
			var key = lovedna_utils_Helper.trim(l[0]);
			var value = null;
			if(l.length > 1) {
				value = lovedna_utils_Helper.trim(l[1]);
			}
			this._paramKey.push(key);
			this._paramMap.set(key,value);
		}
	}
	,__class__: lovedna_utils_string_RichChunk
};
var lovedna_utils_string_RichTextParser = function() {
	this._chunkList = new lovedna_ds_FastArray();
	this._list = new lovedna_ds_FastArray();
};
$hxClasses["lovedna.utils.string.RichTextParser"] = lovedna_utils_string_RichTextParser;
lovedna_utils_string_RichTextParser.__name__ = ["lovedna","utils","string","RichTextParser"];
lovedna_utils_string_RichTextParser.prototype = {
	parse: function(v) {
		this.value = v;
		this._chunkList.clear();
		var offset = 0;
		var max = v.length;
		while(true) {
			var leftPos = this.value.indexOf("<",0);
			var rightPos = this.value.indexOf(">",leftPos);
			var inc = rightPos - leftPos;
			if(inc > 0) {
				this.addChunk(leftPos,HxOverrides.substr(this.value,leftPos,inc + 1));
				this.value = HxOverrides.substr(this.value,0,leftPos) + HxOverrides.substr(this.value,rightPos + 1,null);
				if(this.value.length > max) {
					break;
				}
			} else {
				break;
			}
			--max;
			if(max < 0) {
				break;
			}
		}
		this.buildChunk();
		return this._list;
	}
	,addChunk: function(start,str) {
		var chunk = lovedna_utils_string_RichTextParser._pool.get();
		chunk.Parse(str,start);
		this._chunkList.push(chunk);
	}
	,buildChunk: function() {
		this._list.clear();
		var len = this._chunkList.get_length();
		var c = null;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			c = this._chunkList.getElement(i);
			if(c == null) {
				break;
			}
			if(c.type == -1) {
				this._list.push(c);
				c.setNext(this.getNextChunk(i + 1,c.name));
			} else if(c.type == 0) {
				this._list.push(c);
			}
		}
	}
	,getNextChunk: function(start,name) {
		var _g1 = start;
		var _g = this._chunkList.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			var chunk = this._chunkList.getElement(i);
			if(chunk.name == name && chunk.type == 1) {
				this._chunkList.removeAt(i);
				return chunk;
			}
		}
		return null;
	}
	,__class__: lovedna_utils_string_RichTextParser
};
var lovedna_game_components_Text = function() {
	lovedna_game_components_UI.call(this);
};
$hxClasses["lovedna.game.components.Text"] = lovedna_game_components_Text;
lovedna_game_components_Text.__name__ = ["lovedna","game","components","Text"];
lovedna_game_components_Text.__super__ = lovedna_game_components_UI;
lovedna_game_components_Text.prototype = $extend(lovedna_game_components_UI.prototype,{
	onAwake: function() {
		lovedna_game_components_UI.prototype.onAwake.call(this);
		this._dirty = false;
		this._lineSpace = 0;
		this._letterSpace = 0;
		this._alignmentX = -1;
		this._alignmentY = -1;
		this.transform.width = this.transform.height = 200;
		this.geometry = new lovedna_format_mesh_Geometry();
		this.geometry.position = [];
		this.geometry.uv = [];
		this.geometry.color = [];
		this._indexs = [];
		this._charList = new lovedna_ds_FastArray();
		this._charLineWidth = new lovedna_ds_FastArray();
		this._updateFrame = 0;
		this._drawFrame = 0;
	}
	,onStart: function() {
		lovedna_game_components_UI.prototype.onStart.call(this);
	}
	,dirty: function() {
		if(!this._dirty) {
			this.bindEvent(lovedna_game_events_ActorEvent.onTransformComplete,$bind(this,this.onTransformComplete));
		}
		this._dirty = true;
		this._updateFrame = 0;
	}
	,onTransformComplete: function(e) {
		this._dirty = false;
		this.bindEvent(lovedna_game_events_ActorEvent.onTransformComplete,null);
		this.refresh();
		this.drawText();
	}
	,fontInit: function(e) {
		var tmp = this._font.texture != null;
		this.dirty();
	}
	,refresh: function() {
		if(this._font == null) {
			return;
		}
		if(!this._font.enabled) {
			return;
		}
		var f = this.actor.frame;
		if(this._updateFrame == f) {
			return;
		}
		this._updateFrame = f;
		if(this._text == null || this._text.length == 0) {
			return;
		}
		lovedna_game_components_Text._parse.parse(this._text);
		this._text = lovedna_game_components_Text._parse.value;
		this._charList.clear();
		lovedna_game_components_Text._charpool.clear(0);
		var len = this._text.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var code = HxOverrides.cca(this._text,i);
			var c = this._font.fnt.getChar(code);
			var $char = lovedna_game_components_Text._charpool.get();
			$char.set_char(c);
			$char.newline = lovedna_game_components__$Text_CharInfo.isNewLine(code);
			this._charList.push($char);
		}
		var textWidth = 0;
		var textHeight = 0;
		var width = this.transform.width;
		var height = this.transform.height;
		len = this._charList.get_length();
		var px = 0;
		var py = 0;
		var scale = 1;
		var lineHeight = this._font.fnt.lineHeight;
		var isScale = lineHeight < 2;
		var maxLineHeight = 0;
		var _g11 = 0;
		var _g2 = len;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var textChar = this._charList.getElement(i1);
			textChar.lineIndex = this._charLineWidth.get_length();
			if(textChar.newline) {
				this._charLineWidth.push(px);
				px = 0;
				if(maxLineHeight == 0) {
					py += lineHeight;
				} else {
					py += maxLineHeight;
				}
				py += this.get_lineSpace();
				if(py > textHeight) {
					textHeight = py;
				}
				maxLineHeight = 0;
				continue;
			}
			var charInfo = textChar["char"];
			if(charInfo == null) {
				continue;
			}
			var charWidth = charInfo.width;
			var charHeight = charInfo.height;
			charWidth *= scale;
			charHeight *= scale;
			if(px + charInfo.xadvance > width) {
				this._charLineWidth.push(px);
				px = 0;
				if(maxLineHeight == 0) {
					py += lineHeight;
				} else {
					py += maxLineHeight;
				}
				py += this.get_lineSpace();
				if(py > textHeight) {
					textHeight = py;
				}
				maxLineHeight = 0;
			}
			if(py > height) {
				break;
			}
			var xoffset = charInfo.xoffset * scale;
			var yoffset = charInfo.yoffset * scale;
			if(isScale) {
				xoffset = 0;
				yoffset = 0;
			}
			textChar.rect.set(px + xoffset,py + yoffset,charWidth,charHeight);
			px += this.get_letterSpace();
			if(charInfo.xadvance < charWidth) {
				px += charWidth;
			} else {
				px += charInfo.xadvance;
			}
			if(px > textWidth) {
				textWidth = px;
			}
			if(charHeight + charInfo.yoffset > maxLineHeight) {
				maxLineHeight = charHeight + charInfo.yoffset;
			}
		}
		this._charLineWidth.push(px);
		textHeight += maxLineHeight;
		this._textWidth = textWidth;
		this._textHeight = textHeight;
	}
	,drawText: function() {
		if(this._font == null) {
			return;
		}
		if(!this._font.enabled) {
			return;
		}
		var f = this.actor.frame;
		if(this._drawFrame == f) {
			return;
		}
		this._drawFrame = f;
		if(this._text == null || this._text.length == 0) {
			return;
		}
		var width = this.transform.width;
		var height = this.transform.height;
		var offsetx = -this.transform.pivot.x * width;
		var offsety = -this.transform.pivot.y * height;
		this._indexs.splice(0,this._indexs.length);
		this.geometry.position.splice(0,this.geometry.position.length);
		this.geometry.uv.splice(0,this.geometry.position.length);
		this.geometry.color.splice(0,this.geometry.position.length);
		this.geometry.clearGroup();
		var count = this._charList.get_length();
		var twidth = this._font.texture.width;
		var theight = this._font.texture.height;
		var start = 0;
		var index = 0;
		var charCount = 0;
		var alignOffsetY = this._textHeight - height;
		if(this._alignmentY <= 0) {
			if(this._alignmentY == 0) {
				alignOffsetY *= 0.5;
			} else {
				alignOffsetY = 0;
			}
		}
		var rectWidth = this._textWidth;
		var s = 1;
		var _g1 = 0;
		var _g = count;
		while(_g1 < _g) {
			var i = _g1++;
			var textChar = this._charList.getElement(i);
			if(textChar.newline) {
				continue;
			}
			var charInfo = textChar["char"];
			if(charInfo == null) {
				continue;
			}
			var linew = this._charLineWidth.getElement(textChar.lineIndex);
			var alignOffsetX = width - linew;
			if(this.get_alignmentX() <= 0) {
				if(this.get_alignmentX() == 0) {
					alignOffsetX *= 0.5;
				} else {
					alignOffsetX = 0;
				}
			}
			var x1 = textChar.rect.x + alignOffsetX;
			var y1 = -textChar.rect.get_bottom() + alignOffsetY;
			var x2 = textChar.rect.get_right() + alignOffsetX;
			var y2 = -textChar.rect.y + alignOffsetY;
			this.geometry.position.push(new lovedna_math_Vector3(x1 + offsetx,y1 + offsety,0).scale(s));
			this.geometry.position.push(new lovedna_math_Vector3(x2 + offsetx,y1 + offsety,0).scale(s));
			this.geometry.position.push(new lovedna_math_Vector3(x2 + offsetx,y2 + offsety,0).scale(s));
			this.geometry.position.push(new lovedna_math_Vector3(x1 + offsetx,y2 + offsety,0).scale(s));
			x1 = charInfo.x / twidth;
			y1 = (charInfo.y + charInfo.height) / theight;
			x2 = (charInfo.x + charInfo.width) / twidth;
			y2 = charInfo.y / theight;
			this.geometry.uv.push(new lovedna_math_Vector2(x1,y1));
			this.geometry.uv.push(new lovedna_math_Vector2(x2,y1));
			this.geometry.uv.push(new lovedna_math_Vector2(x2,y2));
			this.geometry.uv.push(new lovedna_math_Vector2(x1,y2));
			if(this.colorBottom != null) {
				this.geometry.color.push(this.colorBottom);
				this.geometry.color.push(this.colorBottom);
			} else {
				this.geometry.color.push(new lovedna_math_Color().setRGBA(-1));
				this.geometry.color.push(new lovedna_math_Color().setRGBA(-1));
			}
			if(this.colorTop != null) {
				this.geometry.color.push(this.colorTop);
				this.geometry.color.push(this.colorTop);
			} else {
				this.geometry.color.push(new lovedna_math_Color().setRGBA(-1));
				this.geometry.color.push(new lovedna_math_Color().setRGBA(-1));
			}
			this._indexs.push(index);
			this._indexs.push(1 + index);
			this._indexs.push(2 + index);
			this._indexs.push(index);
			this._indexs.push(2 + index);
			this._indexs.push(3 + index);
			index += 4;
		}
		this.geometry.addGroup(this._indexs);
		this.dispatchEvent(lovedna_events_Event.init);
	}
	,get_richText: function() {
		return this._richText;
	}
	,set_richText: function(v) {
		if(this._richText != v) {
			this._richText = v;
			this.dirty();
		}
		return this._richText;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(v) {
		if(this._text != v) {
			this._text = v;
			this.dirty();
		}
		return this._text;
	}
	,get_font: function() {
		return this._font;
	}
	,set_font: function(v) {
		if(this._font != v) {
			if(this._font != null && !this._font.enabled) {
				this._font.removeEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.fontInit));
			}
			this._font = v;
			if(this._font != null && !this._font.enabled) {
				this._font.addEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.fontInit));
			} else {
				this.dirty();
			}
		}
		return this._font;
	}
	,get_lineSpace: function() {
		return this._lineSpace;
	}
	,set_lineSpace: function(v) {
		if(this._lineSpace != v) {
			this._lineSpace = v;
			this.dirty();
		}
		return this._lineSpace;
	}
	,get_letterSpace: function() {
		return this._letterSpace;
	}
	,set_letterSpace: function(v) {
		if(this._letterSpace != v) {
			this._letterSpace = v;
			this.dirty();
		}
		return this._letterSpace;
	}
	,get_alignmentX: function() {
		return this._alignmentX;
	}
	,set_alignmentX: function(v) {
		if(v > 0) {
			v = 1;
		}
		if(v < 0) {
			v = -1;
		}
		if(v != this._alignmentX) {
			this._alignmentX = v;
			this.dirty();
		}
		return this._alignmentX;
	}
	,get_alignmentY: function() {
		return this._alignmentY;
	}
	,set_alignmentY: function(v) {
		if(v > 0) {
			v = 1;
		}
		if(v < 0) {
			v = -1;
		}
		if(v != this._alignmentY) {
			this._alignmentY = v;
			this.dirty();
		}
		return this._alignmentY;
	}
	,__class__: lovedna_game_components_Text
	,__properties__: {set_alignmentY:"set_alignmentY",get_alignmentY:"get_alignmentY",set_alignmentX:"set_alignmentX",get_alignmentX:"get_alignmentX",set_letterSpace:"set_letterSpace",get_letterSpace:"get_letterSpace",set_lineSpace:"set_lineSpace",get_lineSpace:"get_lineSpace",set_font:"set_font",get_font:"get_font",set_richText:"set_richText",get_richText:"get_richText",set_text:"set_text",get_text:"get_text"}
});
var lovedna_game_components_UIRoot = function() {
	lovedna_game_components_Component.call(this);
};
$hxClasses["lovedna.game.components.UIRoot"] = lovedna_game_components_UIRoot;
lovedna_game_components_UIRoot.__name__ = ["lovedna","game","components","UIRoot"];
lovedna_game_components_UIRoot.__super__ = lovedna_game_components_Component;
lovedna_game_components_UIRoot.prototype = $extend(lovedna_game_components_Component.prototype,{
	onAwake: function() {
		lovedna_game_components_Component.prototype.onAwake.call(this);
		this.distance = 60;
		this.width = 0;
		this.height = 0;
		this._dirty = false;
	}
	,onStart: function() {
		lovedna_game_components_Component.prototype.onStart.call(this);
		this.actor.get_transform().position.set(0,0,this.distance);
		this.bindEvent(lovedna_game_events_ActorEvent.onTransformComplete,$bind(this,this.onTransformComplete));
		this._dirty = true;
	}
	,onCameraUpdate: function(e) {
		this._dirty = true;
	}
	,onTransformComplete: function(e) {
		if(this._camera == null) {
			this._camera = this.actor.get_transform().parent.actor.getComponent(lovedna_game_components_Camera);
			if(this._camera == null) {
				return;
			}
			this._camera.actor.addEventListener(lovedna_game_events_ActorEvent.onCameraUpdate.get_type(),$bind(this,this.onCameraUpdate));
		}
		if(!this._dirty || this._camera == null) {
			return;
		}
		this._dirty = false;
		var v1 = lovedna_math_Vector3.get_temp();
		var v2 = lovedna_math_Vector3.get_temp();
		var v3 = lovedna_math_Vector3.get_temp();
		var s = 1;
		var e1 = 1;
		var p = this.distance / (this._camera.farClipPlane - this._camera.nearClipPlane);
		v1.set(-s,-s,e1);
		v2.set(s,-s,e1);
		v3.set(-s,s,e1);
		this._camera.projectionViewInverseMatrix.transformVector(v1,true);
		this._camera.projectionViewInverseMatrix.transformVector(v2,true);
		this._camera.projectionViewInverseMatrix.transformVector(v3,true);
		var w = v1.distance(v2);
		var h = v1.distance(v3);
		var pw = w * p;
		var ph = h * p;
		s = pw / lovedna_game_Screen.width;
		if(this.width > 0 && this.height > 0) {
			var cp = this.width / this.height;
			var sp = pw / ph;
			if(cp > sp) {
				s = pw / this.width;
			} else {
				s = ph / this.height;
			}
		}
		this.actor.get_transform().scale.set(-s,s,s);
	}
	,set_camera: function(v) {
		if(this._camera != null) {
			this._camera.actor.removeEventListener(lovedna_game_events_ActorEvent.onCameraUpdate.get_type(),$bind(this,this.onCameraUpdate));
		}
		this._camera = v;
		if(this._camera != null) {
			if(this.distance < this._camera.nearClipPlane) {
				this.distance = this._camera.nearClipPlane + 1;
			}
			if(this.distance > this._camera.farClipPlane) {
				this.distance = this._camera.farClipPlane - 1;
			}
			this._camera.actor.addEventListener(lovedna_game_events_ActorEvent.onCameraUpdate.get_type(),$bind(this,this.onCameraUpdate));
		}
		return this._camera;
	}
	,__class__: lovedna_game_components_UIRoot
});
var lovedna_game_events_ActorEvent = function(type) {
	lovedna_events_Event.call(this,type);
};
$hxClasses["lovedna.game.events.ActorEvent"] = lovedna_game_events_ActorEvent;
lovedna_game_events_ActorEvent.__name__ = ["lovedna","game","events","ActorEvent"];
lovedna_game_events_ActorEvent.__super__ = lovedna_events_Event;
lovedna_game_events_ActorEvent.prototype = $extend(lovedna_events_Event.prototype,{
	__class__: lovedna_game_events_ActorEvent
});
var lovedna_game_events_SystemEvent = function(type) {
	lovedna_events_Event.call(this,type);
	this.vintlist = [];
	this.vfloatlist = [];
	this.vstringlist = [];
};
$hxClasses["lovedna.game.events.SystemEvent"] = lovedna_game_events_SystemEvent;
lovedna_game_events_SystemEvent.__name__ = ["lovedna","game","events","SystemEvent"];
lovedna_game_events_SystemEvent.__super__ = lovedna_events_Event;
lovedna_game_events_SystemEvent.prototype = $extend(lovedna_events_Event.prototype,{
	__class__: lovedna_game_events_SystemEvent
});
var lovedna_game_geometry_Bounds = function() {
	this.box = new lovedna_geom_Box3();
	this.sphere = new lovedna_geom_Sphere();
};
$hxClasses["lovedna.game.geometry.Bounds"] = lovedna_game_geometry_Bounds;
lovedna_game_geometry_Bounds.__name__ = ["lovedna","game","geometry","Bounds"];
lovedna_game_geometry_Bounds.prototype = {
	copy: function(v) {
		if(v != null) {
			this.box.copy(v.box);
			this.sphere.copy(v.sphere);
		}
		return this;
	}
	,reset: function() {
		if(this.box != null) {
			this.box.reset();
			this.sphere.radius = 0;
		}
	}
	,expand: function(pos) {
		this.box.expand(pos);
	}
	,multiplyMatrix44: function(transform) {
		if(transform == null) {
			return;
		}
		this.box.multiplyMatrix44(transform);
		this.sphere.center.copy(this.box.getCenter());
		var size = this.box.getSize().scale(0.5);
		var tmp = lovedna_utils_Helper.max(size.x,size.y);
		this.sphere.radius = lovedna_utils_Helper.max(tmp,size.z);
	}
	,__class__: lovedna_game_geometry_Bounds
};
var lovedna_game_geometry_GeomAxisLine = function() {
	lovedna_format_mesh_Geometry.call(this);
	this.size = 1;
};
$hxClasses["lovedna.game.geometry.GeomAxisLine"] = lovedna_game_geometry_GeomAxisLine;
lovedna_game_geometry_GeomAxisLine.__name__ = ["lovedna","game","geometry","GeomAxisLine"];
lovedna_game_geometry_GeomAxisLine.__super__ = lovedna_format_mesh_Geometry;
lovedna_game_geometry_GeomAxisLine.prototype = $extend(lovedna_format_mesh_Geometry.prototype,{
	build: function() {
		haxe_Log.trace("size " + this.size,{ fileName : "GeomAxisLine.hx", lineNumber : 31, className : "lovedna.game.geometry.GeomAxisLine", methodName : "build"});
		this.position = [new lovedna_math_Vector3(0,0,0),new lovedna_math_Vector3(this.size,0,0),new lovedna_math_Vector3(0,0,0),new lovedna_math_Vector3(0,this.size,0),new lovedna_math_Vector3(0,0,0),new lovedna_math_Vector3(0,0,this.size)];
		this.color = [new lovedna_math_Vector4(1,0,0,1),new lovedna_math_Vector4(1,0.6,0,1),new lovedna_math_Vector4(0,1,0,1),new lovedna_math_Vector4(0.6,1,0,1),new lovedna_math_Vector4(0,0,1,1),new lovedna_math_Vector4(0,0.6,1,1)];
		this.addGroup([0,1,2,3,4,5]);
		return this;
	}
	,__class__: lovedna_game_geometry_GeomAxisLine
});
var lovedna_game_geometry_GeomPlane = function() {
	lovedna_format_mesh_Geometry.call(this);
	this.width = 1;
	this.height = 1;
	this.widthSegments = 1;
	this.heightSegments = 1;
};
$hxClasses["lovedna.game.geometry.GeomPlane"] = lovedna_game_geometry_GeomPlane;
lovedna_game_geometry_GeomPlane.__name__ = ["lovedna","game","geometry","GeomPlane"];
lovedna_game_geometry_GeomPlane.__super__ = lovedna_format_mesh_Geometry;
lovedna_game_geometry_GeomPlane.prototype = $extend(lovedna_format_mesh_Geometry.prototype,{
	build: function() {
		if(this.widthSegments < 1) {
			this.widthSegments = 1;
		}
		if(this.heightSegments < 1) {
			this.heightSegments = 1;
		}
		if(this.width <= 0) {
			this.width = 0.0001;
		}
		if(this.height <= 0) {
			this.height = 0.0001;
		}
		var pos = [];
		this.normal = [];
		this.uv = [];
		this.color = [];
		var index = [];
		var width_half = this.width * 0.5;
		var height_half = this.height * 0.5;
		var gridX = this.widthSegments;
		var gridY = this.heightSegments;
		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;
		var segment_width = this.width / gridX;
		var segment_height = this.height / gridY;
		var myuv = this.getCustomUvGetter(0);
		var _g1 = 0;
		var _g = gridY1;
		while(_g1 < _g) {
			var iy = _g1++;
			var y = iy * segment_height - height_half;
			var _g3 = 0;
			var _g2 = gridX1;
			while(_g3 < _g2) {
				var ix = _g3++;
				var x = ix * segment_width - width_half;
				var p = new lovedna_math_Vector3(x,-y,0);
				var n = new lovedna_math_Vector3(0,0,1);
				var uvx = ix / gridX;
				var uvy = iy / gridY;
				var u = new lovedna_math_Vector2().copy(myuv(uvx,uvy));
				if(this.transform != null) {
					this.transform.transformVector(p);
					this.transform.transformVector(n);
				}
				pos.push(p);
				this.normal.push(n);
				this.uv.push(u);
				if(this.customColor != null) {
					this.color.push(this.customColor);
				} else {
					this.color.push(new lovedna_math_Vector4(1,1,1,1));
				}
			}
		}
		var _g11 = 0;
		var _g4 = gridY;
		while(_g11 < _g4) {
			var iy1 = _g11++;
			var _g31 = 0;
			var _g21 = gridX;
			while(_g31 < _g21) {
				var ix1 = _g31++;
				var a = ix1 + gridX1 * iy1;
				var b = ix1 + gridX1 * (iy1 + 1);
				var c = ix1 + 1 + gridX1 * (iy1 + 1);
				var d = ix1 + 1 + gridX1 * iy1;
				index.push(a);
				index.push(b);
				index.push(d);
				index.push(b);
				index.push(c);
				index.push(d);
			}
		}
		this.position = pos;
		this.addGroup(index);
		return this;
	}
	,__class__: lovedna_game_geometry_GeomPlane
});
var lovedna_game_geometry_GeomTorus = function() {
	lovedna_format_mesh_Geometry.call(this);
	this.radius = 1;
	this.tube = 0.4;
	this.radialSegments = 10;
	this.tubularSegments = 30;
	this.arc = 360;
	this.customColor = new lovedna_math_Color(1,1,1,1);
};
$hxClasses["lovedna.game.geometry.GeomTorus"] = lovedna_game_geometry_GeomTorus;
lovedna_game_geometry_GeomTorus.__name__ = ["lovedna","game","geometry","GeomTorus"];
lovedna_game_geometry_GeomTorus.__super__ = lovedna_format_mesh_Geometry;
lovedna_game_geometry_GeomTorus.prototype = $extend(lovedna_format_mesh_Geometry.prototype,{
	build: function() {
		if(this.radius < 0.01) {
			this.radius = 0.01;
		}
		if(this.tube < 0.004) {
			this.tube = 0.004;
		}
		if(this.radialSegments < 2) {
			this.radialSegments = 2;
		}
		if(this.tubularSegments < 3) {
			this.tubularSegments = 3;
		}
		if(this.arc < 1) {
			this.arc = 1;
		}
		this.arc = lovedna_utils_Helper.angleToRadian(lovedna_utils_Helper.clamp(this.arc,1,360));
		var vertexList = [];
		var indexList = [];
		var normalList = [];
		var colorList = [];
		var uvList = [];
		var center = new lovedna_math_Vector3();
		var hsv = new lovedna_math_HsvColor();
		var uvcreate = this.getCustomUvGetter();
		var _g1 = 0;
		var _g = this.radialSegments + 1;
		while(_g1 < _g) {
			var j = _g1++;
			var v = j / this.radialSegments * 6.283185307179586476925286766559;
			var cosv = Math.cos(v);
			var _g3 = 0;
			var _g2 = this.tubularSegments + 1;
			while(_g3 < _g2) {
				var i = _g3++;
				var u = i / this.tubularSegments * this.arc;
				var cosu = Math.cos(u);
				var sinu = Math.sin(u);
				var p = new lovedna_math_Vector3();
				p.x = (this.radius + this.tube * cosv) * cosu;
				p.y = (this.radius + this.tube * cosv) * sinu;
				p.z = this.tube * Math.sin(v);
				center.x = this.radius * cosu;
				center.y = this.radius * sinu;
				var n = new lovedna_math_Vector3().sub(p,center);
				var u1 = new lovedna_math_Vector2().copy(uvcreate(i / this.tubularSegments,j / this.radialSegments));
				if(this.transform != null) {
					this.transform.transformVector(p);
					this.transform.transformVector(n);
				}
				vertexList.push(p);
				normalList.push(n.normalize());
				uvList.push(u1);
				if(this.customColor == null) {
					hsv.set(360 / this.tubularSegments * i,1,1);
					var c = hsv.toColor();
					colorList.push(c);
				} else {
					var c1 = new lovedna_math_Color();
					c1.from(this.customColor);
					colorList.push(c1);
				}
			}
		}
		var _g11 = 1;
		var _g4 = this.radialSegments + 1;
		while(_g11 < _g4) {
			var j1 = _g11++;
			var _g31 = 1;
			var _g21 = this.tubularSegments + 1;
			while(_g31 < _g21) {
				var i1 = _g31++;
				var a = (this.tubularSegments + 1) * j1 + i1 - 1;
				var b = (this.tubularSegments + 1) * (j1 - 1) + i1 - 1;
				var c2 = (this.tubularSegments + 1) * (j1 - 1) + i1;
				var d = (this.tubularSegments + 1) * j1 + i1;
				indexList.push(a);
				indexList.push(b);
				indexList.push(d);
				indexList.push(b);
				indexList.push(c2);
				indexList.push(d);
			}
		}
		this.position = vertexList;
		this.normal = normalList;
		this.uv = uvList;
		this.color = colorList;
		this.addGroup(indexList);
		return this;
	}
	,__class__: lovedna_game_geometry_GeomTorus
});
var lovedna_game_geometry_MeshBuffer = function() { };
$hxClasses["lovedna.game.geometry.MeshBuffer"] = lovedna_game_geometry_MeshBuffer;
lovedna_game_geometry_MeshBuffer.__name__ = ["lovedna","game","geometry","MeshBuffer"];
lovedna_game_geometry_MeshBuffer.prototype = {
	__class__: lovedna_game_geometry_MeshBuffer
};
var lovedna_game_geometry_GeometryBuffer = function(geom) {
	this._geom = geom;
	this._shaderId = 0;
	this.define = new lovedna_game_ShaderDefine();
	this.enabled = false;
	this.bounds = new lovedna_game_geometry_Bounds();
};
$hxClasses["lovedna.game.geometry.GeometryBuffer"] = lovedna_game_geometry_GeometryBuffer;
lovedna_game_geometry_GeometryBuffer.__name__ = ["lovedna","game","geometry","GeometryBuffer"];
lovedna_game_geometry_GeometryBuffer.__interfaces__ = [lovedna_game_geometry_MeshBuffer];
lovedna_game_geometry_GeometryBuffer.prototype = {
	build: function() {
		this.indexBuffer = null;
		this.positionBuffer = null;
		this.vertexBuffer = null;
		this.colorBuffer = null;
		if(this.getIndexBuffer() == null) {
			return;
		}
		if(this.getPositionBuffer() == null) {
			return;
		}
		this.getVertexBuffer();
		this.getColorBuffer();
		this.getBoneBuffer();
		this.enabled = true;
	}
	,unload: function() {
		if(this._indexBuffer != null) {
			this._indexBuffer.unload();
		}
		if(this._positionBuffer != null) {
			this._positionBuffer.unload();
		}
		if(this._vertexBuffer != null) {
			this._vertexBuffer.unload();
		}
		if(this._boneBuffer != null) {
			this._boneBuffer.unload();
		}
		if(this._colorBuffer != null) {
			this._colorBuffer.unload();
		}
		this._indexBuffer = null;
		this._positionBuffer = null;
		this._vertexBuffer = null;
		this._boneBuffer = null;
		this._colorBuffer = null;
		this._geom = null;
		this.indexBuffer = null;
		this.positionBuffer = null;
		this.vertexBuffer = null;
		this.colorBuffer = null;
		this.define = null;
		this.enabled = false;
		this.bounds = null;
	}
	,buildBounds: function() {
		var len = this._geom.position.length;
		if(len < 2) {
			return;
		}
		var data = [];
		this.bounds.reset();
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var pos = this._geom.position[i];
			pos.fillArray(data,i * 3);
			this.bounds.expand(pos);
		}
	}
	,raycast: function(ray) {
		var glen = this._geom.groups.length;
		var v1 = lovedna_math_Vector3.get_temp();
		var v2 = lovedna_math_Vector3.get_temp();
		var v3 = lovedna_math_Vector3.get_temp();
		while(glen-- > 0) {
			var ilist = this._geom.groups[glen].indices;
			var len = lovedna_utils_Helper.floor(ilist.length / 3);
			while(len-- > 0) {
				var start = len * 3;
				var a = ilist[start];
				var b = ilist[start + 1];
				var c = ilist[start + 2];
				v1.copy(this._geom.position[a]);
				v2.copy(this._geom.position[b]);
				v3.copy(this._geom.position[c]);
				var p = ray.intersectTriangle(v1,v2,v3);
				if(p != null) {
					var hit = new lovedna_game_RaycastHit();
					hit.point = p;
					return hit;
				}
			}
		}
		return null;
	}
	,getIndexBuffer: function() {
		if(this.indexBuffer == null) {
			if(this._geom.position == null) {
				return null;
			}
			if(this._geom.groups.length < 1) {
				return null;
			}
			var len = this._geom.groups.length;
			var data = [];
			var layout = [];
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var g = this._geom.groups[i];
				var l = new lovedna_game_graphics_IndexLayout();
				l.length = g.indices.length;
				l.offset = g.start;
				layout.push(l);
				lovedna_utils_Helper.concat(data,g.indices);
			}
			if(this._indexBuffer == null) {
				this._indexBuffer = new lovedna_game_graphics_IndexBuffer();
			}
			this._indexBuffer.setLayouts(layout);
			this.indexBuffer = this._indexBuffer;
			this.indexBuffer.upload(data);
		}
		return this.indexBuffer;
	}
	,getPositionBuffer: function() {
		if(this.positionBuffer == null) {
			if(this._geom.position == null) {
				return null;
			}
			var len = this._geom.position.length;
			if(len < 2) {
				return null;
			}
			var data = [];
			this.bounds.reset();
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var pos = this._geom.position[i];
				pos.fillArray(data,i * 3);
				this.bounds.expand(pos);
			}
			if(this._positionBuffer == null) {
				this._positionBuffer = new lovedna_game_graphics_VertexBuffer();
				this._positionBuffer.setLayout([new lovedna_game_graphics_VertexLayout(lovedna_game_DefineName.POSITION.name,lovedna_game_DefineName.POSITION.size)]);
			}
			this.positionBuffer = this._positionBuffer;
			this.positionBuffer.upload(data);
			this._shaderId = 0;
		}
		return this.positionBuffer;
	}
	,getVertexBuffer: function() {
		if(this.vertexBuffer == null) {
			if(this._geom.position == null) {
				return null;
			}
			var len = this._geom.position.length;
			if(len < 2) {
				return null;
			}
			var list = [this._geom.uv,this._geom.uv2,this._geom.normal,this._geom.normal2,this._geom.tangent];
			var names = [lovedna_game_DefineName.UV,lovedna_game_DefineName.UV2,lovedna_game_DefineName.NORMAL,lovedna_game_DefineName.NORMAL2,lovedna_game_DefineName.TANGENT];
			var c = names.length;
			var stride = 0;
			var _g1 = 0;
			var _g = c;
			while(_g1 < _g) {
				var i = _g1++;
				var l = list[i];
				var n = names[i];
				this.define.define(n.name,null,false);
				if(l == null) {
					continue;
				}
				if(l.length < len) {
					continue;
				}
				stride += n.size;
				this.define.define(n.name,"");
			}
			if(stride == 0) {
				return null;
			}
			if(this._vertexBuffer == null) {
				this._vertexBuffer = new lovedna_game_graphics_VertexBuffer();
			}
			var data = [];
			var offset = 0;
			var start = 0;
			var vlayoutList = [];
			var _g11 = 0;
			var _g2 = c;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var l1 = list[i1];
				if(l1 == null) {
					continue;
				}
				if(l1.length < len) {
					continue;
				}
				var _g3 = 0;
				var _g21 = len;
				while(_g3 < _g21) {
					var j = _g3++;
					start = stride * j + offset;
					var fill = l1[j];
					fill.fillArray(data,start);
				}
				var n1 = names[i1];
				offset += n1.size;
				vlayoutList.push(new lovedna_game_graphics_VertexLayout(n1.name,n1.size));
			}
			this._vertexBuffer.setLayout(vlayoutList);
			this.vertexBuffer = this._vertexBuffer;
			this.vertexBuffer.upload(data);
			this._shaderId = 0;
		}
		return this.vertexBuffer;
	}
	,getBoneBuffer: function() {
		if(this.boneBuffer == null) {
			if(this._geom.boneWeight == null) {
				return null;
			}
			if(this._geom.position == null) {
				return null;
			}
			var len = this._geom.position.length;
			if(len < 2) {
				return null;
			}
			var data = [];
			var stride = 8;
			while(len-- > 0) {
				var offset = stride * len;
				var w = this._geom.boneWeight[len];
				w.index.fillArray(data,offset);
				w.weight.fillArray(data,offset + 4);
			}
			if(this._boneBuffer == null) {
				this._boneBuffer = new lovedna_game_graphics_VertexBuffer();
				this.define.define(lovedna_game_DefineName.BONE.name);
				this._boneBuffer.setLayout([new lovedna_game_graphics_VertexLayout(lovedna_game_DefineName.BONE_INDEX.name,lovedna_game_DefineName.BONE_INDEX.size),new lovedna_game_graphics_VertexLayout(lovedna_game_DefineName.BONE_WEIGHT.name,lovedna_game_DefineName.BONE_WEIGHT.size)]);
			}
			this.boneBuffer = this._boneBuffer;
			this.boneBuffer.upload(data);
		}
		return this.boneBuffer;
	}
	,getColorBuffer: function() {
		if(this.colorBuffer == null) {
			if(this._geom.position == null) {
				return null;
			}
			var len = this._geom.position.length;
			if(len < 2) {
				return null;
			}
			var list = [this._geom.color,this._geom.color2,this._geom.color3,this._geom.color4,this._geom.color5,this._geom.color6,this._geom.color7,this._geom.color8,this._geom.color9];
			var names = [lovedna_game_DefineName.COLOR,lovedna_game_DefineName.COLOR2,lovedna_game_DefineName.COLOR3,lovedna_game_DefineName.COLOR4,lovedna_game_DefineName.COLOR5,lovedna_game_DefineName.COLOR6,lovedna_game_DefineName.COLOR7,lovedna_game_DefineName.COLOR8,lovedna_game_DefineName.COLOR9];
			var c = names.length;
			var stride = 0;
			var _g1 = 0;
			var _g = c;
			while(_g1 < _g) {
				var i = _g1++;
				var l = list[i];
				var n = names[i];
				this.define.define(n.name,null,false);
				if(l == null) {
					continue;
				}
				if(l.length < len) {
					continue;
				}
				stride += n.size;
				this.define.define(n.name,"");
			}
			if(stride == 0) {
				return null;
			}
			if(this._colorBuffer == null) {
				this._colorBuffer = new lovedna_game_graphics_VertexBuffer();
			}
			var data = [];
			var offset = 0;
			var start = 0;
			var vlayoutList = [];
			var _g11 = 0;
			var _g2 = c;
			while(_g11 < _g2) {
				var i1 = _g11++;
				var l1 = list[i1];
				if(l1 == null) {
					continue;
				}
				if(l1.length < len) {
					continue;
				}
				var _g3 = 0;
				var _g21 = len;
				while(_g3 < _g21) {
					var j = _g3++;
					start = stride * j + offset;
					var fill = l1[j];
					fill.fillArray(data,start);
				}
				var n1 = names[i1];
				offset += n1.size;
				vlayoutList.push(new lovedna_game_graphics_VertexLayout(n1.name,n1.size));
			}
			this._colorBuffer.setLayout(vlayoutList);
			this.colorBuffer = this._colorBuffer;
			this.colorBuffer.upload(data);
			this._shaderId = 0;
		}
		return this.colorBuffer;
	}
	,updateLocations: function(shader) {
		var update = this._shaderId != shader.get_id();
		this._shaderId = shader.get_id();
		if(!this.enabled) {
			return;
		}
		var vbuffer = this.getPositionBuffer();
		if(update) {
			this.updateLayout(vbuffer,shader);
		}
		vbuffer = this.getVertexBuffer();
		if(vbuffer != null) {
			if(update) {
				this.updateLayout(vbuffer,shader);
			}
		}
		vbuffer = this.getColorBuffer();
		if(vbuffer != null) {
			if(update) {
				this.updateLayout(vbuffer,shader);
			}
		}
		vbuffer = this.getBoneBuffer();
		if(vbuffer != null) {
			if(update) {
				this.updateLayout(vbuffer,shader);
			}
		}
		this._shaderId = shader.get_id();
	}
	,bind: function() {
		if(!this.enabled) {
			return false;
		}
		var vbuffer = this.getPositionBuffer();
		this.getIndexBuffer().bind();
		vbuffer.bind();
		vbuffer = this.getVertexBuffer();
		if(vbuffer != null) {
			vbuffer.bind(this._shaderId);
		}
		vbuffer = this.getColorBuffer();
		if(vbuffer != null) {
			vbuffer.bind(this._shaderId);
		}
		vbuffer = this.getBoneBuffer();
		if(vbuffer != null) {
			vbuffer.bind(this._shaderId);
		}
		return true;
	}
	,updateLayout: function(buffer,shader) {
		var layouts = buffer.layouts;
		if(layouts == null) {
			return;
		}
		var len = layouts.length;
		if(len < 1) {
			return;
		}
		while(len-- > 0) {
			var v = layouts[len];
			var i = shader.getBufferInput(v.name);
			if(i == null) {
				v.location = -1;
				continue;
			}
			v.location = i.location;
		}
	}
	,get_indexBuffer: function() {
		return this._indexBuffer;
	}
	,get_positionBuffer: function() {
		return this._positionBuffer;
	}
	,get_vertexBuffer: function() {
		return this._vertexBuffer;
	}
	,get_boneBuffer: function() {
		return this._boneBuffer;
	}
	,__class__: lovedna_game_geometry_GeometryBuffer
};
var lovedna_game_graphics__$GLContext_ClearTarget = function() {
	this.enabled = false;
	this.color = new lovedna_math_Color(0,0,0,0);
	this.depth = 1;
	this.stencil = 0;
	this.target = null;
};
$hxClasses["lovedna.game.graphics._GLContext.ClearTarget"] = lovedna_game_graphics__$GLContext_ClearTarget;
lovedna_game_graphics__$GLContext_ClearTarget.__name__ = ["lovedna","game","graphics","_GLContext","ClearTarget"];
lovedna_game_graphics__$GLContext_ClearTarget.prototype = {
	clear: function() {
		if(this.target != null && !this.enabled) {
			return;
		}
		var mask = 0;
		if(this.color != null) {
			mask |= 16384;
		}
		if(this.depth >= 0) {
			mask |= 256;
			this.gl.depthMask(true);
			this.gl.clearDepthf(this.depth);
		}
		if(this.stencil >= 0) {
			mask |= 1024;
			this.gl.clearStencil(this.stencil);
		}
		if(this.color != null) {
			this.gl.clearColor(this.color.get_r(),this.color.get_g(),this.color.get_b(),this.color.get_a());
		}
		this.gl.clear(mask);
	}
	,__class__: lovedna_game_graphics__$GLContext_ClearTarget
};
var lovedna_game_graphics_GLContext = function() {
};
$hxClasses["lovedna.game.graphics.GLContext"] = lovedna_game_graphics_GLContext;
lovedna_game_graphics_GLContext.__name__ = ["lovedna","game","graphics","GLContext"];
lovedna_game_graphics_GLContext.init = function(v) {
	if(lovedna_game_graphics_GLContext.gl != null) {
		return;
	}
	lovedna_game_graphics_GLContext.gl = v;
	lovedna_game_graphics_GLContext.currentState = new lovedna_game_graphics_GLState();
	lovedna_game_graphics_GLContext.currentState.defaultValue();
};
lovedna_game_graphics_GLContext.start = function(w,h) {
	lovedna_game_graphics_GLContext._targetStack.clear();
	lovedna_game_graphics_GLContext._currentTargetID = -2;
	lovedna_game_graphics_GLContext._currentTarget = null;
	lovedna_game_graphics_GLContext._clearStack.clear();
	lovedna_game_graphics_GLContext._currentClear = null;
	lovedna_game_graphics_GLContext._width = w;
	lovedna_game_graphics_GLContext._height = h;
	lovedna_game_graphics_GLContext.viewport(0,0,w,h);
};
lovedna_game_graphics_GLContext.end = function() {
	lovedna_game_graphics_GLContext.viewport(0,0,lovedna_game_graphics_GLContext._width,lovedna_game_graphics_GLContext._height);
	lovedna_game_graphics_GLContext.colorWrite(true,true,true,true);
	if(!lovedna_game_graphics_GLContext.currentState.blend) {
		lovedna_game_graphics_GLContext.currentState.blend = true;
	}
	lovedna_game_graphics_GLContext.gl.enable(3042);
	if(lovedna_game_graphics_GLContext.currentState.cullMode == -1) {
		lovedna_game_graphics_GLContext.currentState.cullMode = 1029;
	}
	lovedna_game_graphics_GLContext.gl.enable(2884);
	if(!lovedna_game_graphics_GLContext.currentState.depthTest) {
		lovedna_game_graphics_GLContext.currentState.depthTest = true;
	}
	lovedna_game_graphics_GLContext.gl.enable(2929);
	if(lovedna_game_graphics_GLContext.currentState.depthMode != 513) {
		lovedna_game_graphics_GLContext.currentState.depthMode = 513;
	}
	lovedna_game_graphics_GLContext.gl.depthFunc(lovedna_game_graphics_GLContext.currentState.depthMode);
	if(!lovedna_game_graphics_GLContext.currentState.depthWrite) {
		lovedna_game_graphics_GLContext.currentState.depthWrite = true;
	}
	lovedna_game_graphics_GLContext.gl.depthMask(true);
	lovedna_game_graphics_GLContext.gl.bindFramebuffer(36160,null);
	lovedna_game_graphics_GLContext.gl.bindRenderbuffer(36161,null);
	lovedna_game_graphics_IndexBuffer.current = null;
	lovedna_game_graphics_Program.current = null;
	lovedna_game_graphics_GLContext.gl.bindTexture(3553,null);
	lovedna_game_graphics_GLContext.gl.bindBuffer(34963,null);
	lovedna_game_graphics_GLContext.gl.bindBuffer(34962,null);
	var len = 5;
	while(len-- > 0) lovedna_game_graphics_GLContext.gl.disableVertexAttribArray(len);
};
lovedna_game_graphics_GLContext.colorWrite = function(r,g,b,a) {
	if(lovedna_game_graphics_GLContext._colorMask[0] != r || lovedna_game_graphics_GLContext._colorMask[1] != g || lovedna_game_graphics_GLContext._colorMask[2] != b || lovedna_game_graphics_GLContext._colorMask[3] != a) {
		lovedna_game_graphics_GLContext._colorMask[0] = r;
		lovedna_game_graphics_GLContext._colorMask[1] = g;
		lovedna_game_graphics_GLContext._colorMask[2] = b;
		lovedna_game_graphics_GLContext._colorMask[3] = a;
		lovedna_game_graphics_GLContext.gl.colorMask(r,g,b,a);
	}
};
lovedna_game_graphics_GLContext.viewport = function(x,y,width,height) {
	lovedna_game_graphics_GLContext.gl.viewport(x,y,width,height);
};
lovedna_game_graphics_GLContext.clear = function(color,depth,stencil) {
	if(stencil == null) {
		stencil = 0;
	}
	if(depth == null) {
		depth = 1;
	}
	var empty = false;
	if(lovedna_game_graphics_GLContext._currentClear == null) {
		lovedna_game_graphics_GLContext._currentClear = lovedna_game_graphics_GLContext._clearTargetPool.get();
		lovedna_game_graphics_GLContext._currentClear.gl = lovedna_game_graphics_GLContext.gl;
		lovedna_game_graphics_GLContext._currentClear.target = null;
		empty = true;
	}
	lovedna_game_graphics_GLContext._currentClear.enabled = true;
	lovedna_game_graphics_GLContext._currentClear.color = color;
	lovedna_game_graphics_GLContext._currentClear.depth = depth;
	lovedna_game_graphics_GLContext._currentClear.stencil = stencil;
	if(empty) {
		lovedna_game_graphics_GLContext._currentClear.clear();
		lovedna_game_graphics_GLContext._currentClear = null;
	}
};
lovedna_game_graphics_GLContext.state = function(value) {
	var cullMode = value.cullMode;
	if(cullMode != lovedna_game_graphics_GLContext.currentState.cullMode) {
		lovedna_game_graphics_GLContext.currentState.cullMode = cullMode;
		if(lovedna_game_graphics_GLContext.currentState.cullMode == -1) {
			lovedna_game_graphics_GLContext.gl.disable(2884);
		} else {
			lovedna_game_graphics_GLContext.gl.enable(2884);
			lovedna_game_graphics_GLContext.gl.cullFace(lovedna_game_graphics_GLContext.currentState.cullMode);
		}
	}
	var depthTest = value.depthTest;
	if(depthTest != lovedna_game_graphics_GLContext.currentState.depthTest) {
		lovedna_game_graphics_GLContext.currentState.depthTest = depthTest;
		if(lovedna_game_graphics_GLContext.currentState.depthTest) {
			lovedna_game_graphics_GLContext.gl.enable(2929);
		} else {
			lovedna_game_graphics_GLContext.gl.disable(2929);
		}
	}
	if(depthTest) {
		if(value.depthMode != lovedna_game_graphics_GLContext.currentState.depthMode) {
			lovedna_game_graphics_GLContext.gl.depthFunc(value.depthMode);
			lovedna_game_graphics_GLContext.currentState.depthMode = value.depthMode;
		}
	}
	var depthWrite = value.depthWrite;
	if(depthWrite != lovedna_game_graphics_GLContext.currentState.depthWrite) {
		lovedna_game_graphics_GLContext.currentState.depthWrite = depthWrite;
		lovedna_game_graphics_GLContext.gl.depthMask(lovedna_game_graphics_GLContext.currentState.depthWrite);
	}
	var blend = value.blend;
	if(blend != lovedna_game_graphics_GLContext.currentState.blend) {
		lovedna_game_graphics_GLContext.currentState.blend = blend;
		if(!lovedna_game_graphics_GLContext.currentState.blend) {
			lovedna_game_graphics_GLContext.gl.disable(3042);
		}
	}
	if(blend) {
		lovedna_game_graphics_GLContext.gl.enable(3042);
		lovedna_game_graphics_GLContext.gl.blendEquationSeparate(value.blendColorOperation,value.blendAlphaOperation);
		lovedna_game_graphics_GLContext.gl.blendFuncSeparate(value.blendSrcColor,value.blendDstColor,value.blendSrcAlpha,value.blendDstAlpha);
	}
	var stencilTest = value.stencilTest;
	if(lovedna_game_graphics_GLContext.currentState.stencilTest != stencilTest) {
		lovedna_game_graphics_GLContext.currentState.stencilTest = stencilTest;
		if(lovedna_game_graphics_GLContext.currentState.stencilTest) {
			lovedna_game_graphics_GLContext.gl.enable(2960);
		} else {
			lovedna_game_graphics_GLContext.gl.disable(2960);
		}
	}
	if(lovedna_game_graphics_GLContext.currentState.stencilTest) {
		lovedna_game_graphics_GLContext.currentState.stencilReadMask = value.stencilReadMask;
		lovedna_game_graphics_GLContext.currentState.stencilReferenceValue = value.stencilReferenceValue;
		lovedna_game_graphics_GLContext.currentState.stencilMode = value.stencilMode;
		lovedna_game_graphics_GLContext.currentState.stencilFail = value.stencilFail;
		lovedna_game_graphics_GLContext.currentState.stencilDepthFail = value.stencilDepthFail;
		lovedna_game_graphics_GLContext.currentState.stencilBothPass = value.stencilBothPass;
		lovedna_game_graphics_GLContext.gl.stencilFunc(lovedna_game_graphics_GLContext.currentState.stencilMode,lovedna_game_graphics_GLContext.currentState.stencilReferenceValue,lovedna_game_graphics_GLContext.currentState.stencilReadMask);
		lovedna_game_graphics_GLContext.gl.stencilOp(lovedna_game_graphics_GLContext.currentState.stencilFail,lovedna_game_graphics_GLContext.currentState.stencilDepthFail,lovedna_game_graphics_GLContext.currentState.stencilBothPass);
	}
};
lovedna_game_graphics_GLContext.getTarget = function() {
	return lovedna_game_graphics_GLContext._currentTarget;
};
lovedna_game_graphics_GLContext.pushTarget = function(v) {
	lovedna_game_graphics_GLContext._currentTarget = v;
	lovedna_game_graphics_GLContext._targetStack.push(lovedna_game_graphics_GLContext._currentTarget);
	lovedna_game_graphics_GLContext._currentClear = lovedna_game_graphics_GLContext._clearTargetPool.get();
	lovedna_game_graphics_GLContext._currentClear.gl = lovedna_game_graphics_GLContext.gl;
	lovedna_game_graphics_GLContext._currentClear.target = v;
	lovedna_game_graphics_GLContext._currentClear.enabled = false;
	lovedna_game_graphics_GLContext._clearStack.push(lovedna_game_graphics_GLContext._currentClear);
};
lovedna_game_graphics_GLContext.popTarget = function() {
	if(lovedna_game_graphics_GLContext._targetStack.get_length() > 0) {
		lovedna_game_graphics_GLContext._targetStack.pop();
		lovedna_game_graphics_GLContext._clearStack.pop();
	}
	if(lovedna_game_graphics_GLContext._targetStack.get_length() > 0) {
		lovedna_game_graphics_GLContext._currentTarget = lovedna_game_graphics_GLContext._targetStack.get(-1,true);
		lovedna_game_graphics_GLContext._currentClear = lovedna_game_graphics_GLContext._clearStack.get(-1,true);
	} else {
		lovedna_game_graphics_GLContext._currentTarget = null;
		lovedna_game_graphics_GLContext._currentClear = null;
	}
};
lovedna_game_graphics_GLContext.drawBefore = function() {
	lovedna_game_graphics_GLContext.applyRenderTarget();
};
lovedna_game_graphics_GLContext.drawAfter = function() {
	lovedna_game_graphics_GLContext.gl.activeTexture(33984);
	lovedna_game_graphics_GLContext.gl.bindTexture(3553,null);
	lovedna_game_graphics_GLContext.gl.activeTexture(33985);
	lovedna_game_graphics_GLContext.gl.bindTexture(3553,null);
	lovedna_game_graphics_GLContext.gl.activeTexture(33986);
	lovedna_game_graphics_GLContext.gl.bindTexture(3553,null);
	lovedna_game_graphics_GLContext.gl.bindBuffer(34963,null);
	lovedna_game_graphics_GLContext.gl.bindBuffer(34962,null);
};
lovedna_game_graphics_GLContext.applyRenderTarget = function() {
	var id = -1;
	if(lovedna_game_graphics_GLContext._currentTarget != null) {
		id = lovedna_game_graphics_GLContext._currentTarget.id;
	}
	if(id != lovedna_game_graphics_GLContext._currentTargetID) {
		lovedna_game_graphics_GLContext._currentTargetID = id;
		if(lovedna_game_graphics_GLContext._currentTarget != null) {
			lovedna_game_graphics_GLContext._currentTarget.bindBuffer();
			lovedna_game_graphics_GLContext.viewport(0,0,lovedna_game_graphics_GLContext._currentTarget.width,lovedna_game_graphics_GLContext._currentTarget.height);
		} else {
			lovedna_game_graphics_GLContext.gl.bindFramebuffer(36160,null);
			lovedna_game_graphics_GLContext.viewport(0,0,lovedna_game_graphics_GLContext._width,lovedna_game_graphics_GLContext._height);
		}
		if(lovedna_game_graphics_GLContext._currentClear != null) {
			lovedna_game_graphics_GLContext._currentClear.clear();
		}
	}
};
lovedna_game_graphics_GLContext.prototype = {
	__class__: lovedna_game_graphics_GLContext
};
var lovedna_resource_IResource = function() { };
$hxClasses["lovedna.resource.IResource"] = lovedna_resource_IResource;
lovedna_resource_IResource.__name__ = ["lovedna","resource","IResource"];
lovedna_resource_IResource.prototype = {
	__class__: lovedna_resource_IResource
};
var lovedna_game_graphics_IndexBuffer = function() {
	this.id = lovedna_game_graphics_IndexBuffer._id++;
	this.enabled = false;
	this.type = 5123;
};
$hxClasses["lovedna.game.graphics.IndexBuffer"] = lovedna_game_graphics_IndexBuffer;
lovedna_game_graphics_IndexBuffer.__name__ = ["lovedna","game","graphics","IndexBuffer"];
lovedna_game_graphics_IndexBuffer.__interfaces__ = [lovedna_resource_IResource];
lovedna_game_graphics_IndexBuffer.prototype = {
	setLayouts: function(list) {
		if(this.layouts == null) {
			this.layouts = [];
		} else {
			this.layouts.splice(0,this.layouts.length);
		}
		var len = list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var layout = list[i];
			if(layout == null) {
				haxe_Log.trace("error",{ fileName : "IndexBuffer.hx", lineNumber : 52, className : "lovedna.game.graphics.IndexBuffer", methodName : "setLayouts", customParams : ["layout is null " + i]});
			}
			this.layouts.push(layout);
		}
	}
	,upload: function(list) {
		this.enabled = false;
		if(list != null && list.length > 1) {
			this.enabled = true;
			this._data = list;
			this.length = this._data.length;
		}
	}
	,bind: function() {
		this._time = lovedna_Time.get_now();
		if(this._data != null) {
			if(this._buffer == null) {
				this._buffer = lovedna_game_System.gl.createBuffer();
			}
			lovedna_game_System.gl.bindBuffer(34963,this._buffer);
			lovedna_game_System.gl.bufferData(34963,this._data.length * 2,this.getData(),35044);
			this.length = this._data.length;
			this._data = null;
		} else if(this._buffer != null) {
			if(this != lovedna_game_graphics_IndexBuffer.current) {
				lovedna_game_graphics_IndexBuffer.current = this;
				lovedna_game_System.gl.bindBuffer(34963,this._buffer);
			}
		}
	}
	,unload: function() {
		if(this._buffer != null) {
			lovedna_game_System.gl.deleteBuffer(this._buffer);
			this._buffer = null;
		}
		this._data = null;
	}
	,getData: function() {
		var len = this._data.length;
		var k = lovedna_utils_Helper.intToNextPow2(len);
		var c = lovedna_utils_Helper.pow2Count(k);
		var data = lovedna_game_graphics_IndexBuffer._tempList[c];
		if(data == null) {
			var this1 = new Uint16Array(k);
			data = this1;
			lovedna_game_graphics_IndexBuffer._tempList[c] = data;
		}
		while(len-- > 0) data[len] = this._data[len] & 65535;
		return data;
	}
	,__class__: lovedna_game_graphics_IndexBuffer
};
var lovedna_game_graphics_IndexLayout = function() {
};
$hxClasses["lovedna.game.graphics.IndexLayout"] = lovedna_game_graphics_IndexLayout;
lovedna_game_graphics_IndexLayout.__name__ = ["lovedna","game","graphics","IndexLayout"];
lovedna_game_graphics_IndexLayout.prototype = {
	__class__: lovedna_game_graphics_IndexLayout
};
var lovedna_game_graphics_Program = function(vert,frag) {
	this.id = lovedna_game_graphics_Program._id++;
	this.enabled = false;
	var vs = lovedna_game_System.gl.createShader(35633);
	lovedna_game_System.gl.shaderSource(vs,vert);
	lovedna_game_System.gl.compileShader(vs);
	if(lovedna_game_System.gl.getShaderParameter(vs,35713) == 0) {
		haxe_Log.trace(this.addLineNumber(vert),{ fileName : "Program.hx", lineNumber : 41, className : "lovedna.game.graphics.Program", methodName : "new"});
		haxe_Log.trace("vertex compileShader " + lovedna_game_System.gl.getShaderInfoLog(vs),{ fileName : "Program.hx", lineNumber : 42, className : "lovedna.game.graphics.Program", methodName : "new"});
		return;
	}
	var fs = lovedna_game_System.gl.createShader(35632);
	lovedna_game_System.gl.shaderSource(fs,frag);
	lovedna_game_System.gl.compileShader(fs);
	if(lovedna_game_System.gl.getShaderParameter(fs,35713) == 0) {
		haxe_Log.trace(this.addLineNumber(frag),{ fileName : "Program.hx", lineNumber : 49, className : "lovedna.game.graphics.Program", methodName : "new"});
		haxe_Log.trace("fragment compileShader " + lovedna_game_System.gl.getShaderInfoLog(fs),{ fileName : "Program.hx", lineNumber : 50, className : "lovedna.game.graphics.Program", methodName : "new"});
		return;
	}
	this._glprogram = lovedna_game_System.gl.createProgram();
	lovedna_game_System.gl.attachShader(this._glprogram,vs);
	lovedna_game_System.gl.attachShader(this._glprogram,fs);
	lovedna_game_System.gl.linkProgram(this._glprogram);
	lovedna_game_System.gl.deleteShader(vs);
	lovedna_game_System.gl.deleteShader(fs);
	vs = null;
	fs = null;
	if(lovedna_game_System.gl.getProgramParameter(this._glprogram,35714) == 0) {
		haxe_Log.trace("linkProgram " + lovedna_game_System.gl.getProgramInfoLog(this._glprogram),{ fileName : "Program.hx", lineNumber : 62, className : "lovedna.game.graphics.Program", methodName : "new"});
		return;
	}
	this.enabled = true;
	this._bufferAttribs = new haxe_ds_StringMap();
	this._uniforms = new haxe_ds_StringMap();
	var len = lovedna_game_System.gl.getProgramParameter(this._glprogram,35721);
	var info;
	var name;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		info = lovedna_game_System.gl.getActiveAttrib(this._glprogram,i);
		name = info.name;
		this._bufferAttribs.set(name,new lovedna_game_graphics_ProgramBufferInput(i,lovedna_game_System.gl.getAttribLocation(this._glprogram,name),info,this.id));
	}
	len = lovedna_game_System.gl.getProgramParameter(this._glprogram,35718);
	var index = 0;
	this._uniformCount = 0;
	var _g11 = 0;
	var _g2 = len;
	while(_g11 < _g2) {
		var i1 = _g11++;
		info = lovedna_game_System.gl.getActiveUniform(this._glprogram,i1);
		name = info.name;
		var type = info.type;
		if(type == 35678 || type == 35680) {
			var i2 = new lovedna_game_graphics_ProgramUniformInput(index,lovedna_game_System.gl.getUniformLocation(this._glprogram,name),info,this);
			this._uniforms.set(name,i2);
			++index;
			this._uniformCount++;
		} else {
			var listid = name.indexOf("[");
			if(listid > 0) {
				name = HxOverrides.substr(name,0,listid);
			}
			var i3 = new lovedna_game_graphics_ProgramUniformInput(-1,lovedna_game_System.gl.getUniformLocation(this._glprogram,name),info,this);
			this._uniforms.set(name,i3);
			this._uniformCount++;
		}
	}
	this._successList = new lovedna_ds_FastArray();
};
$hxClasses["lovedna.game.graphics.Program"] = lovedna_game_graphics_Program;
lovedna_game_graphics_Program.__name__ = ["lovedna","game","graphics","Program"];
lovedna_game_graphics_Program.prototype = {
	bind: function() {
		this._time = lovedna_Time.get_now();
		if(!this.enabled) {
			return;
		}
		this._success = 0;
		this._successList.clear();
		var v = this._uniforms.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this._successList.push(v1);
		}
		if(lovedna_game_graphics_Program.current == this) {
			return;
		}
		lovedna_game_System.gl.useProgram(this._glprogram);
		lovedna_game_graphics_Program.current = this;
	}
	,getBufferInput: function(name) {
		if(this._bufferAttribs == null) {
			return null;
		}
		return this._bufferAttribs.get(name);
	}
	,getUniformInput: function(name) {
		return this._uniforms.get(name);
	}
	,checkUniformFail: function() {
		var len = this._successList.get_length();
		while(len-- > 0) haxe_Log.trace(this._successList.get(len).name,{ fileName : "Program.hx", lineNumber : 147, className : "lovedna.game.graphics.Program", methodName : "checkUniformFail"});
		return this._uniformCount - this._success;
	}
	,uploadUniform: function(v) {
		this._success++;
		this._successList.remove(v);
	}
	,addLineNumber: function(s) {
		var out = "";
		var line = new lovedna_ds_StringLine(s,true);
		line.set_position(0);
		var len = line.get_length();
		var count = -(len + "").length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			out += lovedna_utils_Helper.stringFill(i + 1 + "",count) + ":\t" + line.readLine() + "\n";
		}
		return out;
	}
	,__class__: lovedna_game_graphics_Program
};
var lovedna_game_graphics_ProgramBufferInput = function(id,location,info,version) {
	this.id = id;
	this.location = location;
	this.name = info.name;
	this.type = info.type;
	this.size = info.size;
	this.version = version;
};
$hxClasses["lovedna.game.graphics.ProgramBufferInput"] = lovedna_game_graphics_ProgramBufferInput;
lovedna_game_graphics_ProgramBufferInput.__name__ = ["lovedna","game","graphics","ProgramBufferInput"];
lovedna_game_graphics_ProgramBufferInput.prototype = {
	__class__: lovedna_game_graphics_ProgramBufferInput
};
var lovedna_math_Matrix44 = function() {
	this.identity();
};
$hxClasses["lovedna.math.Matrix44"] = lovedna_math_Matrix44;
lovedna_math_Matrix44.__name__ = ["lovedna","math","Matrix44"];
lovedna_math_Matrix44.__interfaces__ = [lovedna_ds_IFillArray];
lovedna_math_Matrix44.__properties__ = {get_temp:"get_temp"};
lovedna_math_Matrix44.get_temp = function() {
	return lovedna_math_Matrix44._pool.get();
};
lovedna_math_Matrix44.prototype = {
	copy: function(target) {
		if(target == null) {
			return this;
		}
		return this.set(target.m0,target.m1,target.m2,target.m3,target.m4,target.m5,target.m6,target.m7,target.m8,target.m9,target.m10,target.m11,target.m12,target.m13,target.m14,target.m15);
	}
	,clone: function() {
		return new lovedna_math_Matrix44().copy(this);
	}
	,set: function(v00,v10,v20,v30,v01,v11,v21,v31,v02,v12,v22,v32,v03,v13,v23,v33) {
		this.m0 = v00;
		this.m1 = v10;
		this.m2 = v20;
		this.m3 = v30;
		this.m4 = v01;
		this.m5 = v11;
		this.m6 = v21;
		this.m7 = v31;
		this.m8 = v02;
		this.m9 = v12;
		this.m10 = v22;
		this.m11 = v32;
		this.m12 = v03;
		this.m13 = v13;
		this.m14 = v23;
		this.m15 = v33;
		this.dirty();
		return this;
	}
	,identity: function() {
		return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	}
	,append: function(value,prepend) {
		if(prepend == null) {
			prepend = false;
		}
		if(value == null) {
			return this;
		}
		var mata = this;
		var matb = value;
		if(prepend) {
			mata = value;
			matb = this;
		}
		var Mm0 = mata.m0 * matb.m0 + mata.m4 * matb.m1 + mata.m8 * matb.m2 + mata.m12 * matb.m3;
		var Mm4 = mata.m0 * matb.m4 + mata.m4 * matb.m5 + mata.m8 * matb.m6 + mata.m12 * matb.m7;
		var Mm8 = mata.m0 * matb.m8 + mata.m4 * matb.m9 + mata.m8 * matb.m10 + mata.m12 * matb.m11;
		var Mm12 = mata.m0 * matb.m12 + mata.m4 * matb.m13 + mata.m8 * matb.m14 + mata.m12 * matb.m15;
		var Mm1 = mata.m1 * matb.m0 + mata.m5 * matb.m1 + mata.m9 * matb.m2 + mata.m13 * matb.m3;
		var Mm5 = mata.m1 * matb.m4 + mata.m5 * matb.m5 + mata.m9 * matb.m6 + mata.m13 * matb.m7;
		var Mm9 = mata.m1 * matb.m8 + mata.m5 * matb.m9 + mata.m9 * matb.m10 + mata.m13 * matb.m11;
		var Mm13 = mata.m1 * matb.m12 + mata.m5 * matb.m13 + mata.m9 * matb.m14 + mata.m13 * matb.m15;
		var Mm2 = mata.m2 * matb.m0 + mata.m6 * matb.m1 + mata.m10 * matb.m2 + mata.m14 * matb.m3;
		var Mm6 = mata.m2 * matb.m4 + mata.m6 * matb.m5 + mata.m10 * matb.m6 + mata.m14 * matb.m7;
		var Mm10 = mata.m2 * matb.m8 + mata.m6 * matb.m9 + mata.m10 * matb.m10 + mata.m14 * matb.m11;
		var Mm14 = mata.m2 * matb.m12 + mata.m6 * matb.m13 + mata.m10 * matb.m14 + mata.m14 * matb.m15;
		var Mm3 = mata.m3 * matb.m0 + mata.m7 * matb.m1 + mata.m11 * matb.m2 + mata.m15 * matb.m3;
		var Mm7 = mata.m3 * matb.m4 + mata.m7 * matb.m5 + mata.m11 * matb.m6 + mata.m15 * matb.m7;
		var Mm11 = mata.m3 * matb.m8 + mata.m7 * matb.m9 + mata.m11 * matb.m10 + mata.m15 * matb.m11;
		var Mm15 = mata.m3 * matb.m12 + mata.m7 * matb.m13 + mata.m11 * matb.m14 + mata.m15 * matb.m15;
		return this.set(Mm0,Mm1,Mm2,Mm3,Mm4,Mm5,Mm6,Mm7,Mm8,Mm9,Mm10,Mm11,Mm12,Mm13,Mm14,Mm15);
	}
	,inverse: function() {
		var l_det = this.getDeterminant();
		if(l_det == 0) {
			throw new js__$Boot_HaxeError("non-invertible matrix");
		}
		var inv_det = 1.0 / l_det;
		var Mm0 = this.m9 * this.m14 * this.m7 - this.m13 * this.m10 * this.m7 + this.m13 * this.m6 * this.m11 - this.m5 * this.m14 * this.m11 - this.m9 * this.m6 * this.m15 + this.m5 * this.m10 * this.m15;
		var Mm4 = this.m12 * this.m10 * this.m7 - this.m8 * this.m14 * this.m7 - this.m12 * this.m6 * this.m11 + this.m4 * this.m14 * this.m11 + this.m8 * this.m6 * this.m15 - this.m4 * this.m10 * this.m15;
		var Mm8 = this.m8 * this.m13 * this.m7 - this.m12 * this.m9 * this.m7 + this.m12 * this.m5 * this.m11 - this.m4 * this.m13 * this.m11 - this.m8 * this.m5 * this.m15 + this.m4 * this.m9 * this.m15;
		var Mm12 = this.m12 * this.m9 * this.m6 - this.m8 * this.m13 * this.m6 - this.m12 * this.m5 * this.m10 + this.m4 * this.m13 * this.m10 + this.m8 * this.m5 * this.m14 - this.m4 * this.m9 * this.m14;
		var Mm1 = this.m13 * this.m10 * this.m3 - this.m9 * this.m14 * this.m3 - this.m13 * this.m2 * this.m11 + this.m1 * this.m14 * this.m11 + this.m9 * this.m2 * this.m15 - this.m1 * this.m10 * this.m15;
		var Mm5 = this.m8 * this.m14 * this.m3 - this.m12 * this.m10 * this.m3 + this.m12 * this.m2 * this.m11 - this.m0 * this.m14 * this.m11 - this.m8 * this.m2 * this.m15 + this.m0 * this.m10 * this.m15;
		var Mm9 = this.m12 * this.m9 * this.m3 - this.m8 * this.m13 * this.m3 - this.m12 * this.m1 * this.m11 + this.m0 * this.m13 * this.m11 + this.m8 * this.m1 * this.m15 - this.m0 * this.m9 * this.m15;
		var Mm13 = this.m8 * this.m13 * this.m2 - this.m12 * this.m9 * this.m2 + this.m12 * this.m1 * this.m10 - this.m0 * this.m13 * this.m10 - this.m8 * this.m1 * this.m14 + this.m0 * this.m9 * this.m14;
		var Mm2 = this.m5 * this.m14 * this.m3 - this.m13 * this.m6 * this.m3 + this.m13 * this.m2 * this.m7 - this.m1 * this.m14 * this.m7 - this.m5 * this.m2 * this.m15 + this.m1 * this.m6 * this.m15;
		var Mm6 = this.m12 * this.m6 * this.m3 - this.m4 * this.m14 * this.m3 - this.m12 * this.m2 * this.m7 + this.m0 * this.m14 * this.m7 + this.m4 * this.m2 * this.m15 - this.m0 * this.m6 * this.m15;
		var Mm10 = this.m4 * this.m13 * this.m3 - this.m12 * this.m5 * this.m3 + this.m12 * this.m1 * this.m7 - this.m0 * this.m13 * this.m7 - this.m4 * this.m1 * this.m15 + this.m0 * this.m5 * this.m15;
		var Mm14 = this.m12 * this.m5 * this.m2 - this.m4 * this.m13 * this.m2 - this.m12 * this.m1 * this.m6 + this.m0 * this.m13 * this.m6 + this.m4 * this.m1 * this.m14 - this.m0 * this.m5 * this.m14;
		var Mm3 = this.m9 * this.m6 * this.m3 - this.m5 * this.m10 * this.m3 - this.m9 * this.m2 * this.m7 + this.m1 * this.m10 * this.m7 + this.m5 * this.m2 * this.m11 - this.m1 * this.m6 * this.m11;
		var Mm7 = this.m4 * this.m10 * this.m3 - this.m8 * this.m6 * this.m3 + this.m8 * this.m2 * this.m7 - this.m0 * this.m10 * this.m7 - this.m4 * this.m2 * this.m11 + this.m0 * this.m6 * this.m11;
		var Mm11 = this.m8 * this.m5 * this.m3 - this.m4 * this.m9 * this.m3 - this.m8 * this.m1 * this.m7 + this.m0 * this.m9 * this.m7 + this.m4 * this.m1 * this.m11 - this.m0 * this.m5 * this.m11;
		var Mm15 = this.m4 * this.m9 * this.m2 - this.m8 * this.m5 * this.m2 + this.m8 * this.m1 * this.m6 - this.m0 * this.m9 * this.m6 - this.m4 * this.m1 * this.m10 + this.m0 * this.m5 * this.m10;
		this.m0 = Mm0 * inv_det;
		this.m4 = Mm4 * inv_det;
		this.m8 = Mm8 * inv_det;
		this.m12 = Mm12 * inv_det;
		this.m1 = Mm1 * inv_det;
		this.m5 = Mm5 * inv_det;
		this.m9 = Mm9 * inv_det;
		this.m13 = Mm13 * inv_det;
		this.m2 = Mm2 * inv_det;
		this.m6 = Mm6 * inv_det;
		this.m10 = Mm10 * inv_det;
		this.m14 = Mm14 * inv_det;
		this.m3 = Mm3 * inv_det;
		this.m7 = Mm7 * inv_det;
		this.m11 = Mm11 * inv_det;
		this.m15 = Mm15 * inv_det;
		this.dirty();
		return this;
	}
	,setProjection: function(near,far,fovy,aspectRatio) {
		if(aspectRatio == null) {
			aspectRatio = 1.78;
		}
		if(fovy == null) {
			fovy = 60;
		}
		if(far == null) {
			far = 1000;
		}
		if(near == null) {
			near = 0.1;
		}
		var l_fd = 1.0 / Math.tan(lovedna_utils_Helper.angleToRadian(fovy) * 0.5);
		var l_a1 = (far + near) / (near - far);
		var l_a2 = 2 * far * near / (near - far);
		this.m0 = l_fd / aspectRatio;
		this.m1 = 0;
		this.m2 = 0;
		this.m3 = 0;
		this.m4 = 0;
		this.m5 = l_fd;
		this.m6 = 0;
		this.m7 = 0;
		this.m8 = 0;
		this.m9 = 0;
		this.m10 = l_a1;
		this.m11 = -1;
		this.m12 = 0;
		this.m13 = 0;
		this.m14 = l_a2;
		this.m15 = 0;
		this.dirty();
		return this;
	}
	,setFrustum: function(left,right,bottom,top,near,far) {
		var x = 2.0 * near / (right - left);
		var y = 2.0 * near / (top - bottom);
		var a = (right + left) / (right - left);
		var b = (top + bottom) / (top - bottom);
		var l_a1 = (far + near) / (near - far);
		var l_a2 = 2 * far * near / (near - far);
		this.m0 = x;
		this.m1 = 0;
		this.m2 = 0;
		this.m3 = 0;
		this.m4 = 0;
		this.m5 = y;
		this.m6 = 0;
		this.m7 = 0;
		this.m8 = a;
		this.m9 = b;
		this.m10 = l_a1;
		this.m11 = -1;
		this.m12 = 0;
		this.m13 = 0;
		this.m14 = l_a2;
		this.m15 = 0;
		this.dirty();
		return this;
	}
	,setOrtho: function(left,right,bottom,top,near,far) {
		var x_orth = 2 / (right - left);
		var y_orth = 2 / (top - bottom);
		var z_orth = -2 / (far - near);
		var tx = -(right + left) / (right - left);
		var ty = -(top + bottom) / (top - bottom);
		var tz = -(far + near) / (far - near);
		this.m0 = x_orth;
		this.m1 = 0;
		this.m2 = 0;
		this.m3 = 0;
		this.m4 = 0;
		this.m5 = y_orth;
		this.m6 = 0;
		this.m7 = 0;
		this.m8 = 0;
		this.m9 = 0;
		this.m10 = z_orth;
		this.m11 = 0;
		this.m12 = tx;
		this.m13 = ty;
		this.m14 = tz;
		this.m15 = 1;
		this.dirty();
		return this;
	}
	,setOrtho2D: function(x,y,width,height,near,far) {
		if(far == null) {
			far = 1;
		}
		if(near == null) {
			near = 0;
		}
		return this.setOrtho(x,x + width,y,y + height,near,far);
	}
	,lookAt: function(position,target,up) {
		if(target == null) {
			target = lovedna_math_Vector3.get_temp().set(0,0,0);
		}
		if(up == null) {
			up = lovedna_math_Vector3.get_up();
		}
		var tmpVec = lovedna_math_Vector3.get_temp();
		var l_vex = lovedna_math_Vector3.get_temp();
		var l_vey = lovedna_math_Vector3.get_temp();
		var l_vez = lovedna_math_Vector3.get_temp();
		var direction = tmpVec.copy(target).sub(position);
		l_vez.copy(direction).normalize();
		l_vex.copy(direction).normalize();
		l_vex.cross(up).normalize();
		l_vey.copy(l_vex).cross(l_vez).normalize();
		this.identity();
		this.m0 = l_vex.x;
		this.m4 = l_vex.y;
		this.m8 = l_vex.z;
		this.m1 = l_vey.x;
		this.m5 = l_vey.y;
		this.m9 = l_vey.z;
		this.m2 = -l_vez.x;
		this.m6 = -l_vez.y;
		this.m10 = -l_vez.z;
		this.appendTranslation(tmpVec.copy(position).scale(-1));
		return this;
	}
	,setTranslation: function(value) {
		this.m12 = value.x;
		this.m13 = value.y;
		this.m14 = value.z;
		this.dirty();
		return this;
	}
	,getTranslation: function(target) {
		if(target == null) {
			target = lovedna_math_Vector3.get_temp();
		}
		return target.set(this.m12,this.m13,this.m14);
	}
	,setScale: function(value) {
		this.m0 = value.x;
		this.m5 = value.y;
		this.m10 = value.z;
		this.dirty();
		return this;
	}
	,getScale: function(target) {
		if(target == null) {
			target = lovedna_math_Vector3.get_temp();
		}
		return target.set(this.getScaleX(),this.getScaleY(),this.getScaleZ());
	}
	,setRotation: function(value) {
		var self = this;
		var xx = value.x * value.x;
		var xy = value.x * value.y;
		var xz = value.x * value.z;
		var xw = value.x * value.w;
		var yy = value.y * value.y;
		var yz = value.y * value.z;
		var yw = value.y * value.w;
		var zz = value.z * value.z;
		var zw = value.z * value.w;
		self.m0 = 1 - 2 * (yy + zz);
		self.m1 = 2 * (xy + zw);
		self.m2 = 2 * (xz - yw);
		self.m4 = 2 * (xy - zw);
		self.m5 = 1 - 2 * (xx + zz);
		self.m6 = 2 * (yz + xw);
		self.m8 = 2 * (xz + yw);
		self.m9 = 2 * (yz - xw);
		self.m10 = 1 - 2 * (xx + yy);
		this.dirty();
		return self;
	}
	,getRotation: function(target) {
		if(target == null) {
			target = lovedna_math_Quaternion.get_temp();
		}
		var rmatrix = this.getRotationMatrix();
		return target.setFromAxes(rmatrix.m0,rmatrix.m4,rmatrix.m8,rmatrix.m1,rmatrix.m5,rmatrix.m9,rmatrix.m2,rmatrix.m6,rmatrix.m10);
	}
	,getRotationMatrix: function(target) {
		if(target == null) {
			target = lovedna_math_Matrix44.get_temp();
		}
		var xs = this.m0 * this.m1 * this.m2 * this.m3 < 0 ? -1 : 1;
		var ys = this.m4 * this.m5 * this.m6 * this.m7 < 0 ? -1 : 1;
		var zs = this.m8 * this.m9 * this.m10 * this.m11 < 0 ? -1 : 1;
		var sqrt = Math.sqrt;
		var sx = xs * sqrt(this.m0 * this.m0 + this.m1 * this.m1 + this.m2 * this.m2);
		var sy = ys * sqrt(this.m4 * this.m4 + this.m5 * this.m5 + this.m6 * this.m6);
		var sz = zs * sqrt(this.m8 * this.m8 + this.m9 * this.m9 + this.m10 * this.m10);
		return target.set(this.m0 / sx,this.m1 / sx,this.m2 / sx,0,this.m4 / sy,this.m5 / sy,this.m6 / sy,0,this.m8 / sz,this.m9 / sz,this.m10 / sz,0,0,0,0,1);
	}
	,appendTranslation: function(value) {
		if(!value.isZero()) {
			this.append(lovedna_math_Matrix44.get_temp().identity().setTranslation(value));
		}
		return this;
	}
	,appendScale: function(value) {
		if(!value.isOne()) {
			this.append(lovedna_math_Matrix44.get_temp().identity().setScale(value));
		}
		return this;
	}
	,appendRotation: function(value) {
		if(!value.isZero()) {
			this.append(lovedna_math_Matrix44.get_temp().identity().setRotation(value));
		}
		return this;
	}
	,appendTRS: function(translation,rotation,scale) {
		if(translation != null) {
			this.appendTranslation(translation);
		}
		if(rotation != null) {
			this.appendRotation(rotation);
		}
		if(scale != null) {
			this.appendScale(scale);
		}
		return this;
	}
	,setTRS: function(translation,rotation,scale) {
		return this.identity().appendTRS(translation,rotation,scale);
	}
	,getScaleXSquared: function() {
		return this.m0 * this.m0 + this.m4 * this.m4 + this.m8 * this.m8;
	}
	,getScaleYSquared: function() {
		return this.m1 * this.m1 + this.m5 * this.m5 + this.m9 * this.m9;
	}
	,getScaleZSquared: function() {
		return this.m2 * this.m2 + this.m6 * this.m6 + this.m10 * this.m10;
	}
	,getScaleX: function() {
		if(lovedna_utils_Helper.isZero(this.m4) && lovedna_utils_Helper.isZero(this.m8)) {
			return lovedna_utils_Helper.abs(this.m0);
		} else {
			return Math.sqrt(this.getScaleXSquared());
		}
	}
	,getScaleY: function() {
		if(lovedna_utils_Helper.isZero(this.m1) && lovedna_utils_Helper.isZero(this.m9)) {
			return lovedna_utils_Helper.abs(this.m5);
		} else {
			return Math.sqrt(this.getScaleYSquared());
		}
	}
	,getScaleZ: function() {
		if(lovedna_utils_Helper.isZero(this.m2) && lovedna_utils_Helper.isZero(this.m6)) {
			return lovedna_utils_Helper.abs(this.m10);
		} else {
			return Math.sqrt(this.getScaleZSquared());
		}
	}
	,transpose: function() {
		return this;
	}
	,transformVector: function(v,projection) {
		if(projection == null) {
			projection = false;
		}
		var x = v.x;
		var y = v.y;
		var z = v.z;
		var inv_w = 1.0;
		if(projection) {
			inv_w = 1.0 / (x * this.m3 + y * this.m7 + z * this.m11 + this.m15);
		}
		var xx = (x * this.m0 + y * this.m4 + z * this.m8 + this.m12) * inv_w;
		var yy = (x * this.m1 + y * this.m5 + z * this.m9 + this.m13) * inv_w;
		var zz = (x * this.m2 + y * this.m6 + z * this.m10 + this.m14) * inv_w;
		return v.set(xx,yy,zz);
	}
	,fillFloat32Array: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		list[offset++] = this.m0;
		list[offset++] = this.m1;
		list[offset++] = this.m2;
		list[offset++] = this.m3;
		list[offset++] = this.m4;
		list[offset++] = this.m5;
		list[offset++] = this.m6;
		list[offset++] = this.m7;
		list[offset++] = this.m8;
		list[offset++] = this.m9;
		list[offset++] = this.m10;
		list[offset++] = this.m11;
		list[offset++] = this.m12;
		list[offset++] = this.m13;
		list[offset++] = this.m14;
		list[offset++] = this.m15;
	}
	,toString: function() {
		return "Matrix44\n[" + this.m0 + " | " + this.m4 + " | " + this.m8 + " | " + this.m12 + "]\n" + "[" + this.m1 + " | " + this.m5 + " | " + this.m9 + " | " + this.m13 + "]\n" + "[" + this.m2 + " | " + this.m6 + " | " + this.m10 + " | " + this.m14 + "]\n" + "[" + this.m3 + " | " + this.m7 + " | " + this.m11 + " | " + this.m15 + "]\n";
	}
	,fillArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		list[offset++] = this.m0;
		list[offset++] = this.m1;
		list[offset++] = this.m2;
		list[offset++] = this.m3;
		list[offset++] = this.m4;
		list[offset++] = this.m5;
		list[offset++] = this.m6;
		list[offset++] = this.m7;
		list[offset++] = this.m8;
		list[offset++] = this.m9;
		list[offset++] = this.m10;
		list[offset++] = this.m11;
		list[offset++] = this.m12;
		list[offset++] = this.m13;
		list[offset++] = this.m14;
		list[offset++] = this.m15;
	}
	,fromArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(list.length < offset + 16) {
			return this;
		}
		this.m0 = list[offset++];
		this.m1 = list[offset++];
		this.m2 = list[offset++];
		this.m3 = list[offset++];
		this.m4 = list[offset++];
		this.m5 = list[offset++];
		this.m6 = list[offset++];
		this.m7 = list[offset++];
		this.m8 = list[offset++];
		this.m9 = list[offset++];
		this.m10 = list[offset++];
		this.m11 = list[offset++];
		this.m12 = list[offset++];
		this.m13 = list[offset++];
		this.m14 = list[offset++];
		this.m15 = list[offset++];
		return this;
	}
	,getDeterminant: function() {
		return this.m3 * this.m6 * this.m9 * this.m12 - this.m2 * this.m7 * this.m9 * this.m12 - this.m3 * this.m5 * this.m10 * this.m12 + this.m1 * this.m7 * this.m10 * this.m12 + this.m2 * this.m5 * this.m11 * this.m12 - this.m1 * this.m6 * this.m11 * this.m12 - this.m3 * this.m6 * this.m8 * this.m13 + this.m2 * this.m7 * this.m8 * this.m13 + this.m3 * this.m4 * this.m10 * this.m13 - this.m0 * this.m7 * this.m10 * this.m13 - this.m2 * this.m4 * this.m11 * this.m13 + this.m0 * this.m6 * this.m11 * this.m13 + this.m3 * this.m5 * this.m8 * this.m14 - this.m1 * this.m7 * this.m8 * this.m14 - this.m3 * this.m4 * this.m9 * this.m14 + this.m0 * this.m7 * this.m9 * this.m14 + this.m1 * this.m4 * this.m11 * this.m14 - this.m0 * this.m5 * this.m11 * this.m14 - this.m2 * this.m5 * this.m8 * this.m15 + this.m1 * this.m6 * this.m8 * this.m15 + this.m2 * this.m4 * this.m9 * this.m15 - this.m0 * this.m6 * this.m9 * this.m15 - this.m1 * this.m4 * this.m10 * this.m15 + this.m0 * this.m5 * this.m10 * this.m15;
	}
	,dirty: function() {
		this._dirty = true;
	}
	,get_data: function() {
		if(this._data == null) {
			var this1 = new Float32Array(16);
			this._data = this1;
		}
		if(this._dirty) {
			var offset = 0;
			this._data[offset++] = this.m0;
			this._data[offset++] = this.m1;
			this._data[offset++] = this.m2;
			this._data[offset++] = this.m3;
			this._data[offset++] = this.m4;
			this._data[offset++] = this.m5;
			this._data[offset++] = this.m6;
			this._data[offset++] = this.m7;
			this._data[offset++] = this.m8;
			this._data[offset++] = this.m9;
			this._data[offset++] = this.m10;
			this._data[offset++] = this.m11;
			this._data[offset++] = this.m12;
			this._data[offset++] = this.m13;
			this._data[offset++] = this.m14;
			this._data[offset++] = this.m15;
		}
		return this._data;
	}
	,__class__: lovedna_math_Matrix44
	,__properties__: {get_data:"get_data"}
};
var lovedna_game_graphics_ProgramUniformData = function() {
	this._type = -1;
	this.enabled = false;
	this._dirty = true;
};
$hxClasses["lovedna.game.graphics.ProgramUniformData"] = lovedna_game_graphics_ProgramUniformData;
lovedna_game_graphics_ProgramUniformData.__name__ = ["lovedna","game","graphics","ProgramUniformData"];
lovedna_game_graphics_ProgramUniformData.prototype = {
	getInt: function() {
		return this._intValue;
	}
	,setInt: function(value) {
		if(this._intValue == value) {
			return this;
		}
		this._intValue = value;
		this.setType(1);
		return this;
	}
	,getFloat: function() {
		return this._floatValue;
	}
	,setFloat: function(value) {
		if(this._floatValue == value) {
			return this;
		}
		this._floatValue = value;
		this.setType(2);
		return this;
	}
	,setFloatArray: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		if(this._floatArrayValue == value) {
			return this;
		}
		this._floatArrayValue = value;
		this.setType(3);
		return this;
	}
	,getFloat2: function() {
		return this._float2Value;
	}
	,setFloat2: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		if(this._float2Value == value) {
			return this;
		}
		this._float2Value = value;
		this.setType(4);
		return this;
	}
	,getFloat3: function() {
		return this._float3Value;
	}
	,setFloat3: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		if(this._float3Value == value) {
			return this;
		}
		this._float3Value = value;
		this.setType(5);
		return this;
	}
	,getFloat4: function() {
		return this._float4Value;
	}
	,setFloat4: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		if(this._float4Value == value) {
			return this;
		}
		this._float4Value = value;
		this.setType(6);
		return this;
	}
	,setFloat4Array: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		this._dirty = true;
		if(this._float4ArrayValue == value) {
			return this;
		}
		this._float4ArrayValue = value;
		this.setType(11);
		return this;
	}
	,getMatrix: function() {
		return this._matrix4Value;
	}
	,setMatrix: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		this._dirty = true;
		if(this._matrix4Value == value) {
			return this;
		}
		this._matrix4Value = value;
		this.setType(7);
		return this;
	}
	,setMatrixHandler: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		this._matrix4HandlerValue = value;
		this.setType(10);
		return this;
	}
	,setMatrixArray: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		this._dirty = true;
		if(this._matrix4ArrayValue == value) {
			return this;
		}
		this._matrix4ArrayValue = value;
		this.setType(8);
		return this;
	}
	,setTexture: function(value) {
		if(this._texture == value) {
			return this;
		}
		this._texture = value;
		if(this._texture == null) {
			throw new js__$Boot_HaxeError(this.name + " value error ");
		}
		this.setType(9);
		return this;
	}
	,bind: function(input) {
		if(input == null) {
			haxe_Log.trace(this.name + " input null",{ fileName : "ProgramUniformData.hx", lineNumber : 186, className : "lovedna.game.graphics.ProgramUniformData", methodName : "bind"});
			return true;
		}
		if(this._type < 0) {
			haxe_Log.trace(this.name + " type is error",{ fileName : "ProgramUniformData.hx", lineNumber : 191, className : "lovedna.game.graphics.ProgramUniformData", methodName : "bind"});
			return true;
		}
		if(input != this._input) {
			this._input = input;
			if(this._input != null) {
				this._size = this._input.size;
				this.enabled = true;
			} else {
				this._size = -1;
			}
		}
		if(this._size < 0) {
			haxe_Log.trace(this.name + " size is " + this._size,{ fileName : "ProgramUniformData.hx", lineNumber : 209, className : "lovedna.game.graphics.ProgramUniformData", methodName : "bind"});
			return true;
		}
		if(this._handler == null || this._typeDirty) {
			this.bindType();
		}
		if(this._handler == null) {
			haxe_Log.trace(this.name + " handler is null ",{ fileName : "ProgramUniformData.hx", lineNumber : 218, className : "lovedna.game.graphics.ProgramUniformData", methodName : "bind"});
			this._type = -1;
			return true;
		}
		var success = this._handler();
		var tmp = !success;
		this._typeDirty = false;
		this._input = null;
		return success;
	}
	,setType: function(type) {
		this._type = type;
		this.enabled = true;
		this._typeDirty = true;
		this._dirty = true;
	}
	,bindType: function() {
		var _g = this._type;
		switch(_g) {
		case 1:
			this._handler = $bind(this,this.bindInt);
			break;
		case 2:
			this._handler = $bind(this,this.bindFloat);
			break;
		case 3:
			this._handler = $bind(this,this.bindFloatArray);
			break;
		case 4:
			this._handler = $bind(this,this.bindFloat2);
			break;
		case 5:
			this._handler = $bind(this,this.bindFloat3);
			break;
		case 6:
			this._handler = $bind(this,this.bindFloat4);
			break;
		case 7:
			this._handler = $bind(this,this.bindMatrix4);
			break;
		case 8:
			this._handler = $bind(this,this.bindMatrix4Array);
			break;
		case 9:
			this._handler = $bind(this,this.bindTexture);
			break;
		case 10:
			this._handler = $bind(this,this.bindMatrix4Handler);
			break;
		case 11:
			this._handler = $bind(this,this.bindFloat4Array);
			break;
		}
	}
	,bindInt: function() {
		lovedna_game_System.gl.uniform1i(this._input.location,this._intValue);
		return true;
	}
	,bindFloat: function() {
		lovedna_game_System.gl.uniform1f(this._input.location,this._floatValue);
		return true;
	}
	,bindFloat2: function() {
		lovedna_game_System.gl.uniform2f(this._input.location,this._float2Value.x,this._float2Value.y);
		return true;
	}
	,bindFloat3: function() {
		lovedna_game_System.gl.uniform3f(this._input.location,this._float3Value.x,this._float3Value.y,this._float3Value.z);
		return true;
	}
	,bindFloat4: function() {
		lovedna_game_System.gl.uniform4f(this._input.location,this._float4Value.x,this._float4Value.y,this._float4Value.z,this._float4Value.w);
		return true;
	}
	,bindFloatArray: function() {
		var len = this._floatArrayValue.length;
		if(this._float32Array == null || len > this._float32Array.length) {
			var this1 = new Float32Array(len);
			this._float32Array = this1;
		}
		if(this._dirty) {
			this._dirty = false;
			while(len-- > 0) this._float32Array[len] = this._floatArrayValue[len];
		}
		lovedna_game_System.gl.uniform1fv(this._input.location,this._size,this._float32Array);
		return true;
	}
	,bindFloat4Array: function() {
		var len = this._float4ArrayValue.length;
		if(this._float32Array == null || len * 4 > this._float32Array.length) {
			var this1 = new Float32Array(len * 4);
			this._float32Array = this1;
		}
		if(this._dirty) {
			this._dirty = false;
			while(len-- > 0) {
				var offset = len * 4;
				var f4 = this._float4ArrayValue[len];
				if(f4 == null) {
					haxe_Log.trace("warn",{ fileName : "ProgramUniformData.hx", lineNumber : 331, className : "lovedna.game.graphics.ProgramUniformData", methodName : "bindFloat4Array", customParams : ["list " + len + " is null"]});
					return false;
				}
				this._float32Array[offset] = f4.x;
				this._float32Array[offset + 1] = f4.y;
				this._float32Array[offset + 2] = f4.z;
				this._float32Array[offset + 3] = f4.w;
			}
		}
		lovedna_game_System.gl.uniform4fv(this._input.location,this._size,this._float32Array);
		return true;
	}
	,bindMatrix4: function() {
		lovedna_game_System.gl.uniformMatrix4fv(this._input.location,this._size,false,this._matrix4Value.get_data());
		return true;
	}
	,bindMatrix4Handler: function() {
		var mat = this._matrix4HandlerValue();
		lovedna_game_System.gl.uniformMatrix4fv(this._input.location,this._size,false,mat.get_data());
		return true;
	}
	,bindMatrix4Array: function() {
		var len = this._matrix4ArrayValue.length;
		if(this._float32Array == null || len * 16 > this._float32Array.length) {
			var this1 = new Float32Array(len * 16);
			this._float32Array = this1;
		}
		if(this._dirty) {
			this._dirty = false;
			while(len-- > 0) {
				var mat4 = this._matrix4ArrayValue[len];
				if(mat4 == null) {
					mat4 = lovedna_game_graphics_ProgramUniformData.defaultMat44;
				}
				var start = len * 16;
				mat4.fillFloat32Array(this._float32Array,start);
			}
		}
		lovedna_game_System.gl.uniformMatrix4fv(this._input.location,this._matrix4ArrayValue.length,false,this._float32Array);
		return true;
	}
	,bindTexture: function() {
		if(!this._texture.bind(this._input.id)) {
			return false;
		}
		lovedna_game_System.gl.uniform1i(this._input.location,this._input.id);
		return true;
	}
	,__class__: lovedna_game_graphics_ProgramUniformData
};
var lovedna_game_graphics_ProgramUniformInput = function(id,location,info,program) {
	this.id = id;
	this.location = location;
	this._info = info;
	this.name = info.name;
	this.type = info.type;
	this.size = info.size;
	this._program = program;
	this.set_success(false);
};
$hxClasses["lovedna.game.graphics.ProgramUniformInput"] = lovedna_game_graphics_ProgramUniformInput;
lovedna_game_graphics_ProgramUniformInput.__name__ = ["lovedna","game","graphics","ProgramUniformInput"];
lovedna_game_graphics_ProgramUniformInput.prototype = {
	toString: function() {
		return this.name + " " + this.type + " " + this.size;
	}
	,set_success: function(v) {
		if(!v) {
			return v;
		}
		this._program.uploadUniform(this);
		return v;
	}
	,__class__: lovedna_game_graphics_ProgramUniformInput
	,__properties__: {set_success:"set_success"}
};
var lovedna_game_graphics_Texture = function() {
	this.enabled = false;
	this.id = lovedna_game_graphics_Texture._id++;
	this.params = new lovedna_game_graphics_TextureParams();
};
$hxClasses["lovedna.game.graphics.Texture"] = lovedna_game_graphics_Texture;
lovedna_game_graphics_Texture.__name__ = ["lovedna","game","graphics","Texture"];
lovedna_game_graphics_Texture.__interfaces__ = [lovedna_resource_IResource];
lovedna_game_graphics_Texture.prototype = {
	unload: function() {
		this.enabled = false;
		this.data = null;
	}
	,setData: function(v) {
		this.data = v;
		this.enabled = true;
		this._time = lovedna_Time.get_now();
	}
	,bind: function(location) {
		if(location == null) {
			location = 0;
		}
		this._time = lovedna_Time.get_now();
		return false;
	}
	,toString: function() {
		return "Texture " + this.id + "(" + this.width + "," + this.height + ")";
	}
	,__class__: lovedna_game_graphics_Texture
};
var lovedna_game_graphics_Texture2D = function() {
	lovedna_game_graphics_Texture.call(this);
};
$hxClasses["lovedna.game.graphics.Texture2D"] = lovedna_game_graphics_Texture2D;
lovedna_game_graphics_Texture2D.__name__ = ["lovedna","game","graphics","Texture2D"];
lovedna_game_graphics_Texture2D.__super__ = lovedna_game_graphics_Texture;
lovedna_game_graphics_Texture2D.prototype = $extend(lovedna_game_graphics_Texture.prototype,{
	setData: function(v) {
		lovedna_game_graphics_Texture.prototype.setData.call(this,v);
		if(this.data != null) {
			if(Std["is"](this.data,lovedna_resource_Image)) {
				var img = this.data;
				this.width = img.width;
				this.height = img.height;
			}
			if(Std["is"](this.data,HTMLImageElement)) {
				var element = this.data;
				this.width = element.width;
				this.height = element.height;
			} else if(Std["is"](this.data,HTMLCanvasElement)) {
				var element1 = this.data;
				this.width = element1.width;
				this.height = element1.height;
			} else if(Std["is"](this.data,HTMLVideoElement)) {
				var element2 = this.data;
				this.width = element2.width;
				this.height = element2.height;
			}
		}
	}
	,unload: function() {
		lovedna_game_graphics_Texture.prototype.unload.call(this);
		if(this._texture != null) {
			lovedna_game_System.gl.deleteTexture(this._texture);
			this._texture = null;
		}
	}
	,bind: function(location) {
		if(location == null) {
			location = 0;
		}
		lovedna_game_graphics_Texture.prototype.bind.call(this,location);
		if(!this.enabled || this.width == 0 || this.height == 0) {
			return false;
		}
		if(this.data != null) {
			this.upload();
			this.data = null;
			return false;
		}
		if(this._texture != null) {
			lovedna_game_System.gl.activeTexture(33984 + location);
			lovedna_game_System.gl.bindTexture(3553,this._texture);
			this.params.bind();
			return true;
		}
		return false;
	}
	,upload: function() {
		if(this._texture == null) {
			this._texture = lovedna_game_System.gl.createTexture();
		}
		lovedna_game_System.gl.activeTexture(33984);
		lovedna_game_System.gl.bindTexture(3553,this._texture);
		if(this.data != null) {
			var success = false;
			if(Std["is"](this.data,lovedna_resource_Image)) {
				var img = this.data;
				this.data = img.data;
			}
			if(Std["is"](this.data,HTMLImageElement)) {
				var element = this.data;
				this.width = element.width;
				this.height = element.height;
				if(this.width != 0 && this.height != 0) {
					lovedna_game_System.gl.gl.texImage2D(3553,0,6408,6408,5121,element);
					success = true;
				}
			} else if(Std["is"](this.data,HTMLCanvasElement)) {
				var element1 = this.data;
				this.width = element1.width;
				this.height = element1.height;
				if(this.width != 0 && this.height != 0) {
					lovedna_game_System.gl.gl.texImage2D(3553,0,6408,6408,5121,element1);
					success = true;
				}
			} else if(Std["is"](this.data,HTMLVideoElement)) {
				var element2 = this.data;
				this.width = element2.width;
				this.height = element2.height;
				if(this.width != 0 && this.height != 0) {
					lovedna_game_System.gl.gl.texImage2D(3553,0,6408,6408,5121,element2);
					success = true;
				}
			}
			if(success) {
				this.updateParams();
			}
		}
		return false;
	}
	,updateParams: function() {
		var ispow2 = false;
		if(this.width != 0 && this.height != 0) {
			if(!lovedna_utils_Helper.isPow2(this.width) || !lovedna_utils_Helper.isPow2(this.height)) {
				this.params.wrapS = 33071;
				this.params.wrapT = 33071;
				this.params.dirty = true;
			} else {
				ispow2 = true;
			}
		}
		if(ispow2 && this.params.mipmap) {
			lovedna_game_System.gl.generateMipmap(3553);
			this.params.filterMin = 9984;
		}
	}
	,__class__: lovedna_game_graphics_Texture2D
});
var lovedna_game_graphics_RenderTexture2D = function(width,height,depth) {
	if(depth == null) {
		depth = 16;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 256;
	}
	this._depth = 16;
	lovedna_game_graphics_Texture2D.call(this);
	this.width = width;
	this.height = height;
	if(this.height <= 0) {
		this.height = this.width;
	}
	this.enabled = true;
	this._depth = depth;
};
$hxClasses["lovedna.game.graphics.RenderTexture2D"] = lovedna_game_graphics_RenderTexture2D;
lovedna_game_graphics_RenderTexture2D.__name__ = ["lovedna","game","graphics","RenderTexture2D"];
lovedna_game_graphics_RenderTexture2D.__super__ = lovedna_game_graphics_Texture2D;
lovedna_game_graphics_RenderTexture2D.prototype = $extend(lovedna_game_graphics_Texture2D.prototype,{
	resize: function(w,h) {
		if(this.width != w || this.height != h) {
			this.unload();
		}
		this.width = w;
		this.height = h;
	}
	,bindBuffer: function() {
		if(this._frameBuffer == null) {
			this._frameBuffer = lovedna_game_System.gl.createFramebuffer();
			lovedna_game_System.gl.bindFramebuffer(36160,this._frameBuffer);
			this._renderBuffer = lovedna_game_System.gl.createRenderbuffer();
			lovedna_game_System.gl.bindRenderbuffer(36161,this._renderBuffer);
			if(this._depth == 24) {
				lovedna_game_System.gl.renderbufferStorage(36161,34041,this.width,this.height);
				lovedna_game_System.gl.framebufferRenderbuffer(36160,33306,36161,this._renderBuffer);
			} else if(this._depth == 16) {
				lovedna_game_System.gl.renderbufferStorage(36161,33189,this.width,this.height);
				lovedna_game_System.gl.framebufferRenderbuffer(36160,36096,36161,this._renderBuffer);
			}
			this.params.mipmap = false;
			this.upload();
			lovedna_game_System.gl.framebufferTexture2D(36160,36064,3553,this._texture,0);
			lovedna_game_System.gl.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,null);
			lovedna_game_System.gl.bindRenderbuffer(36161,null);
			this.updateParams();
			lovedna_game_System.gl.clearDepthf(1);
			lovedna_game_System.gl.clearStencil(0);
			lovedna_game_System.gl.clearColor(1,1,1,0);
			var mask = 0;
			mask |= 16384;
			if(this._depth > 0) {
				mask |= 256;
			}
			if(this._depth > 16) {
				mask |= 1024;
			}
			lovedna_game_System.gl.clear(mask);
		}
		lovedna_game_System.gl.bindFramebuffer(36160,this._frameBuffer);
		lovedna_game_System.gl.bindRenderbuffer(36161,this._renderBuffer);
	}
	,bind: function(location) {
		if(location == null) {
			location = 0;
		}
		var tmp = this._texture == null;
		return lovedna_game_graphics_Texture2D.prototype.bind.call(this,location);
	}
	,unload: function() {
		if(this._frameBuffer != null) {
			lovedna_game_System.gl.deleteFramebuffer(this._frameBuffer);
			this._frameBuffer = null;
		}
		if(this._renderBuffer != null) {
			lovedna_game_System.gl.deleteRenderbuffer(this._renderBuffer);
			this._renderBuffer = null;
		}
	}
	,toString: function() {
		return "RenderTexture2D " + this.id + "(" + this.width + "," + this.height + ")";
	}
	,__class__: lovedna_game_graphics_RenderTexture2D
});
var lovedna_game_graphics_TextureParams = function() {
	this.filterMag = 9729;
	this.filterMin = 9729;
	this.wrapS = 10497;
	this.wrapT = 10497;
	this.mipmap = true;
	this.dirty = true;
};
$hxClasses["lovedna.game.graphics.TextureParams"] = lovedna_game_graphics_TextureParams;
lovedna_game_graphics_TextureParams.__name__ = ["lovedna","game","graphics","TextureParams"];
lovedna_game_graphics_TextureParams.prototype = {
	bind: function() {
		if(!this.dirty) {
			return;
		}
		this.dirty = false;
		lovedna_game_System.gl.texParameteri(3553,10242,this.wrapS);
		lovedna_game_System.gl.texParameteri(3553,10243,this.wrapT);
		lovedna_game_System.gl.texParameteri(3553,10240,this.filterMag);
		lovedna_game_System.gl.texParameteri(3553,10241,this.filterMin);
	}
	,__class__: lovedna_game_graphics_TextureParams
};
var lovedna_game_graphics_VertexBuffer = function() {
	this.id = lovedna_game_graphics_VertexBuffer._id++;
	this._programId = -1;
	this._time = 0;
};
$hxClasses["lovedna.game.graphics.VertexBuffer"] = lovedna_game_graphics_VertexBuffer;
lovedna_game_graphics_VertexBuffer.__name__ = ["lovedna","game","graphics","VertexBuffer"];
lovedna_game_graphics_VertexBuffer.__interfaces__ = [lovedna_resource_IResource];
lovedna_game_graphics_VertexBuffer.prototype = {
	setProgramId: function(v) {
		this._programId = this.id;
	}
	,getLayout: function(name) {
		return this._layoutMap.get(name);
	}
	,setLayout: function(list) {
		if(this.layouts == null) {
			this.layouts = [];
			this._layoutMap = new haxe_ds_StringMap();
		} else {
			var len = this.layouts.length;
			while(len-- > 0) this._layoutMap.remove(this.layouts[len].name);
			this.layouts.splice(0,this.layouts.length);
		}
		this.stride = 0;
		var len1 = list.length;
		var _g1 = 0;
		var _g = len1;
		while(_g1 < _g) {
			var i = _g1++;
			var layout = list[i];
			if(layout == null) {
				haxe_Log.trace("error",{ fileName : "VertexBuffer.hx", lineNumber : 73, className : "lovedna.game.graphics.VertexBuffer", methodName : "setLayout", customParams : ["layout is null " + i]});
			}
			layout.offset = this.stride;
			this.stride += layout.size * layout.getDataSize();
			this.layouts.push(layout);
			this._layoutMap.set(layout.name,layout);
		}
		this.enabled = this.stride > 0;
	}
	,upload: function(list) {
		this._data = list;
		this.length = this._data.length;
	}
	,bind: function(programId) {
		if(programId == null) {
			programId = 0;
		}
		this._time = lovedna_Time.get_now();
		if(!this.enabled) {
			return false;
		}
		var len = this.layouts.length;
		if(len < 1) {
			return false;
		}
		if(this._data != null) {
			if(this._buffer == null) {
				this._buffer = lovedna_game_System.gl.createBuffer();
			}
			lovedna_game_System.gl.bindBuffer(34962,this._buffer);
			lovedna_game_System.gl.bufferData(34962,this._data.length * 4,this.getData(),35044);
			this._data = null;
		}
		var needbind = false;
		while(len-- > 0) {
			var layout = this.layouts[len];
			var location = layout.location;
			if(location < 0) {
				continue;
			}
			var key = this.id * 10 + location;
			var ck = lovedna_game_graphics_VertexBuffer.locationCache.get(key);
			if(ck == null) {
				needbind = true;
				break;
			}
			lovedna_game_graphics_VertexBuffer._fnv.reset();
			lovedna_game_graphics_VertexBuffer._fnv.addInt(programId);
			lovedna_game_graphics_VertexBuffer._fnv.addInt(layout.location);
			lovedna_game_graphics_VertexBuffer._fnv.addInt(this.id);
			var k = lovedna_game_graphics_VertexBuffer._fnv.getCode();
			if(ck != k) {
				needbind = true;
				break;
			}
		}
		if(!needbind) {
			return true;
		}
		lovedna_game_System.gl.bindBuffer(34962,this._buffer);
		var c = 0;
		var i = lovedna_game_graphics_VertexBuffer.locationCache.keys();
		while(i.hasNext()) {
			var i1 = i.next();
			lovedna_game_graphics_VertexBuffer.locationCache.remove(i1);
		}
		len = this.layouts.length;
		while(len-- > 0) {
			var layout1 = this.layouts[len];
			var location1 = layout1.location;
			if(location1 < 0) {
				continue;
			}
			lovedna_game_graphics_VertexBuffer._fnv.reset();
			lovedna_game_graphics_VertexBuffer._fnv.addInt(programId);
			lovedna_game_graphics_VertexBuffer._fnv.addInt(location1);
			lovedna_game_graphics_VertexBuffer._fnv.addInt(this.id);
			var k1 = lovedna_game_graphics_VertexBuffer._fnv.getCode();
			var key1 = this.id * 10 + location1;
			lovedna_game_graphics_VertexBuffer.locationCache.set(key1,k1);
			lovedna_game_System.gl.enableVertexAttribArray(layout1.location);
			lovedna_game_System.gl.vertexAttribPointer(layout1.location,layout1.size,layout1.type,false,this.stride,layout1.offset);
			++c;
		}
		if(c < 1) {
			return false;
		}
		return true;
	}
	,unload: function() {
		if(this._buffer != null) {
			lovedna_game_System.gl.deleteBuffer(this._buffer);
			this._buffer = null;
		}
		this._data = null;
	}
	,getData: function() {
		var len = this._data.length;
		var k = lovedna_utils_Helper.intToNextPow2(len);
		var c = lovedna_utils_Helper.pow2Count(k);
		var data = lovedna_game_graphics_VertexBuffer._tempList[c];
		if(data == null) {
			var this1 = new Float32Array(k);
			data = this1;
			lovedna_game_graphics_VertexBuffer._tempList[c] = data;
		}
		while(len-- > 0) data[len] = this._data[len];
		return data;
	}
	,__class__: lovedna_game_graphics_VertexBuffer
};
var lovedna_game_graphics_VertexLayout = function(name,size,type) {
	if(type == null) {
		type = 5126;
	}
	this.type = type;
	this.name = name;
	this.size = size;
	this.offset = 0;
	this.location = -1;
};
$hxClasses["lovedna.game.graphics.VertexLayout"] = lovedna_game_graphics_VertexLayout;
lovedna_game_graphics_VertexLayout.__name__ = ["lovedna","game","graphics","VertexLayout"];
lovedna_game_graphics_VertexLayout.prototype = {
	getDataSize: function() {
		return 4;
	}
	,__class__: lovedna_game_graphics_VertexLayout
};
var lovedna_game_helper_DebugGame = function(v) {
	this.game = v;
	lovedna_ui_Key.onEvent.addEventListener(lovedna_events_KeyEvent.onUpdate.get_type(),$bind(this,this.onKey));
};
$hxClasses["lovedna.game.helper.DebugGame"] = lovedna_game_helper_DebugGame;
lovedna_game_helper_DebugGame.__name__ = ["lovedna","game","helper","DebugGame"];
lovedna_game_helper_DebugGame.prototype = {
	debugFrame: function() {
		this.game.pause = true;
	}
	,debugRender: function() {
		this.game.commands.debug = true;
	}
	,onKey: function(e) {
		var k = lovedna_events_KeyEvent.onUpdate.key;
		if(k.type == 1) {
			if(k.keyCode == 39) {
				if(this.game.pause) {
					this.game.playStep = true;
				}
				if(this.game.commands.debug) {
					this.game.commands.position++;
				}
			} else if(k.keyCode == 37) {
				if(this.game.pause) {
					this.game.playStep = true;
				}
				if(this.game.commands.debug) {
					this.game.commands.position--;
				}
			} else if(k.keyCode == 40) {
				if(k.modifier.getElement(2)) {
					this.game.pause = !this.game.pause;
				}
			} else if(k.keyCode == 38) {
				if(k.modifier.getElement(2)) {
					this.game.commands.debug = !this.game.commands.debug;
				}
			}
		}
	}
	,__class__: lovedna_game_helper_DebugGame
};
var lovedna_game_render_CameraRenderData = function(v) {
	this._camera = v;
	this._context = new lovedna_game_render_RenderBufferContex();
	this._timeData = new lovedna_math_Vector4();
	this._sinTimeData = new lovedna_math_Vector4();
	this._cosTimeData = new lovedna_math_Vector4();
	this._deltaTimeData = new lovedna_math_Vector4();
	this._uniforms = new lovedna_game_ShaderUniform();
	this._uniforms.setFloat4(lovedna_game_DefineName.TIME.name,this._timeData);
	this._uniforms.setFloat4(lovedna_game_DefineName.TIME_SIN.name,this._sinTimeData);
	this._uniforms.setFloat4(lovedna_game_DefineName.TIME_COS.name,this._cosTimeData);
	this._uniforms.setFloat4(lovedna_game_DefineName.TIME_DELTA.name,this._deltaTimeData);
	this._camera.uniforms.add(this._uniforms);
	this._temp = new lovedna_ds_FastArray();
	this._bufferStart = new lovedna_game_render_RenderBuffer();
	this._bufferEnd = new lovedna_game_render_RenderBuffer();
	this._sort = new lovedna_game_render__$CameraRenderData_SortCommandBuffer();
};
$hxClasses["lovedna.game.render.CameraRenderData"] = lovedna_game_render_CameraRenderData;
lovedna_game_render_CameraRenderData.__name__ = ["lovedna","game","render","CameraRenderData"];
lovedna_game_render_CameraRenderData.prototype = {
	render: function(v) {
		lovedna_game_components_Camera.current = this._camera;
		if(!this._camera.render) {
			return;
		}
		this._gameBuffer = this._camera.actor.world.game.commands;
		var sort = this._sort;
		if(this._camera.customRenderBufferCollector != null) {
			sort = this._camera.customRenderBufferCollector;
		}
		var len = v.count;
		while(len-- > 0) {
			var r = v.get(len);
			if(!r.visible) {
				continue;
			}
			var a = r.actor;
			if(!this._camera.cullingMask.exist(a.layer)) {
				a._setVisible(false);
				continue;
			}
			if(r.cullWithCamera(this._camera)) {
				a._setVisible(false);
				continue;
			}
			a._setVisible(true);
			r.collectRenderBuffer(sort);
		}
		this._bufferStart.clear();
		this._bufferStart.setContext(this._context);
		this._bufferStart.setCallback($bind(this,this.onPreRender));
		this._gameBuffer.push(this._bufferStart);
		sort.copyTo(this._gameBuffer);
		this._bufferEnd.clear();
		this._bufferEnd.setCallback($bind(this,this.onPostRender));
		this._gameBuffer.push(this._bufferEnd);
	}
	,onPreRender: function(ctx) {
		ctx.clearGlobal();
		var t = lovedna_game_GameTime.get_now();
		this._timeData.set(t / 20,t,t * 2,t * 3);
		this._sinTimeData.set(Math.sin(t / 8),Math.sin(t / 4),Math.sin(t / 2),Math.sin(t));
		this._cosTimeData.set(Math.cos(t / 8),Math.cos(t / 4),Math.cos(t / 2),Math.cos(t));
		var tick = this._camera.actor.world.deltaTime;
		this._deltaTimeData.set(tick,1 / tick,tick,1 / tick);
		var type = this._camera.clearFlags.type;
		if(this._camera.actor.world.collectorLight.count > 0) {
			var light = this._camera.actor.world.collectorLight.get(0);
			ctx.globalUniforms.add(light.uniforms);
			ctx.globalDefine.define(lovedna_game_DefineName.LIGHT.name,"",true);
		}
		ctx.globalUniforms.add(this._camera.uniforms);
		if(this._camera.renderTarget != null) {
			lovedna_game_graphics_GLContext.pushTarget(this._camera.renderTarget);
		}
		if(type != 0) {
			if(type == 1) {
				lovedna_game_graphics_GLContext.clear(this._camera.clearFlags.color,-1,-1);
			} else if(type == 2) {
				lovedna_game_graphics_GLContext.clear(null,1,-1);
			} else if(type == 3) {
				lovedna_game_graphics_GLContext.clear(this._camera.clearFlags.color,1,0);
			}
		}
	}
	,onPostRender: function(ctx) {
		if(this._camera.renderTarget != null) {
			lovedna_game_graphics_GLContext.popTarget();
		}
		this._camera.actor.dispatchEvent(lovedna_game_events_ActorEvent.onPostRender);
	}
	,__class__: lovedna_game_render_CameraRenderData
};
var lovedna_game_render_IRenderBufferCollect = function() { };
$hxClasses["lovedna.game.render.IRenderBufferCollect"] = lovedna_game_render_IRenderBufferCollect;
lovedna_game_render_IRenderBufferCollect.__name__ = ["lovedna","game","render","IRenderBufferCollect"];
lovedna_game_render_IRenderBufferCollect.prototype = {
	__class__: lovedna_game_render_IRenderBufferCollect
};
var lovedna_game_render__$CameraRenderData_SortCommandBuffer = function() {
	this.list = new lovedna_ds_FastArray();
};
$hxClasses["lovedna.game.render._CameraRenderData.SortCommandBuffer"] = lovedna_game_render__$CameraRenderData_SortCommandBuffer;
lovedna_game_render__$CameraRenderData_SortCommandBuffer.__name__ = ["lovedna","game","render","_CameraRenderData","SortCommandBuffer"];
lovedna_game_render__$CameraRenderData_SortCommandBuffer.__interfaces__ = [lovedna_game_render_IRenderBufferCollect];
lovedna_game_render__$CameraRenderData_SortCommandBuffer.prototype = {
	add: function(v) {
		this.list.push(v);
		var q = lovedna_game_Material.getRenderQueue(v.renderQueue);
		var s = null;
		if(q == 20000) {
			if(this._geometry == null) {
				this._geometry = new lovedna_game_render__$CameraRenderData_SortQueue(20000);
			}
			s = this._geometry;
		} else if(q == 40000) {
			if(this._ui == null) {
				this._ui = new lovedna_game_render__$CameraRenderData_SortQueue(40000);
			}
			s = this._ui;
		} else if(q == 30000) {
			if(this._transparent == null) {
				this._transparent = new lovedna_game_render__$CameraRenderData_SortQueue(30000);
			}
			s = this._transparent;
		} else if(q == 10000) {
			if(this._background == null) {
				this._background = new lovedna_game_render__$CameraRenderData_SortQueue(10000);
			}
			s = this._background;
		} else if(q == 50000) {
			if(this._overlay == null) {
				this._overlay = new lovedna_game_render__$CameraRenderData_SortQueue(50000);
			}
			s = this._overlay;
		}
		if(s != null) {
			s.add(v);
		}
	}
	,clear: function() {
		this.list.clear();
	}
	,copyTo: function(v) {
		if(this._background != null) {
			this._background.fill(v);
		}
		if(this._geometry != null) {
			this._geometry.fill(v);
		}
		if(this._transparent != null) {
			this._transparent.fill(v);
		}
		if(this._ui != null) {
			this._ui.fill(v);
		}
		if(this._overlay != null) {
			this._overlay.fill(v);
		}
	}
	,__class__: lovedna_game_render__$CameraRenderData_SortCommandBuffer
};
var lovedna_game_render__$CameraRenderData_SortProcess = function(type) {
	this.type = type;
};
$hxClasses["lovedna.game.render._CameraRenderData.SortProcess"] = lovedna_game_render__$CameraRenderData_SortProcess;
lovedna_game_render__$CameraRenderData_SortProcess.__name__ = ["lovedna","game","render","_CameraRenderData","SortProcess"];
lovedna_game_render__$CameraRenderData_SortProcess.prototype = {
	add: function(v) {
	}
	,fill: function(v) {
	}
	,sort: function(a,b) {
		var aid = a.sortId;
		var bid = b.sortId;
		if(aid != bid) {
			return aid - bid;
		}
		return 0;
	}
	,__class__: lovedna_game_render__$CameraRenderData_SortProcess
};
var lovedna_game_render__$CameraRenderData_SortQueue = function(type) {
	lovedna_game_render__$CameraRenderData_SortProcess.call(this,type);
	this._map = new haxe_ds_IntMap();
	this._list = [];
};
$hxClasses["lovedna.game.render._CameraRenderData.SortQueue"] = lovedna_game_render__$CameraRenderData_SortQueue;
lovedna_game_render__$CameraRenderData_SortQueue.__name__ = ["lovedna","game","render","_CameraRenderData","SortQueue"];
lovedna_game_render__$CameraRenderData_SortQueue.__super__ = lovedna_game_render__$CameraRenderData_SortProcess;
lovedna_game_render__$CameraRenderData_SortQueue.prototype = $extend(lovedna_game_render__$CameraRenderData_SortProcess.prototype,{
	add: function(v) {
		var key = v.renderQueue;
		var sort = null;
		if(!this._map.exists(key)) {
			sort = new lovedna_game_render__$CameraRenderData_SortShader(this.type);
			sort.sortId = key;
			this._map.set(key,this._list.length);
			this._list.push(sort);
		} else {
			var id = this._map.get(key);
			sort = this._list[id];
		}
		sort.add(v);
	}
	,fill: function(v) {
		this._list.sort($bind(this,this.sort));
		var len = this._list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._list[i].fill(v);
		}
		var k = this._map.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			this._map.remove(k1);
		}
		this._list.splice(0,this._list.length);
	}
	,__class__: lovedna_game_render__$CameraRenderData_SortQueue
});
var lovedna_game_render__$CameraRenderData_SortShader = function(type) {
	lovedna_game_render__$CameraRenderData_SortProcess.call(this,type);
	this._map = new haxe_ds_IntMap();
	this._list = [];
};
$hxClasses["lovedna.game.render._CameraRenderData.SortShader"] = lovedna_game_render__$CameraRenderData_SortShader;
lovedna_game_render__$CameraRenderData_SortShader.__name__ = ["lovedna","game","render","_CameraRenderData","SortShader"];
lovedna_game_render__$CameraRenderData_SortShader.__super__ = lovedna_game_render__$CameraRenderData_SortProcess;
lovedna_game_render__$CameraRenderData_SortShader.prototype = $extend(lovedna_game_render__$CameraRenderData_SortProcess.prototype,{
	add: function(v) {
		var key = v.shaderId;
		var sort = null;
		if(!this._map.exists(key)) {
			sort = new lovedna_game_render__$CameraRenderData_SortDistance(this.type);
			sort.sortId = key;
			this._map.set(key,this._list.length);
			this._list.push(sort);
		} else {
			var id = this._map.get(key);
			sort = this._list[id];
		}
		sort.add(v);
	}
	,fill: function(list) {
		this._list.sort($bind(this,this.sort));
		var len = this._list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this._list[i].fill(list);
		}
		var k = this._map.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			this._map.remove(k1);
		}
		this._list.splice(0,this._list.length);
	}
	,__class__: lovedna_game_render__$CameraRenderData_SortShader
});
var lovedna_game_render__$CameraRenderData_SortDistance = function(type) {
	lovedna_game_render__$CameraRenderData_SortProcess.call(this,type);
	this._list = [];
};
$hxClasses["lovedna.game.render._CameraRenderData.SortDistance"] = lovedna_game_render__$CameraRenderData_SortDistance;
lovedna_game_render__$CameraRenderData_SortDistance.__name__ = ["lovedna","game","render","_CameraRenderData","SortDistance"];
lovedna_game_render__$CameraRenderData_SortDistance.__super__ = lovedna_game_render__$CameraRenderData_SortProcess;
lovedna_game_render__$CameraRenderData_SortDistance.prototype = $extend(lovedna_game_render__$CameraRenderData_SortProcess.prototype,{
	add: function(v) {
		this._list.push(v);
	}
	,fill: function(list) {
		this._list.sort($bind(this,this.sorta));
		var len = this._list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			list.push(this._list[i]);
		}
		this._list.splice(0,this._list.length);
	}
	,sorta: function(a,b) {
		var arid = a.renderIndex;
		var brid = b.renderIndex;
		if(arid != brid) {
			return arid - brid;
		}
		var aid = a.distance;
		var bid = b.distance;
		if(aid != bid) {
			if(this.type <= 30000) {
				if(aid - bid > 0) {
					return 1;
				} else {
					return -1;
				}
			} else if(aid - bid > 0) {
				return -1;
			} else {
				return 1;
			}
		}
		return 0;
	}
	,__class__: lovedna_game_render__$CameraRenderData_SortDistance
});
var lovedna_game_render_IRenderBufferCommands = function() { };
$hxClasses["lovedna.game.render.IRenderBufferCommands"] = lovedna_game_render_IRenderBufferCommands;
lovedna_game_render_IRenderBufferCommands.__name__ = ["lovedna","game","render","IRenderBufferCommands"];
lovedna_game_render_IRenderBufferCommands.prototype = {
	__class__: lovedna_game_render_IRenderBufferCommands
};
var lovedna_game_render_GameRenderCommandBuffer = function() {
	this.position = -1;
	this._list = new lovedna_ds_FastArray();
	this.debug = false;
};
$hxClasses["lovedna.game.render.GameRenderCommandBuffer"] = lovedna_game_render_GameRenderCommandBuffer;
lovedna_game_render_GameRenderCommandBuffer.__name__ = ["lovedna","game","render","GameRenderCommandBuffer"];
lovedna_game_render_GameRenderCommandBuffer.__interfaces__ = [lovedna_game_render_IRenderBufferCommands];
lovedna_game_render_GameRenderCommandBuffer.prototype = {
	push: function(v) {
		this._list.push(v);
	}
	,clear: function() {
		this._list.clear();
		lovedna_game_render_RenderBuffer.$length = 0;
	}
	,flush: function() {
		var len = this._list.get_length();
		if(this.position < 0) {
			this.position = 0;
		}
		if(this.position > len) {
			this.position = len;
		}
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.debug && i > this.position) {
				return;
			}
			this._list.getElement(i).execute();
		}
	}
	,__class__: lovedna_game_render_GameRenderCommandBuffer
};
var lovedna_game_render_RenderBufferContex = function() {
	this.globalUniforms = new lovedna_game_ShaderUniform();
	this.globalDefine = new lovedna_game_ShaderDefine();
	this.currentUniforms = new lovedna_game_ShaderUniform();
	this.currentVertexBuffers = new lovedna_ds_FastArray();
};
$hxClasses["lovedna.game.render.RenderBufferContex"] = lovedna_game_render_RenderBufferContex;
lovedna_game_render_RenderBufferContex.__name__ = ["lovedna","game","render","RenderBufferContex"];
lovedna_game_render_RenderBufferContex.prototype = {
	clearGlobal: function() {
		this.globalUniforms.clear();
		this.globalDefine.clear();
	}
	,clearCurrent: function() {
		this.currentVertexBuffers.clear();
		this.currentUniforms.clear();
		this.currentMaterial = null;
		this.currentIndexBuffer = null;
		this.currentMeshBuffer = null;
	}
	,__class__: lovedna_game_render_RenderBufferContex
};
var lovedna_geom_Shape3D = function() { };
$hxClasses["lovedna.geom.Shape3D"] = lovedna_geom_Shape3D;
lovedna_geom_Shape3D.__name__ = ["lovedna","geom","Shape3D"];
lovedna_geom_Shape3D.prototype = {
	__class__: lovedna_geom_Shape3D
};
var lovedna_geom_Box3 = function() {
	this.min = new lovedna_math_Vector3();
	this.max = new lovedna_math_Vector3();
	this._centerHelp = new lovedna_math_Vector3();
	this._dirty = null;
	this.points = [];
	var _g = 0;
	while(_g < 8) {
		var i = _g++;
		this.points.push(new lovedna_math_Vector3());
	}
};
$hxClasses["lovedna.geom.Box3"] = lovedna_geom_Box3;
lovedna_geom_Box3.__name__ = ["lovedna","geom","Box3"];
lovedna_geom_Box3.__interfaces__ = [lovedna_geom_Shape3D];
lovedna_geom_Box3.prototype = {
	toString: function() {
		return "Box33[" + Std.string(this.min) + " " + Std.string(this.max) + "]";
	}
	,update: function() {
		this._dirty = null;
		this.enabled = true;
	}
	,reset: function() {
		this.min.set(1.79769313486231e+308,1.79769313486231e+308,1.79769313486231e+308);
		this.max.set(-1.79769313486231e+308,-1.79769313486231e+308,-1.79769313486231e+308);
		this.enabled = false;
		return this;
	}
	,copy: function(v) {
		this.max.copy(v.max);
		this.min.copy(v.min);
		this.update();
		return this;
	}
	,set: function(min,max) {
		min.copy(min);
		max.copy(max);
		this.update();
		return this;
	}
	,expand: function(v) {
		this.min.min(v);
		this.max.max(v);
		this.update();
		return this;
	}
	,addWith: function(b) {
		return this.expand(b.min).expand(b.max);
	}
	,multiplyMatrix44: function(v) {
		var tmin = lovedna_math_Vector3.get_one();
		var tmax = lovedna_math_Vector3.get_one();
		tmin.copy(this.min);
		tmax.copy(this.max);
		this.reset();
		this.expand(v.transformVector(this.points[0].copy(tmin)));
		this.expand(v.transformVector(this.points[1].set(tmin.x,tmin.y,tmax.z)));
		this.expand(v.transformVector(this.points[2].set(tmax.x,tmin.y,tmax.z)));
		this.expand(v.transformVector(this.points[3].set(tmax.x,tmin.y,tmin.z)));
		this.expand(v.transformVector(this.points[4].set(tmin.x,tmax.y,tmin.z)));
		this.expand(v.transformVector(this.points[5].set(tmin.x,tmax.y,tmax.z)));
		this.expand(v.transformVector(this.points[6].copy(tmax)));
		this.expand(v.transformVector(this.points[7].set(tmax.x,tmax.y,tmin.z)));
		return this;
	}
	,containsPoint: function(v) {
		if(v.x < this.min.x || v.x > this.max.x || v.y < this.min.y || v.y > this.max.y || v.z < this.min.z || v.z > this.max.z) {
			return false;
		} else {
			return true;
		}
	}
	,containsBox: function(v) {
		if(this.min.x <= v.min.x && v.max.x <= this.max.x && this.min.y <= v.min.y && v.max.y <= this.max.y && this.min.z <= v.min.z) {
			return v.max.z <= this.max.z;
		} else {
			return false;
		}
	}
	,intersectsBox: function(v) {
		var vmin = v.min;
		var vmax = v.max;
		if(this.min.x > vmax.x || this.max.x < vmin.x) {
			return false;
		}
		if(this.min.y > vmax.y || this.max.y < vmin.y) {
			return false;
		}
		if(this.min.z > vmax.z || this.max.z < vmin.z) {
			return false;
		}
		return true;
	}
	,intersectsPlane: function(v) {
		var fmin = 0;
		var fmax = 0;
		if(v.normal.x > 0) {
			fmin = v.normal.x * this.min.x;
			fmin = v.normal.x * this.max.x;
		} else {
			fmin = v.normal.x * this.max.x;
			fmax = v.normal.x * this.min.x;
		}
		if(v.normal.y > 0) {
			fmin += v.normal.y * this.min.y;
			fmax += v.normal.y * this.max.y;
		} else {
			fmin += v.normal.y * this.max.y;
			fmax += v.normal.y * this.min.y;
		}
		if(v.normal.z > 0) {
			fmin += v.normal.z * this.min.z;
			fmax += v.normal.z * this.max.z;
		} else {
			fmin += v.normal.z * this.max.z;
			fmax += v.normal.z * this.min.z;
		}
		if(fmin <= v.distance) {
			return fmax >= v.distance;
		} else {
			return false;
		}
	}
	,distanceToPoint: function(v) {
		return this.clampPoint(v).sub(v).get_length();
	}
	,clampPoint: function(v) {
		return lovedna_math_Vector3.get_one().copy(v).clamp(this.min,this.max);
	}
	,getSize: function() {
		return lovedna_math_Vector3.get_one().copy(this.max).sub(this.min);
	}
	,getFarthestPointInDirection: function(direction) {
		var len = this.points.length;
		var farthestPoint = this.points[0];
		var farthestDistance = direction.dot(farthestPoint);
		var tempDist = 0.0;
		var _g1 = 1;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var p = this.points[i];
			tempDist = direction.dot(p);
			if(tempDist > farthestDistance) {
				farthestDistance = tempDist;
				farthestPoint = p;
			}
		}
		return lovedna_math_Vector3.get_one().copy(farthestPoint);
	}
	,getCenter: function() {
		if(this._dirty == null) {
			this._dirty = this._centerHelp;
			this._dirty.copy(this.min).add(this.max).scale(0.5);
		}
		return this._dirty;
	}
	,__class__: lovedna_geom_Box3
};
var lovedna_geom_Shape2D = function() { };
$hxClasses["lovedna.geom.Shape2D"] = lovedna_geom_Shape2D;
lovedna_geom_Shape2D.__name__ = ["lovedna","geom","Shape2D"];
lovedna_geom_Shape2D.prototype = {
	__class__: lovedna_geom_Shape2D
};
var lovedna_geom_Circle = function(center,radius) {
	this._center = new lovedna_math_Vector2();
	this._center.copy(center);
	this.enabled = true;
	this.radius = radius;
};
$hxClasses["lovedna.geom.Circle"] = lovedna_geom_Circle;
lovedna_geom_Circle.__name__ = ["lovedna","geom","Circle"];
lovedna_geom_Circle.__interfaces__ = [lovedna_geom_Shape2D];
lovedna_geom_Circle.prototype = {
	getCenter: function() {
		return this._center;
	}
	,getFarthestPointInDirection: function(direction) {
		return lovedna_math_Vector2.get_temp().copy(direction).normalize().scale(this.radius).add(this._center);
	}
	,set: function(center,radius) {
		this._center.copy(center);
		this.radius = radius;
		return this;
	}
	,copy: function(v) {
		if(v == this) {
			return this;
		}
		this._center.copy(v._center);
		this.radius = v.radius;
		return this;
	}
	,containsPoint: function(v) {
		return v.distanceSquared(this._center) <= this.radius * this.radius;
	}
	,distanceToPoint: function(v) {
		return v.distance(this._center) - this.radius;
	}
	,intersectsCircle: function(v) {
		var radiusSum = this.radius + v.radius;
		return v._center.distanceSquared(this._center) <= radiusSum * radiusSum;
	}
	,Equals: function(v) {
		if(this._center.equals(v._center)) {
			return this.radius == v.radius;
		} else {
			return false;
		}
	}
	,__class__: lovedna_geom_Circle
};
var lovedna_geom_Frustum = function() {
	this.planes = [];
	this.near = new lovedna_geom_Plane();
	this.far = new lovedna_geom_Plane();
	this.left = new lovedna_geom_Plane();
	this.right = new lovedna_geom_Plane();
	this.top = new lovedna_geom_Plane();
	this.bottom = new lovedna_geom_Plane();
	this.planes.push(this.near);
	this.planes.push(this.far);
	this.planes.push(this.left);
	this.planes.push(this.right);
	this.planes.push(this.top);
	this.planes.push(this.bottom);
};
$hxClasses["lovedna.geom.Frustum"] = lovedna_geom_Frustum;
lovedna_geom_Frustum.__name__ = ["lovedna","geom","Frustum"];
lovedna_geom_Frustum.prototype = {
	toString: function() {
		var str = "";
		str += "near " + this.planes[0].toString() + "\n";
		str += "far " + this.planes[1].toString() + "\n";
		str += "left " + this.planes[2].toString() + "\n";
		str += "right " + this.planes[3].toString() + "\n";
		str += "top " + this.planes[4].toString() + "\n";
		str += "bottom " + this.planes[5].toString() + "\n";
		return str;
	}
	,copy: function(value) {
		if(value == this) {
			return this;
		}
		var len = 6;
		while(len-- > 0) this.planes[len].copy(value.planes[len]);
		return this;
	}
	,set: function(p0,p1,p2,p3,p4,p5) {
		this.planes[0].copy(p0);
		this.planes[1].copy(p1);
		this.planes[2].copy(p2);
		this.planes[3].copy(p3);
		this.planes[4].copy(p4);
		this.planes[5].copy(p5);
		return this;
	}
	,containsPoint: function(v,radius) {
		if(radius == null) {
			radius = 0;
		}
		var len = 6;
		while(len-- > 0) {
			var dis = this.planes[len].distanceToPoint(v);
			if(dis < -radius) {
				return false;
			}
		}
		return true;
	}
	,intersectsSphere: function(v) {
		if(v == null) {
			return false;
		}
		return this.containsPoint(v.getCenter(),v.radius);
	}
	,intersectsBox: function(v) {
		if(v == null) {
			return false;
		}
		var v1 = lovedna_math_Vector3.get_one();
		var v2 = lovedna_math_Vector3.get_one();
		var len = 6;
		while(len-- > 0) {
			var plane = this.planes[len];
			var nx = plane.normal.x;
			var ny = plane.normal.y;
			var nz = plane.normal.z;
			v1.set(nx > 0 ? v.min.x : v.max.x,ny > 0 ? v.min.y : v.max.y,nz > 0 ? v.min.z : v.max.z);
			v2.set(nx > 0 ? v.max.x : v.min.x,ny > 0 ? v.max.y : v.min.y,nz > 0 ? v.max.z : v.min.z);
			if(plane.distanceToPoint(v1) < 0 && plane.distanceToPoint(v2) < 0) {
				return false;
			}
		}
		return true;
	}
	,multiplyMatrix44: function(value) {
		if(value == null) {
			return this;
		}
		var me0 = value.m0;
		var me1 = value.m1;
		var me2 = value.m2;
		var me3 = value.m3;
		var me4 = value.m4;
		var me5 = value.m5;
		var me6 = value.m6;
		var me7 = value.m7;
		var me8 = value.m8;
		var me9 = value.m9;
		var me10 = value.m10;
		var me11 = value.m11;
		var me12 = value.m12;
		var me13 = value.m13;
		var me14 = value.m14;
		var me15 = value.m15;
		this.planes[0].set(me3 + me2,me7 + me6,me11 + me10,me15 + me14);
		this.planes[1].set(me3 - me2,me7 - me6,me11 - me10,me15 - me14);
		this.planes[2].set(me3 + me0,me7 + me4,me11 + me8,me15 + me12);
		this.planes[3].set(me3 - me0,me7 - me4,me11 - me8,me15 - me12);
		this.planes[4].set(me3 - me1,me7 - me5,me11 - me9,me15 - me13);
		this.planes[5].set(me3 + me1,me7 + me5,me11 + me9,me15 + me13);
		return this;
	}
	,__class__: lovedna_geom_Frustum
};
var lovedna_geom_Plane = function() {
	this.normal = new lovedna_math_Vector3(0,0,1);
	this.distance = 0;
};
$hxClasses["lovedna.geom.Plane"] = lovedna_geom_Plane;
lovedna_geom_Plane.__name__ = ["lovedna","geom","Plane"];
lovedna_geom_Plane.prototype = {
	toString: function() {
		return "Plane(" + Std.string(this.normal) + " " + this.distance + ")";
	}
	,copy: function(v) {
		this.normal.copy(v.normal);
		this.distance = v.distance;
		return this;
	}
	,setFromNormalAndDistance: function(n,d) {
		this.normal.copy(n);
		this.distance = d;
		return this;
	}
	,setFromNormalAndPoint: function(n,p) {
		this.normal.copy(n);
		this.distance = -this.normal.dot(p);
		return this;
	}
	,SetFromPoints: function(p1,p2,p3) {
		var v = lovedna_math_Vector3.get_zero();
		v.copy(p1);
		v.sub(p2);
		this.normal.copy(p1);
		this.normal.sub(p3);
		this.normal.cross(v);
		this.normal.normalize();
		this.distance = -p1.dot(this.normal);
		return this;
	}
	,distanceToPoint: function(point) {
		return this.normal.dot(point) + this.distance;
	}
	,nearPoint: function(point) {
		var t = this.distanceToPoint(point);
		var v = lovedna_math_Vector3.get_one();
		v.copy(this.normal);
		v.scale(t);
		return lovedna_math_Vector3.get_one().copy(point).sub(v);
	}
	,set: function(x,y,z,distance) {
		this.normal.set(x,y,z);
		this.distance = distance;
		this.normalize();
	}
	,normalize: function() {
		var inverseNormaldistance = 1.0 / this.normal.get_length();
		this.normal.scale(inverseNormaldistance);
		this.distance *= inverseNormaldistance;
	}
	,__class__: lovedna_geom_Plane
};
var lovedna_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lovedna.math.Vector3"] = lovedna_math_Vector3;
lovedna_math_Vector3.__name__ = ["lovedna","math","Vector3"];
lovedna_math_Vector3.__interfaces__ = [lovedna_ds_IArrayAccess,lovedna_ds_IFillArray];
lovedna_math_Vector3.__properties__ = {get_one:"get_one",get_zero:"get_zero",get_left:"get_left",get_right:"get_right",get_down:"get_down",get_up:"get_up",get_backward:"get_backward",get_forward:"get_forward",get_temp:"get_temp"};
lovedna_math_Vector3.get_temp = function() {
	return lovedna_math_Vector3._pool.get();
};
lovedna_math_Vector3.get_forward = function() {
	return lovedna_math_Vector3.get_temp().set(0,0,1);
};
lovedna_math_Vector3.get_backward = function() {
	return lovedna_math_Vector3.get_temp().set(0,0,-1);
};
lovedna_math_Vector3.get_up = function() {
	return lovedna_math_Vector3.get_temp().set(0,1,0);
};
lovedna_math_Vector3.get_down = function() {
	return lovedna_math_Vector3.get_temp().set(0,-1,0);
};
lovedna_math_Vector3.get_right = function() {
	return lovedna_math_Vector3.get_temp().set(1,0,0);
};
lovedna_math_Vector3.get_left = function() {
	return lovedna_math_Vector3.get_temp().set(-1,0,0);
};
lovedna_math_Vector3.get_zero = function() {
	return lovedna_math_Vector3.get_temp().set(0,0,0);
};
lovedna_math_Vector3.get_one = function() {
	return lovedna_math_Vector3.get_temp().set(1,1,1);
};
lovedna_math_Vector3.prototype = {
	toString: function() {
		return this.fixed(4);
	}
	,fixed: function(decimalPlaces) {
		if(decimalPlaces == null) {
			decimalPlaces = 4;
		}
		return "Vector3(" + lovedna_utils_Helper.fixed(this.x,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.y,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.z,decimalPlaces) + ")";
	}
	,set: function(x,y,z) {
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,copy: function(v) {
		if(v == null || v == this) {
			return this;
		}
		return this.set(v.x,v.y,v.z);
	}
	,from: function(v) {
		return this.set(v.x,v.y,v.z);
	}
	,clone: function() {
		return new lovedna_math_Vector3(this.x,this.y,this.z);
	}
	,add: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x + n.x,m.y + n.y,m.z + n.z);
	}
	,sub: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x - n.x,m.y - n.y,m.z - n.z);
	}
	,mul: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x * n.x,m.y * n.y,m.z * n.z);
	}
	,dot: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return m.x * n.x + m.y * n.y + m.z * n.z;
	}
	,cross: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var xx = m.y * n.z - m.z * n.y;
		var yy = m.z * n.x - m.x * n.z;
		var zz = m.x * n.y - m.y * n.x;
		return this.set(xx,yy,zz);
	}
	,min: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(lovedna_utils_Helper.min(m.x,n.x),lovedna_utils_Helper.min(m.y,n.y),lovedna_utils_Helper.min(m.z,n.z));
	}
	,max: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(lovedna_utils_Helper.max(m.x,n.x),lovedna_utils_Helper.max(m.y,n.y),lovedna_utils_Helper.max(m.z,n.z));
	}
	,clamp: function(min,max) {
		return this.set(lovedna_utils_Helper.clamp(this.x,min.x,max.x),lovedna_utils_Helper.clamp(this.y,min.y,max.y),lovedna_utils_Helper.clamp(this.z,min.z,max.z));
	}
	,scale: function(v) {
		return this.set(this.x * v,this.y * v,this.z * v);
	}
	,negate: function() {
		return this.set(-this.x,-this.y,-this.z);
	}
	,normalize: function() {
		var len = this.get_length();
		if(len != 0) {
			return this.scale(1 / len);
		} else {
			return this.set(0,0,0);
		}
	}
	,distanceSquared: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var xx = m.x - n.x;
		var yy = m.y - n.y;
		var zz = m.z - n.z;
		return xx * xx + yy * yy + zz * zz;
	}
	,distance: function(a,b) {
		return Math.sqrt(this.distanceSquared(a,b));
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,isZero: function() {
		if(lovedna_utils_Helper.isZero(this.x) && lovedna_utils_Helper.isZero(this.y)) {
			return lovedna_utils_Helper.isZero(this.z);
		} else {
			return false;
		}
	}
	,isOne: function() {
		if(lovedna_utils_Helper.isZero(this.x - 1) && lovedna_utils_Helper.isZero(this.y - 1)) {
			return lovedna_utils_Helper.isZero(this.z - 1);
		} else {
			return false;
		}
	}
	,angleTo: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var l1 = m.get_length();
		var l2 = n.get_length();
		if(l1 > 0 && l2 > 0) {
			return lovedna_utils_Helper.radianToAngle(Math.acos(m.dot(n) / (l1 * l2)));
		}
		return 0;
	}
	,lerpTo: function(v,t) {
		if(t <= 0) {
			return this;
		}
		if(t >= 1) {
			return this.copy(v);
		}
		this.x += t * (v.x - this.x);
		this.y += t * (v.y - this.y);
		this.z += t * (v.z - this.z);
		return this;
	}
	,projectOnto: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var dot = n.dot(n);
		if(dot == 0) {
			return this.set(0,0,0);
		} else {
			var s = m.dot(n) / dot;
			return this.copy(b).scale(s);
		}
	}
	,projectOntoPlane: function(normal) {
		return this.sub(lovedna_math_Vector3.get_temp().projectOnto(normal));
	}
	,reflectBy: function(normal) {
		var projected = lovedna_math_Vector3.get_temp().copy(this).projectOnto(normal);
		projected.scale(2.0);
		return this.sub(projected);
	}
	,rotateLeft: function() {
		var newX = -this.y;
		this.y = this.x;
		this.x = newX;
		return this;
	}
	,rotateRight: function() {
		var newX = this.y;
		this.y = -this.x;
		this.x = newX;
		return this;
	}
	,getElement: function(index) {
		if(index < 0) {
			index %= 3;
			index += 3;
		} else if(index >= 3) {
			index %= 3;
		}
		if(index == 0) {
			return this.x;
		} else if(index == 1) {
			return this.y;
		} else {
			return this.z;
		}
	}
	,setElement: function(index,v) {
		if(index < 0) {
			index %= 3;
			index += 3;
		} else if(index >= 3) {
			index %= 3;
		}
		if(index == 0) {
			this.x = v;
		} else if(index == 1) {
			this.y = v;
		} else {
			this.z = v;
		}
	}
	,fillArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		list[offset++] = this.x;
		list[offset++] = this.y;
		list[offset++] = this.z;
	}
	,fromArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(list == null) {
			return this;
		}
		var len = list.length;
		if(offset < len) {
			this.x = list[offset++];
		}
		if(offset < len) {
			this.y = list[offset++];
		}
		if(offset < len) {
			this.z = list[offset++];
		}
		return this;
	}
	,get_length: function() {
		return Math.sqrt(this.get_lengthSq());
	}
	,get_lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lovedna_math_Vector3
	,__properties__: {get_lengthSq:"get_lengthSq",get_length:"get_length"}
};
var lovedna_geom_Ray = function() {
	this.start = new lovedna_math_Vector3();
	this.direction = new lovedna_math_Vector3();
};
$hxClasses["lovedna.geom.Ray"] = lovedna_geom_Ray;
lovedna_geom_Ray.__name__ = ["lovedna","geom","Ray"];
lovedna_geom_Ray.__properties__ = {get_temp:"get_temp"};
lovedna_geom_Ray.get_temp = function() {
	return lovedna_geom_Ray._pool.get();
};
lovedna_geom_Ray.prototype = {
	copy: function(v) {
		if(v == this) {
			return this;
		}
		this.start.copy(v.start);
		this.direction.copy(v.direction);
		return this;
	}
	,set: function(p1,p2) {
		this.start.copy(p1);
		this.direction.sub(p2,p1);
		this.direction.normalize();
		return this;
	}
	,at: function(t) {
		var v = lovedna_math_Vector3.get_temp();
		v.copy(this.direction);
		v.scale(t);
		v.add(this.start);
		return v;
	}
	,lookAt: function(v) {
		this.direction.copy(v).sub(this.start).normalize();
		return this;
	}
	,closestPoint: function(point) {
		var v = lovedna_math_Vector3.get_temp();
		v.sub(point,this.start);
		var directionDistance = v.dot(this.direction);
		if(directionDistance < 0) {
			v.copy(this.start);
		} else {
			this.at(directionDistance);
		}
		return v;
	}
	,DistanceToPoint: function(point) {
		var v = lovedna_math_Vector3.get_temp();
		v.sub(point,this.start);
		var directionDistance = v.dot(this.direction);
		var dis = 0;
		if(directionDistance < 0) {
			dis = this.start.distance(point);
		} else {
			dis = this.at(directionDistance).distance(point);
		}
		return dis;
	}
	,DistanceToPlane: function(plane) {
		var denominator = plane.normal.dot(this.direction);
		if(denominator == 0) {
			if(plane.distanceToPoint(this.start) == 0) {
				return 0;
			}
			return -1;
		}
		var t = -(this.start.dot(plane.normal) + plane.distance) / denominator;
		if(t >= 0) {
			return t;
		} else {
			return -1;
		}
	}
	,intersectPlane: function(plane) {
		var t = this.DistanceToPlane(plane);
		if(t == -1) {
			return null;
		}
		return this.at(t);
	}
	,crossPlane: function(v) {
		var distToPoint = v.distanceToPoint(this.start);
		if(distToPoint == 0) {
			return true;
		}
		var denominator = v.normal.dot(this.direction);
		if(denominator * distToPoint < 0) {
			return true;
		}
		return false;
	}
	,intersectSphere: function(v) {
		var v1 = lovedna_math_Vector3.get_temp();
		v1.sub(v.getCenter(),this.start);
		var tca = this.direction.dot(v1);
		var d2 = v1.dot(v1) - tca * tca;
		var radius2 = v.radius * v.radius;
		if(d2 > radius2) {
			return null;
		}
		var thc = Math.sqrt(radius2 - d2);
		var t0 = tca - thc;
		var t1 = tca + thc;
		if(t0 < 0 && t1 < 0) {
			return null;
		}
		if(t0 < 0) {
			return this.at(t1);
		}
		return this.at(t0);
	}
	,crossSphere: function(v) {
		if(v == null) {
			return false;
		}
		return this.DistanceToPoint(v.getCenter()) <= v.radius;
	}
	,intersectBox: function(v) {
		var box = v;
		var tmin;
		var tmax;
		var tymin;
		var tymax;
		var tzmin;
		var tzmax;
		var invdirx = this.direction.x != 0 ? 1 / this.direction.x : 0;
		var invdiry = this.direction.y != 0 ? 1 / this.direction.y : 0;
		var invdirz = this.direction.z != 0 ? 1 / this.direction.z : 0;
		var origin = this.start;
		if(invdirx >= 0) {
			tmin = (box.min.x - origin.x) * invdirx;
			tmax = (box.max.x - origin.x) * invdirx;
		} else {
			tmin = (box.max.x - origin.x) * invdirx;
			tmax = (box.min.x - origin.x) * invdirx;
		}
		if(invdiry >= 0) {
			tymin = (box.min.y - origin.y) * invdiry;
			tymax = (box.max.y - origin.y) * invdiry;
		} else {
			tymin = (box.max.y - origin.y) * invdiry;
			tymax = (box.min.y - origin.y) * invdiry;
		}
		if(tmin > tymax || tymin > tmax) {
			return null;
		}
		if(tymin > tmin || tmin != tmin) {
			tmin = tymin;
		}
		if(tymax < tmax || tmax != tmax) {
			tmax = tymax;
		}
		if(invdirz >= 0) {
			tzmin = (box.min.z - origin.z) * invdirz;
			tzmax = (box.max.z - origin.z) * invdirz;
		} else {
			tzmin = (box.max.z - origin.z) * invdirz;
			tzmax = (box.min.z - origin.z) * invdirz;
		}
		if(tmin > tzmax || tzmin > tmax) {
			return null;
		}
		if(tzmin > tmin || tmin != tmin) {
			tmin = tzmin;
		}
		if(tzmax < tmax || tmax != tmax) {
			tmax = tzmax;
		}
		if(tmax < 0) {
			return null;
		}
		return this.at(tmin >= 0 ? tmin : tmax);
	}
	,intersectTriangle: function(a,b,c,backfaceCulling) {
		if(backfaceCulling == null) {
			backfaceCulling = false;
		}
		var diff = lovedna_math_Vector3.get_temp();
		var edge1 = lovedna_math_Vector3.get_temp();
		var edge2 = lovedna_math_Vector3.get_temp();
		var normal = lovedna_math_Vector3.get_temp();
		edge1.sub(b,a);
		edge2.sub(c,a);
		normal.cross(edge1,edge2);
		var DdN = this.direction.dot(normal);
		var sign = 0;
		if(DdN > 0) {
			if(backfaceCulling) {
				return null;
			}
			sign = 1;
		} else if(DdN < 0) {
			sign = -1;
			DdN = -DdN;
		} else {
			return null;
		}
		diff.sub(this.start,a);
		var DdQxE2 = sign * this.direction.dot(edge2.cross(diff,edge2));
		if(DdQxE2 < 0) {
			return null;
		}
		var DdE1xQ = sign * this.direction.dot(edge1.cross(diff));
		if(DdE1xQ < 0) {
			return null;
		}
		if(DdQxE2 + DdE1xQ > DdN) {
			return null;
		}
		var QdN = -sign * diff.dot(normal);
		if(QdN < 0) {
			return null;
		}
		return this.at(QdN / DdN);
	}
	,multiplyMatrix44: function(v) {
		v.transformVector(this.direction.add(this.start));
		v.transformVector(this.start);
		this.direction.sub(this.start);
		this.direction.normalize();
		return this;
	}
	,toString: function() {
		return "Ray(" + Std.string(this.start) + " " + Std.string(this.direction) + ")";
	}
	,__class__: lovedna_geom_Ray
};
var lovedna_geom_Sphere = function() {
	this.radius = 0;
	this.center = new lovedna_math_Vector3(0,0,0);
	this.enabled = true;
};
$hxClasses["lovedna.geom.Sphere"] = lovedna_geom_Sphere;
lovedna_geom_Sphere.__name__ = ["lovedna","geom","Sphere"];
lovedna_geom_Sphere.__interfaces__ = [lovedna_geom_Shape3D];
lovedna_geom_Sphere.prototype = {
	toString: function() {
		return "Sphere[" + Std.string(this.center) + " " + this.radius + "]";
	}
	,getCenter: function() {
		return this.center;
	}
	,getFarthestPointInDirection: function(direction) {
		return lovedna_math_Vector3.get_one().copy(direction).normalize().scale(this.radius).add(this.center);
	}
	,set: function(center,radius) {
		this.center.copy(center);
		this.radius = radius;
		return this;
	}
	,copy: function(v) {
		if(v == this) {
			return this;
		}
		return this.set(v.center,v.radius);
	}
	,multiplyMatrix44: function(v) {
		v.transformVector(this.center);
		this.radius *= v.getScaleX();
		return this;
	}
	,containsPoint: function(v) {
		return v.distanceSquared(this.center) <= this.radius * this.radius;
	}
	,distanceToPoint: function(v) {
		return v.distance(this.center) - this.radius;
	}
	,intersectsSphere: function(v) {
		var radiusSum = this.radius + v.radius;
		return v.center.distanceSquared(this.center) <= radiusSum * radiusSum;
	}
	,equals: function(v) {
		if(this.center.equals(v.center)) {
			return this.radius == v.radius;
		} else {
			return false;
		}
	}
	,__class__: lovedna_geom_Sphere
};
var lovedna_math_HsvColor = function(h,s,v) {
	if(v == null) {
		v = 1;
	}
	if(s == null) {
		s = 1;
	}
	if(h == null) {
		h = 0;
	}
	this.h = h;
	this.s = s;
	this.v = v;
};
$hxClasses["lovedna.math.HsvColor"] = lovedna_math_HsvColor;
lovedna_math_HsvColor.__name__ = ["lovedna","math","HsvColor"];
lovedna_math_HsvColor.prototype = {
	set: function(h,s,v) {
		if(v == null) {
			v = 1;
		}
		if(s == null) {
			s = 1;
		}
		if(h == null) {
			h = 0;
		}
		this.h = h;
		this.s = s;
		this.v = v;
		return this;
	}
	,fromColor: function(color) {
		var r = 255.0 * color.get_r();
		var g = 255.0 * color.get_g();
		var b = 255.0 * color.get_b();
		var max = lovedna_utils_Helper.max(r,g);
		max = lovedna_utils_Helper.max(max,b);
		var min = lovedna_utils_Helper.min(r,g);
		min = lovedna_utils_Helper.min(min,b);
		this.v = max / 255;
		this.s = (max - min) / max;
		var i = (max - min) * 60;
		if(r == max) {
			this.h = (g - b) / i;
		}
		if(g == max) {
			this.h = 120 + (b - r) / i;
		}
		if(b == max) {
			this.h = 240 + (r - g) / i;
		}
		if(this.h < 0) {
			this.h += 360;
		}
		return this;
	}
	,toColor: function() {
		var color = new lovedna_math_Color();
		if(this.s == 0) {
			color.set(this.v,this.v,this.v,1);
			return color;
		}
		var hh = this.h % 360;
		var ii = hh / 60;
		var i = Std["int"](ii);
		var f = ii - i;
		var a = this.v * (1 - this.s);
		var b = this.v * (1 - this.s * f);
		var c = this.v * (1 - this.s * (1 - f));
		switch(i) {
		case 0:
			color.set(this.v,c,a,1);
			break;
		case 1:
			color.set(b,this.v,a,1);
			break;
		case 2:
			color.set(a,this.v,c,1);
			break;
		case 3:
			color.set(a,b,this.v,1);
			break;
		case 4:
			color.set(c,a,this.v,1);
			break;
		case 5:
			color.set(this.v,a,b,1);
			break;
		}
		return color;
	}
	,__class__: lovedna_math_HsvColor
};
var lovedna_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["lovedna.math.Quaternion"] = lovedna_math_Quaternion;
lovedna_math_Quaternion.__name__ = ["lovedna","math","Quaternion"];
lovedna_math_Quaternion.__interfaces__ = [lovedna_ds_IArrayAccess,lovedna_ds_IFillArray];
lovedna_math_Quaternion.__properties__ = {get_temp:"get_temp"};
lovedna_math_Quaternion.get_temp = function() {
	return lovedna_math_Quaternion._pool.get();
};
lovedna_math_Quaternion.prototype = {
	toString: function() {
		return this.fixed(4);
	}
	,fixed: function(decimalPlaces) {
		if(decimalPlaces == null) {
			decimalPlaces = 4;
		}
		return "Quaternion(" + lovedna_utils_Helper.fixed(this.x,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.y,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.z,decimalPlaces) + "," + lovedna_utils_Helper.fixed(this.w,decimalPlaces) + ")";
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,copy: function(v) {
		if(v == null || v == this) {
			return this;
		}
		return this.set(v.x,v.y,v.z,v.w);
	}
	,from: function(v) {
		return this.set(v.x,v.y,v.z,v.w);
	}
	,clone: function() {
		return new lovedna_math_Quaternion(this.x,this.y,this.z,this.w);
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y && this.z == v.z) {
			return this.w == v.w;
		} else {
			return false;
		}
	}
	,add: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x + n.x,m.y + n.y,m.z + n.z,m.w + n.w);
	}
	,sub: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return this.set(m.x - n.x,m.y - n.y,m.z - n.z,m.w - n.w);
	}
	,dot: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		return m.x * n.x + m.y * n.y + m.z * n.z + m.w * n.w;
	}
	,identity: function() {
		return this.set(0,0,0,1);
	}
	,isIdentity: function() {
		if(this.x == 0 && this.y == 0 && this.z == 0) {
			return this.w == 1;
		} else {
			return false;
		}
	}
	,isZero: function() {
		if(this.x == 0 && this.y == 0 && this.z == 0) {
			return this.w == 1;
		} else {
			return false;
		}
	}
	,normalize: function() {
		var l = this.get_length();
		if(l == 0) {
			return this.identity();
		}
		l = 1 / l;
		return this.set(this.x * l,this.y * l,this.z * l,this.w * l);
	}
	,inverse: function() {
		return this.conjugate().normalize();
	}
	,conjugate: function() {
		return this.set(this.x * -1,this.y * -1,this.z * -1,this.w);
	}
	,mul: function(a,b) {
		var one = b == null;
		var m = one ? this : a;
		var n = one ? a : b;
		var newX = m.w * n.x + m.x * n.w + m.y * n.z - m.z * n.y;
		var newY = m.w * n.y + m.y * n.w + m.z * n.x - m.x * n.z;
		var newZ = m.w * n.z + m.z * n.w + m.x * n.y - m.y * n.x;
		var newW = m.w * n.w - m.x * n.x - m.y * n.y - m.z * n.z;
		return this.set(newX,newY,newZ,newW);
	}
	,rotate: function(v) {
		var vx = v.x;
		var vy = v.y;
		var vz = v.z;
		var ix = this.w * vx + this.y * vz - this.z * vy;
		var iy = this.w * vy + this.z * vx - this.x * vz;
		var iz = this.w * vz + this.x * vy - this.y * vx;
		var iw = -this.x * vx - this.y * vy - this.z * vz;
		var vx1 = ix * this.w + iw * -this.x + iy * -this.z - iz * -this.y;
		var vy1 = iy * this.w + iw * -this.y + iz * -this.x - ix * -this.z;
		var vz1 = iz * this.w + iw * -this.z + ix * -this.y - iy * -this.x;
		return v.set(vx1,vy1,vz1);
	}
	,setEulerAngles: function(pitch,yaw,roll) {
		if(roll == null) {
			roll = 0;
		}
		if(yaw == null) {
			yaw = 0;
		}
		if(pitch == null) {
			pitch = 0;
		}
		pitch = lovedna_utils_Helper.angleToRadian(pitch);
		yaw = lovedna_utils_Helper.angleToRadian(yaw);
		roll = lovedna_utils_Helper.angleToRadian(roll);
		var sin = Math.sin;
		var cos = Math.cos;
		var hr = roll * 0.5;
		var shr = sin(hr);
		var chr = cos(hr);
		var hp = pitch * 0.5;
		var shp = sin(hp);
		var chp = cos(hp);
		var hy = yaw * 0.5;
		var shy = sin(hy);
		var chy = cos(hy);
		var chy_shp = chy * shp;
		var shy_chp = shy * chp;
		var chy_chp = chy * chp;
		var shy_shp = shy * shp;
		this.x = chy_shp * chr + shy_chp * shr;
		this.y = shy_chp * chr - chy_shp * shr;
		this.z = chy_chp * shr - shy_shp * chr;
		this.w = chy_chp * chr + shy_shp * shr;
		return this;
	}
	,getEulerAngles: function(target) {
		if(target == null) {
			target = lovedna_math_Vector3.get_temp();
		}
		var sqw = this.w * this.w;
		var sqx = this.x * this.x;
		var sqy = this.y * this.y;
		var sqz = this.z * this.z;
		var t = this.y * this.x + this.z * this.w;
		var pole = t > 0.4999 ? 1 : t < -0.4999 ? -1 : 0;
		if(pole == 0) {
			target.x = Math.asin(lovedna_utils_Helper.clamp(2 * (this.w * this.x - this.z * this.y),-1,1));
			target.y = Math.atan2(2 * (this.y * this.w + this.x * this.z),1 - 2 * (sqy + sqx));
			target.z = Math.atan2(2 * (this.w * this.z + this.y * this.x),1 - 2 * (sqx + sqz));
		} else {
			target.x = pole * 1.5707963267948966192313216916398;
			target.y = 0;
			target.z = pole * 2 * Math.atan2(this.y,this.w);
		}
		target.scale(57.295779513082320876798154814105);
		return target;
	}
	,distance: function(a,b) {
		var dot = this.dot(a,b);
		return 1 - dot * dot;
	}
	,angle: function(a,b) {
		var dot = this.dot(a,b);
		return lovedna_utils_Helper.radianToAngle(Math.acos(2 * dot * dot - 1));
	}
	,lookAt: function(a,b,up) {
		return this.setLookAt(lovedna_math_Vector3.get_temp().sub(b,a).normalize(),up);
	}
	,setLookAt: function(forward,up) {
		if(up == null) {
			up = lovedna_math_Vector3.get_up();
		}
		var v1 = lovedna_math_Vector3.get_temp();
		var v2 = lovedna_math_Vector3.get_temp();
		v1.copy(up).cross(forward).normalize();
		v2.copy(forward).cross(v1).normalize();
		this.setFromAxes(v1.x,v2.x,forward.x,v1.y,v2.y,forward.y,v1.z,v2.z,forward.z);
		return this;
	}
	,setFromAxes: function(xx,xy,xz,yx,yy,yz,zx,zy,zz) {
		var t = xx + yy + zz;
		if(t >= 0) {
			var s = Math.sqrt(t + 1);
			this.w = 0.5 * s;
			s = 0.5 / s;
			this.x = (zy - yz) * s;
			this.y = (xz - zx) * s;
			this.z = (yx - xy) * s;
		} else if(xx > yy && xx > zz) {
			var s1 = Math.sqrt(1.0 + xx - yy - zz);
			this.x = s1 * 0.5;
			s1 = 0.5 / s1;
			this.y = (yx + xy) * s1;
			this.z = (xz + zx) * s1;
			this.w = (zy - yz) * s1;
		} else if(yy > zz) {
			var s2 = Math.sqrt(1.0 + yy - xx - zz);
			this.y = s2 * 0.5;
			s2 = 0.5 / s2;
			this.x = (yx + xy) * s2;
			this.z = (zy + yz) * s2;
			this.w = (xz - zx) * s2;
		} else {
			var s3 = Math.sqrt(1.0 + zz - xx - yy);
			this.z = s3 * 0.5;
			s3 = 0.5 / s3;
			this.x = (xz + zx) * s3;
			this.y = (zy + yz) * s3;
			this.w = (yx - xy) * s3;
		}
		return this;
	}
	,slerpTo: function(end,alpha) {
		if(alpha <= 0) {
			return this;
		}
		if(alpha >= 1) {
			this.copy(end);
			return this;
		}
		var d = this.dot(end);
		var absDot = lovedna_utils_Helper.abs(d);
		var scale0 = 1 - alpha;
		var scale1 = alpha;
		if(1 - absDot > 0.1) {
			var angle = Math.acos(absDot);
			var sin = Math.sin;
			var invSinTheta = 1 / sin(angle);
			scale0 = sin((1 - alpha) * angle) * invSinTheta;
			scale1 = sin(alpha * angle) * invSinTheta;
		}
		if(d < 0) {
			scale1 = -scale1;
		}
		return this.set(scale0 * this.x + scale1 * end.x,scale0 * this.y + scale1 * end.y,scale0 * this.z + scale1 * end.z,scale0 * this.w + scale1 * end.w);
	}
	,slerp: function(a,b,t) {
		this.copy(a);
		var _x = this.x;
		var _y = this.y;
		var _z = this.z;
		var _w = this.w;
		var cosHalfTheta = this.w * b.w + this.x * b.x + this.y * b.y + this.z * b.z;
		if(cosHalfTheta < 0) {
			this.w = -b.w;
			this.x = -b.x;
			this.y = -b.y;
			this.z = -b.z;
			cosHalfTheta = -cosHalfTheta;
		} else {
			this.copy(b);
		}
		if(cosHalfTheta >= 1.0) {
			this.w = _w;
			this.x = _x;
			this.y = _y;
			this.z = _z;
			return this;
		}
		var halfTheta = Math.acos(cosHalfTheta);
		var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
		if(Math.abs(sinHalfTheta) < 0.001) {
			this.w = 0.5 * (_w + this.w);
			this.x = 0.5 * (_x + this.x);
			this.y = 0.5 * (_y + this.y);
			this.z = 0.5 * (_z + this.z);
			return this;
		}
		var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
		var ratioB = Math.sin(t * halfTheta) / sinHalfTheta;
		this.w = _w * ratioA + this.w * ratioB;
		this.x = _x * ratioA + this.x * ratioB;
		this.y = _y * ratioA + this.y * ratioB;
		this.z = _z * ratioA + this.z * ratioB;
		return this;
	}
	,getElement: function(index) {
		if(index < 0) {
			index %= 4;
			index += 4;
		} else if(index >= 4) {
			index %= 4;
		}
		switch(index) {
		case 0:
			return this.x;
		case 1:
			return this.y;
		case 2:
			return this.z;
		case 3:
			return this.w;
		}
		return 0;
	}
	,setElement: function(index,v) {
		if(index < 0) {
			index %= 4;
			index += 4;
		} else if(index >= 4) {
			index %= 4;
		}
		switch(index) {
		case 0:
			this.x = v;
			break;
		case 1:
			this.y = v;
			break;
		case 2:
			this.z = v;
			break;
		case 3:
			this.w = v;
			break;
		}
	}
	,fillArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		list[offset++] = this.x;
		list[offset++] = this.y;
		list[offset++] = this.z;
		list[offset++] = this.w;
	}
	,fromArray: function(list,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(list == null) {
			return this;
		}
		var len = list.length;
		if(offset < len) {
			this.x = list[offset++];
		}
		if(offset < len) {
			this.y = list[offset++];
		}
		if(offset < len) {
			this.z = list[offset++];
		}
		if(offset < len) {
			this.w = list[offset++];
		}
		return this;
	}
	,get_lengthSq: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	}
	,get_length: function() {
		return Math.sqrt(this.get_lengthSq());
	}
	,__class__: lovedna_math_Quaternion
	,__properties__: {get_lengthSq:"get_lengthSq",get_length:"get_length"}
};
var lovedna_net_BytesLoader = function() {
	this._workerState = 0;
};
$hxClasses["lovedna.net.BytesLoader"] = lovedna_net_BytesLoader;
lovedna_net_BytesLoader.__name__ = ["lovedna","net","BytesLoader"];
lovedna_net_BytesLoader.prototype = {
	load: function(url) {
		debugger;
		if(lovedna_net_BytesLoader.workerEnable && this._workerState == 0) {
			var w = window.Worker;
			this._workerState = w == null ? -1 : 1;
		}
		if(lovedna_net_BytesLoader.workerEnable && this._workerState == 1) {
			this._worker = new Worker("worker.js");
			this._worker.postMessage(url);
			this._worker.onmessage = $bind(this,this.onWorkerMessage);
		} else {
			if(this._xmlHttpRequest == null) {
				this._xmlHttpRequest = new XMLHttpRequest();
			}
			this.bytes = null;
			this._xmlHttpRequest.responseType = "arraybuffer";
			this._xmlHttpRequest.onreadystatechange = $bind(this,this.readyStateChange);
			this._xmlHttpRequest.open("GET",url,true);
			try {
				this._xmlHttpRequest.send(null);
			} catch( e ) {
				haxe_Log.trace("load error",{ fileName : "BytesLoader.hx", lineNumber : 78, className : "lovedna.net.BytesLoader", methodName : "load"});
			}
		}
	}
	,readyStateChange: function(e) {
		if(this._xmlHttpRequest.readyState != 4) {
			return;
		}
		var status = this._xmlHttpRequest.status;
		if(status >= 200 && status < 400 || status == 0 && this._xmlHttpRequest.statusText == "") {
			var arrayBuffer = this._xmlHttpRequest.response;
			if(arrayBuffer != null) {
				this.bytes = haxe_io_Bytes.ofData(arrayBuffer);
			} else if(this._xmlHttpRequest.responseText != null) {
				var data = VBArray(request.responseText).toArray();
				this.bytes = haxe_io_Bytes.alloc(data.length);
				var _g1 = 0;
				var _g = data.length;
				while(_g1 < _g) {
					var i = _g1++;
					this.bytes.set(i,data[i]);
				}
			}
		}
		this._xmlHttpRequest = null;
		if(this.onComplete != null) {
			this.onComplete(this);
		}
	}
	,onWorkerMessage: function(e) {
		haxe_Log.trace("from woker ",{ fileName : "BytesLoader.hx", lineNumber : 113, className : "lovedna.net.BytesLoader", methodName : "onWorkerMessage"});
		this.bytes = haxe_io_Bytes.ofData(e.data);
		if(this.onComplete != null) {
			this.onComplete(this);
		}
	}
	,__class__: lovedna_net_BytesLoader
};
var lovedna_net_FileData = function() {
	lovedna_events_EventDispatcher.call(this);
	this.forceBytes = false;
};
$hxClasses["lovedna.net.FileData"] = lovedna_net_FileData;
lovedna_net_FileData.__name__ = ["lovedna","net","FileData"];
lovedna_net_FileData.__super__ = lovedna_events_EventDispatcher;
lovedna_net_FileData.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	setType: function(v) {
		this.type = v;
		if(v == lovedna_net_FileType.BYTES) {
			this.forceBytes = true;
		}
		return this;
	}
	,setPath: function(v) {
		this.path = v;
		if(this.type == null) {
			this.type = lovedna_net_FileType.BYTES;
			var extension = v.split(".").pop().toLowerCase();
			switch(extension) {
			case "gif":case "jpeg":case "jpg":case "png":
				this.type = lovedna_net_FileType.IMAGE;
				break;
			case "mp2":case "mp3":
				break;
			case "m4a":case "ogg":case "wav":
				break;
			case "otf":case "ttf":
				break;
			case "css":case "json":case "plist":case "svg":case "text":case "txt":case "xml":
				this.type = lovedna_net_FileType.TEXT;
				this.forceBytes = true;
				break;
			default:
				this.type = lovedna_net_FileType.BYTES;
				this.forceBytes = true;
			}
		}
		return this;
	}
	,setUrl: function(v) {
		this.url = v;
		return this;
	}
	,get_key: function() {
		if(this._key != null) {
			return this._key;
		}
		lovedna_net_FileData._fnv.reset();
		lovedna_net_FileData._fnv.addString(this.url);
		lovedna_net_FileData._fnv.addInt(Type.enumIndex(this.type));
		this._key = lovedna_net_FileData._fnv.getString();
		return this._key;
	}
	,get_enabled: function() {
		if(!(this.bytes != null || this.text != null || this.image != null)) {
			return this.video != null;
		} else {
			return true;
		}
	}
	,__class__: lovedna_net_FileData
	,__properties__: {get_enabled:"get_enabled",get_key:"get_key"}
});
var lovedna_net_Path = function(v) {
	this.set(v);
};
$hxClasses["lovedna.net.Path"] = lovedna_net_Path;
lovedna_net_Path.__name__ = ["lovedna","net","Path"];
lovedna_net_Path.normalize = function(value) {
	if(value == null) {
		return null;
	}
	var slash = "/";
	value = value.split("\\").join("/");
	if(value == null || value == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = value.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var regex = new EReg("([^:])/+","g");
	var result = regex.replace(tmp,"$1" + slash);
	var acc = new StringBuf();
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = HxOverrides.cca(tmp,i);
		if(_g21 == null) {
			var i1 = _g21;
			colon = false;
			if(slashes) {
				acc.add("/");
				slashes = false;
			}
			acc.add(String.fromCharCode(i1));
		} else {
			switch(_g21) {
			case 47:
				if(colon == false) {
					slashes = true;
				} else {
					var i2 = _g21;
					colon = false;
					if(slashes) {
						acc.add("/");
						slashes = false;
					}
					acc.add(String.fromCharCode(i2));
				}
				break;
			case 58:
				acc.add(":");
				colon = true;
				break;
			default:
				var i3 = _g21;
				colon = false;
				if(slashes) {
					acc.add("/");
					slashes = false;
				}
				acc.add(String.fromCharCode(i3));
			}
		}
	}
	var result1 = acc.toString();
	return result1;
};
lovedna_net_Path.Combine = function(a,b) {
	if(a == "" || a == null) {
		return b;
	} else if(b == null || b == "") {
		return a;
	}
	if(a == "") {
		return b;
	} else {
		return lovedna_net_Path.addSlash(a) + lovedna_net_Path.removeSlash(b);
	}
};
lovedna_net_Path.addSlash = function(value) {
	if(value.length == 0) {
		return "/";
	}
	var c1 = value.lastIndexOf("/");
	var c2 = value.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != value.length - 1) {
			return value + "\\";
		} else {
			return value;
		}
	} else if(c1 != value.length - 1) {
		return value + "/";
	} else {
		return value;
	}
};
lovedna_net_Path.removeSlash = function(value) {
	try {
		while(true) {
			var _g = HxOverrides.cca(value,value.length - 1);
			if(_g == null) {
				throw "__break__";
			} else {
				switch(_g) {
				case 47:case 92:
					value = HxOverrides.substr(value,0,-1);
					break;
				default:
					throw "__break__";
				}
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	try {
		while(true) {
			var _g1 = HxOverrides.cca(value,0);
			if(_g1 == null) {
				throw "__break__";
			} else {
				switch(_g1) {
				case 47:case 92:
					value = HxOverrides.substr(value,1,null);
					break;
				default:
					throw "__break__";
				}
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	return value;
};
lovedna_net_Path.prototype = {
	toString: function() {
		return (this._dir == null ? "" : this._dir + (this._leftslash ? "/" : "\\")) + (this._file == null ? "" : this._file) + (this._ext == null ? "" : "." + this._ext);
	}
	,getHashKey: function() {
		lovedna_net_Path._fnv.reset();
		lovedna_net_Path._fnv.addString(this.toString());
		return lovedna_net_Path._fnv.getString();
	}
	,getDir: function() {
		return this._dir;
	}
	,getPathWithoutExt: function() {
		return lovedna_net_Path.Combine(this._dir,this._file);
	}
	,getFile: function() {
		return this._file + "." + this._ext;
	}
	,getExt: function() {
		return this._ext;
	}
	,getFileWithoutExt: function() {
		return this._file;
	}
	,getParams: function() {
		return this._param;
	}
	,getParent: function() {
		var dir = this.getDir();
		if(dir == null || dir == "") {
			return null;
		}
		lovedna_net_Path.instance.set(lovedna_net_Path.normalize(dir));
		var dir1 = lovedna_net_Path.instance.getDir();
		if(dir1 == null || dir1 == "") {
			return null;
		}
		var path = new lovedna_net_Path();
		path.set(dir1);
		return path;
	}
	,isAbs: function() {
		if(StringTools.startsWith(this._value,"/")) {
			return true;
		}
		if(this._value.charAt(1) == ":") {
			return true;
		}
		return false;
	}
	,isHttp: function() {
		var pref = HxOverrides.substr(this._value,0,7);
		if(pref != "http://") {
			return pref == "https:/";
		} else {
			return true;
		}
	}
	,set: function(value) {
		this._value = value;
		this.clear();
		if(value == "" || value == null) {
			return this;
		}
		switch(value) {
		case ".":case "..":
			this._dir = value;
			this._file = "";
			return this;
		}
		var c1 = value.lastIndexOf("/");
		var c2 = value.lastIndexOf("\\");
		if(c1 < c2) {
			this._dir = HxOverrides.substr(value,0,c2);
			value = HxOverrides.substr(value,c2 + 1,null);
			this._leftslash = false;
		} else if(c2 < c1) {
			this._dir = HxOverrides.substr(value,0,c1);
			value = HxOverrides.substr(value,c1 + 1,null);
			this._leftslash = true;
		} else {
			this._dir = null;
		}
		var p = value.indexOf("?");
		if(p != -1) {
			var list = value.split("?");
			value = list.shift();
			this._param = list.join("?");
		}
		var cp = value.lastIndexOf(".");
		if(cp != -1) {
			this._ext = HxOverrides.substr(value,cp + 1,null);
			this._file = HxOverrides.substr(value,0,cp);
		} else {
			this._ext = null;
			this._file = value;
		}
		return this;
	}
	,clear: function() {
		this._dir = null;
		this._file = null;
		this._ext = null;
		this._param = null;
		this._leftslash = false;
	}
	,__class__: lovedna_net_Path
};
var lovedna_net_FileLoader = function() {
	lovedna_events_EventDispatcher.call(this);
	this._bytesLoader = new lovedna_net_BytesLoader();
	this._bytesLoader.onComplete = $bind(this,this.onBytesComplete);
	this._fileList = new lovedna_ds_FastArray();
};
$hxClasses["lovedna.net.FileLoader"] = lovedna_net_FileLoader;
lovedna_net_FileLoader.__name__ = ["lovedna","net","FileLoader"];
lovedna_net_FileLoader.setGlobalRoot = function(url) {
	if(lovedna_net_FileLoader._defaultRoot.length > 0) {
		return;
	}
	if(url == null) {
		url = "";
	}
	lovedna_net_FileLoader._defaultRoot = url;
	lovedna_net_FileLoader._path.set(lovedna_net_FileLoader._defaultRoot);
	if(lovedna_net_FileLoader._path.isHttp()) {
		lovedna_net_FileLoader._defaultRoot = lovedna_net_FileLoader._path.toString() + "/";
	}
	if(!lovedna_utils_Helper.endWith(lovedna_net_FileLoader._defaultRoot,"/")) {
		lovedna_net_FileLoader._defaultRoot += "/";
	}
};
lovedna_net_FileLoader.setVersiton = function(url,version) {
	lovedna_net_FileLoader._version.set(url,version);
};
lovedna_net_FileLoader.__super__ = lovedna_events_EventDispatcher;
lovedna_net_FileLoader.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	load: function(url,type) {
		var _gthis = this;
		var f = new lovedna_net_FileData();
		lovedna_net_FileLoader._path.set(url);
		var path = lovedna_net_FileLoader._path.toString();
		f.setType(type).setPath(path);
		if(lovedna_net_FileLoader._path.isHttp()) {
			f.setUrl(url);
		} else {
			var v = "";
			if(lovedna_net_FileLoader._version.exists(url)) {
				v = lovedna_net_FileLoader._version.get(url);
			} else {
				var info = lovedna_net_FileLoader.meta.getMeta(url);
				if(info != null) {
					v = info.crc + "";
				} else {
					v = "";
				}
				lovedna_net_FileLoader._version.set(url,v);
			}
			f.setUrl(lovedna_net_FileLoader._defaultRoot + path + "?v=" + v);
		}
		var key = f.get_key();
		if(!lovedna_net_FileLoader._fileMap.exists(key)) {
			lovedna_net_FileLoader._fileMap.set(key,f);
			this._fileList.push(f);
			lovedna_net_FileLoader._list.push(this);
			if(!lovedna_net_FileLoader._loading) {
				if(lovedna_net_FileLoader._delayCall == null) {
					lovedna_net_FileLoader._delayCall = new lovedna_task_DelayCall(function() {
						_gthis._loadnext();
					});
				}
				if(!lovedna_net_FileLoader._delayCall.running) {
					lovedna_task_DelayCall.add(lovedna_net_FileLoader._delayCall,0.1);
				}
			}
		} else {
			f = lovedna_net_FileLoader._fileMap.get(key);
		}
		return f;
	}
	,_loadnext: function() {
		if(lovedna_net_FileLoader._loading) {
			return;
		}
		if(lovedna_net_FileLoader._list.get_length() == 0) {
			return;
		}
		var loader = lovedna_net_FileLoader._list.shift();
		loader._load();
	}
	,_load: function() {
		var _gthis = this;
		if(this._fileList.get_length() < 1) {
			this._loadnext();
			return;
		}
		this._current = this._fileList.shift();
		lovedna_net_FileLoader._loading = true;
		if(this._current.forceBytes) {
			this._bytesLoader.load(this._current.url);
		} else if(this._current.type == lovedna_net_FileType.IMAGE) {
			var img = new lovedna_resource_Image();
			img.fromUrl(this._current.url,function(img1) {
				_gthis._current.image = img1;
				_gthis.completeFile();
			});
		} else {
			this.completeFile();
		}
	}
	,onBytesComplete: function(loader) {
		var _gthis = this;
		this._current.bytes = loader.bytes;
		if(this._current.type == lovedna_net_FileType.IMAGE) {
			var img = new lovedna_resource_Image();
			img.fromBytes(loader.bytes,function(img1) {
				_gthis._current.image = img1;
				_gthis.completeFile();
			});
		} else {
			this.completeFile();
		}
	}
	,completeFile: function() {
		lovedna_net_FileLoader._loading = false;
		lovedna_net_FileLoader._fileMap.remove(this._current.get_key());
		this._current.dispatchEvent(lovedna_events_Event.complete);
		this._loadnext();
	}
	,__class__: lovedna_net_FileLoader
});
var lovedna_net_FileType = { __ename__ : true, __constructs__ : ["NULL","BYTES","IMAGE","TEXT","VIDEO"] };
lovedna_net_FileType.NULL = ["NULL",0];
lovedna_net_FileType.NULL.toString = $estr;
lovedna_net_FileType.NULL.__enum__ = lovedna_net_FileType;
lovedna_net_FileType.BYTES = ["BYTES",1];
lovedna_net_FileType.BYTES.toString = $estr;
lovedna_net_FileType.BYTES.__enum__ = lovedna_net_FileType;
lovedna_net_FileType.IMAGE = ["IMAGE",2];
lovedna_net_FileType.IMAGE.toString = $estr;
lovedna_net_FileType.IMAGE.__enum__ = lovedna_net_FileType;
lovedna_net_FileType.TEXT = ["TEXT",3];
lovedna_net_FileType.TEXT.toString = $estr;
lovedna_net_FileType.TEXT.__enum__ = lovedna_net_FileType;
lovedna_net_FileType.VIDEO = ["VIDEO",4];
lovedna_net_FileType.VIDEO.toString = $estr;
lovedna_net_FileType.VIDEO.__enum__ = lovedna_net_FileType;
var lovedna_resource_Assets = $hx_exports["lovedna"]["Assets"] = function() {
};
$hxClasses["lovedna.resource.Assets"] = lovedna_resource_Assets;
lovedna_resource_Assets.__name__ = ["lovedna","resource","Assets"];
lovedna_resource_Assets.init = function(url) {
	if(url == null) {
		url = "";
	}
	lovedna_net_FileLoader.setGlobalRoot(url);
	if(lovedna_resource_Assets._init) {
		return;
	}
	lovedna_resource_Assets._init = true;
	var injector = new lovedna_rtti_Injector();
	injector.onInstance = lovedna_resource_Assets.instance;
	injector.inject(lovedna_resource_Assets,lovedna_resource_Assets);
	if(lovedna_resource_Assets._list == null) {
		return;
	}
	var len = lovedna_resource_Assets._list.length;
	while(len-- > 0) lovedna_resource_Assets._list[len].init();
	lovedna_resource_Assets._list = null;
	lovedna_resource_Assets.meta = lovedna_net_FileLoader.meta;
};
lovedna_resource_Assets.setVersion = function(url,version) {
	lovedna_net_FileLoader.setVersiton(url,version);
};
lovedna_resource_Assets.loadMeta = function(url,success) {
	if(!lovedna_resource_Assets._init) {
		return;
	}
	lovedna_resource_Assets.setVersion(url,lovedna_resource_Assets.version);
	var res = lovedna_resource_Assets.bytes.get(url);
	if(lovedna_resource_Assets._metasuccess == null) {
		lovedna_resource_Assets._metasuccess = new haxe_ds_StringMap();
	}
	if(success != null) {
		lovedna_resource_Assets._metasuccess.set(url,success);
	}
	res.addEventListener(lovedna_events_Event.complete.get_type(),lovedna_resource_Assets.metaComplete);
};
lovedna_resource_Assets.instance = function(v) {
	if(!Std["is"](v,lovedna_resource_loader_LoaderBase)) {
		return;
	}
	var base = v;
	if(base == null) {
		return;
	}
	if(lovedna_resource_Assets._list == null) {
		lovedna_resource_Assets._list = [];
	}
	lovedna_resource_Assets._list.push(base);
};
lovedna_resource_Assets.metaComplete = function(e) {
	var res = e.target;
	if(res.enabled) {
		var tag = new lovedna_format_tag_TagData(0);
		var ba = tag.decode(lovedna_ds__$ByteArray_ByteArray_$Impl_$.fromBytes(res.bytes));
		if(tag.type == -433249250) {
			lovedna_resource_Assets.meta.decode(ba);
		}
	}
	if(lovedna_resource_Assets._metasuccess.exists(res.get_file().name)) {
		var success = lovedna_resource_Assets._metasuccess.get(res.get_file().name);
		if(success != null) {
			success();
		}
		lovedna_resource_Assets._metasuccess.remove(res.get_file().name);
	}
};
lovedna_resource_Assets.prototype = {
	__class__: lovedna_resource_Assets
};
var lovedna_resource_IAssetUser = function() { };
$hxClasses["lovedna.resource.IAssetUser"] = lovedna_resource_IAssetUser;
lovedna_resource_IAssetUser.__name__ = ["lovedna","resource","IAssetUser"];
lovedna_resource_IAssetUser.prototype = {
	__class__: lovedna_resource_IAssetUser
};
var lovedna_resource_Image = function() {
};
$hxClasses["lovedna.resource.Image"] = lovedna_resource_Image;
lovedna_resource_Image.__name__ = ["lovedna","resource","Image"];
lovedna_resource_Image.prototype = {
	fromBytes: function(bytes,onComplete) {
		this._complete = onComplete;
		if(bytes == null) {
			this._onerror();
			return;
		}
		if(this.data == null) {
			this.data = new Image();
			this.data.onload = $bind(this,this._onload);
			this.data.onerror = $bind(this,this._onerror);
		}
		this.width = 0;
		this.height = 0;
		var dataUrl = "data:data;base64," + haxe_crypto_Base64.encode(bytes);
		this.data.src = dataUrl;
		this.data.crossOrigin = "Anonymous";
	}
	,fromUrl: function(url,onComplete) {
		this._complete = onComplete;
		if(this.data == null) {
			this.data = new Image();
			this.data.onload = $bind(this,this._onload);
			this.data.onerror = $bind(this,this._onerror);
		}
		this.width = 0;
		this.height = 0;
		this.data.src = url;
		this.data.crossOrigin = "Anonymous";
	}
	,_onload: function() {
		this.width = this.data.width;
		this.height = this.data.height;
		if(this._complete != null) {
			this._complete(this);
			this._complete = null;
		}
	}
	,_onerror: function() {
		if(this._complete != null) {
			this.width = this.height = 0;
			this._complete(this);
			this._complete = null;
		}
	}
	,__class__: lovedna_resource_Image
};
var lovedna_resource_data_ResBase = function() {
	lovedna_events_EventDispatcher.call(this);
	this.enabled = false;
};
$hxClasses["lovedna.resource.data.ResBase"] = lovedna_resource_data_ResBase;
lovedna_resource_data_ResBase.__name__ = ["lovedna","resource","data","ResBase"];
lovedna_resource_data_ResBase.__interfaces__ = [lovedna_resource_IResource];
lovedna_resource_data_ResBase.__super__ = lovedna_events_EventDispatcher;
lovedna_resource_data_ResBase.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	unload: function() {
		this._file = null;
	}
	,fileComplete: function() {
		this.enabled = true;
		this.onFileComplete();
		var tmp = this.enabled;
		this.dispatchEvent(lovedna_events_Event.complete);
	}
	,onFileComplete: function() {
	}
	,get_file: function() {
		return this._file;
	}
	,set_file: function(v) {
		this._file = v;
		return this._file;
	}
	,__class__: lovedna_resource_data_ResBase
	,__properties__: {set_file:"set_file",get_file:"get_file"}
});
var lovedna_resource_data_ResBytes = function() {
	lovedna_resource_data_ResBase.call(this);
};
$hxClasses["lovedna.resource.data.ResBytes"] = lovedna_resource_data_ResBytes;
lovedna_resource_data_ResBytes.__name__ = ["lovedna","resource","data","ResBytes"];
lovedna_resource_data_ResBytes.__super__ = lovedna_resource_data_ResBase;
lovedna_resource_data_ResBytes.prototype = $extend(lovedna_resource_data_ResBase.prototype,{
	onFileComplete: function() {
		lovedna_resource_data_ResBase.prototype.onFileComplete.call(this);
		this.bytes = this.get_file().bytes;
		this.enabled = this.bytes != null;
		var tmp = this.bytes != null;
	}
	,__class__: lovedna_resource_data_ResBytes
});
var lovedna_resource_data_ResFnt = function(url,texture) {
	lovedna_resource_data_ResBase.call(this);
	this.name = url;
	this.texture = texture;
};
$hxClasses["lovedna.resource.data.ResFnt"] = lovedna_resource_data_ResFnt;
lovedna_resource_data_ResFnt.__name__ = ["lovedna","resource","data","ResFnt"];
lovedna_resource_data_ResFnt.__super__ = lovedna_resource_data_ResBase;
lovedna_resource_data_ResFnt.prototype = $extend(lovedna_resource_data_ResBase.prototype,{
	setfnt: function(v) {
		this.fnt = v;
		this.enabled = true;
		this.dispatchEvent(lovedna_events_Event.complete);
	}
	,__class__: lovedna_resource_data_ResFnt
});
var lovedna_resource_data_ResG3D = function() {
	lovedna_resource_data_ResBase.call(this);
	this.modelData = new lovedna_format_g3d_ModelData();
};
$hxClasses["lovedna.resource.data.ResG3D"] = lovedna_resource_data_ResG3D;
lovedna_resource_data_ResG3D.__name__ = ["lovedna","resource","data","ResG3D"];
lovedna_resource_data_ResG3D.__super__ = lovedna_resource_data_ResBase;
lovedna_resource_data_ResG3D.prototype = $extend(lovedna_resource_data_ResBase.prototype,{
	onFileComplete: function() {
		if(this.get_file().bytes == null) {
			this.enabled = false;
			this.dispatchEvent(lovedna_events_Event.complete);
			return;
		}
		var ba = lovedna_ds__$ByteArray_ByteArray_$Impl_$.fromBytes(this.get_file().bytes);
		var tag = new lovedna_format_tag_TagData(0);
		var bytes = tag.decode(ba);
		if(tag.type != -239294721) {
			haxe_Log.trace("not type g3d",{ fileName : "ResG3D.hx", lineNumber : 63, className : "lovedna.resource.data.ResG3D", methodName : "onFileComplete"});
			return;
		}
		bytes.readUTFBytes(3);
		bytes.readInt();
		this.decode(bytes);
	}
	,decode: function(bytes) {
		if(bytes == null) {
			return;
		}
		lovedna_format_g3d_ModelData.current = this.modelData;
		this.modelData.clear();
		this.modelData.decode(bytes);
		this.modelData.init();
		this.modelData.dispose();
	}
	,init: function(bytes) {
		if(bytes == null) {
			return;
		}
		lovedna_format_g3d_ModelData.current = this.modelData;
		this._data = bytes.readUTFBytes(bytes.get_length());
		var json = JSON.parse(this._data);
		this.parseMeshes(json);
		this.parseMaterials(json);
		this.parseNodes(json);
		this.parseAnimations(json);
		this.modelData.init();
		this._data = null;
		this.enabled = true;
	}
	,parseMeshes: function(json) {
		var meshs = lovedna_utils_DynamicUtil.getArray(json,"meshes");
		if(meshs == null) {
			return;
		}
		var len = meshs.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var jsonMesh = meshs[i];
			var mesh = new lovedna_format_g3d_ModelMesh();
			mesh.id = lovedna_utils_DynamicUtil.getString(jsonMesh,"id");
			mesh.attributes = lovedna_utils_DynamicUtil.getStringArray(jsonMesh,"attributes");
			mesh.vertices = lovedna_utils_DynamicUtil.getFloatArray(jsonMesh,"vertices");
			var jsonParts = lovedna_utils_DynamicUtil.getArray(jsonMesh,"parts");
			var _g3 = 0;
			var _g2 = jsonParts.length;
			while(_g3 < _g2) {
				var j = _g3++;
				var jsonPart = jsonParts[j];
				var meshPart = new lovedna_format_g3d_ModelMeshPart();
				meshPart.id = lovedna_utils_DynamicUtil.getString(jsonPart,"id");
				meshPart.primitiveType = lovedna_utils_DynamicUtil.getString(jsonPart,"type");
				meshPart.indices = lovedna_utils_DynamicUtil.getIntArray(jsonPart,"indices");
				mesh.addPart(meshPart);
			}
			this.modelData.addMesh(mesh);
		}
	}
	,parseNodes: function(json) {
		var nodes = lovedna_utils_DynamicUtil.getArray(json,"nodes");
		if(nodes == null) {
			return;
		}
		var len = nodes.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var jsonNode = nodes[i];
			this.modelData.addNode(this.parseNode(jsonNode));
		}
	}
	,parseNode: function(json) {
		var node = new lovedna_format_g3d_ModelNode();
		node.id = lovedna_utils_DynamicUtil.getString(json,"id","");
		var translation = lovedna_utils_DynamicUtil.getFloatArray(json,"translation");
		node.translation = translation == null ? null : new lovedna_math_Vector3().fromArray(translation);
		var rotation = lovedna_utils_DynamicUtil.getFloatArray(json,"rotation");
		node.rotation = rotation == null ? null : new lovedna_math_Quaternion().fromArray(rotation);
		var scale = lovedna_utils_DynamicUtil.getFloatArray(json,"scale");
		node.scale = scale == null ? null : new lovedna_math_Vector3().fromArray(scale);
		node.meshId = lovedna_utils_DynamicUtil.getString(json,"mesh");
		var parts = lovedna_utils_DynamicUtil.getArray(json,"parts");
		if(parts != null) {
			var _g1 = 0;
			var _g = parts.length;
			while(_g1 < _g) {
				var i = _g1++;
				var jsonPart = parts[i];
				var part = new lovedna_format_g3d_ModelNodePart();
				part.materialId = lovedna_utils_DynamicUtil.getString(jsonPart,"materialid");
				part.meshPartId = lovedna_utils_DynamicUtil.getString(jsonPart,"meshpartid");
				var bones = lovedna_utils_DynamicUtil.getArray(jsonPart,"bones");
				if(bones != null) {
					var _g3 = 0;
					var _g2 = bones.length;
					while(_g3 < _g2) {
						var j = _g3++;
						var jsonBone = bones[j];
						var nodeId = lovedna_utils_DynamicUtil.getString(jsonBone,"node");
						var translation1 = lovedna_utils_DynamicUtil.getFloatArray(jsonBone,"translation");
						var t = translation1 == null ? null : new lovedna_math_Vector3().fromArray(translation1);
						var rotation1 = lovedna_utils_DynamicUtil.getFloatArray(jsonBone,"rotation");
						var r = rotation1 == null ? null : new lovedna_math_Quaternion().fromArray(rotation1);
						var scale1 = lovedna_utils_DynamicUtil.getFloatArray(jsonBone,"scale");
						var s = scale1 == null ? null : new lovedna_math_Vector3().fromArray(scale1);
						part.addBone(nodeId,t,r,s);
					}
				}
				node.addPart(part);
			}
		}
		var children = lovedna_utils_DynamicUtil.getArray(json,"children");
		if(children != null) {
			var _g11 = 0;
			var _g4 = children.length;
			while(_g11 < _g4) {
				var i1 = _g11++;
				node.addChildren(this.parseNode(children[i1]));
			}
		}
		return node;
	}
	,parseMaterials: function(json) {
		var materials = lovedna_utils_DynamicUtil.getArray(json,"materials");
		if(materials == null) {
			return;
		}
		var len = materials.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var jsonMaterial = materials[i];
			var material = new lovedna_format_g3d_ModelMaterial();
			material.id = lovedna_utils_DynamicUtil.getString(jsonMaterial,"id");
			material.shininess = lovedna_utils_DynamicUtil.getFloat(jsonMaterial,"shininess",0);
			material.opacity = lovedna_utils_DynamicUtil.getFloat(jsonMaterial,"opacity",1);
			var color = lovedna_utils_DynamicUtil.getFloatArray(jsonMaterial,"diffuse");
			material.diffuse = color == null ? null : new lovedna_math_Color().fromArray(color);
			var color1 = lovedna_utils_DynamicUtil.getFloatArray(jsonMaterial,"ambient");
			material.ambient = color1 == null ? null : new lovedna_math_Color().fromArray(color1);
			var color2 = lovedna_utils_DynamicUtil.getFloatArray(jsonMaterial,"emissive");
			material.emissive = color2 == null ? null : new lovedna_math_Color().fromArray(color2);
			var color3 = lovedna_utils_DynamicUtil.getFloatArray(jsonMaterial,"specular");
			material.specular = color3 == null ? null : new lovedna_math_Color().fromArray(color3);
			var color4 = lovedna_utils_DynamicUtil.getFloatArray(jsonMaterial,"reflection");
			material.reflection = color4 == null ? null : new lovedna_math_Color().fromArray(color4);
			var jsonTextures = lovedna_utils_DynamicUtil.getArray(jsonMaterial,"textures");
			if(jsonTextures != null) {
				var _g3 = 0;
				var _g2 = jsonTextures.length;
				while(_g3 < _g2) {
					var j = _g3++;
					var jsonTexture = jsonTextures[j];
					var texture = new lovedna_format_g3d_ModelTexture();
					texture.id = lovedna_utils_DynamicUtil.getString(jsonTexture,"id");
					texture.fileName = lovedna_utils_DynamicUtil.getString(jsonTexture,"filename");
					texture.type = lovedna_utils_DynamicUtil.getString(jsonTexture,"type");
					var f2 = lovedna_utils_DynamicUtil.getFloatArray(jsonTexture,"uvTranslation");
					if(f2 != null) {
						texture.uvTranslation.fromArray(f2);
					}
					f2 = lovedna_utils_DynamicUtil.getFloatArray(jsonTexture,"uvScaling");
					if(f2 != null) {
						texture.uvScaling.fromArray(f2);
					}
					material.addTexture(texture);
				}
			}
			this.modelData.addMaterial(material);
		}
	}
	,parseAnimations: function(json) {
		var animations = lovedna_utils_DynamicUtil.getArray(json,"animations");
		if(animations == null) {
			return;
		}
		var len = animations.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var jsonAnimation = animations[i];
			var bones = lovedna_utils_DynamicUtil.getArray(jsonAnimation,"bones");
			if(bones == null) {
				continue;
			}
			var ani = new lovedna_format_g3d_ModelAnimation();
			ani.id = lovedna_utils_DynamicUtil.getString(jsonAnimation,"id");
			var _g3 = 0;
			var _g2 = bones.length;
			while(_g3 < _g2) {
				var j = _g3++;
				var jsonbone = bones[j];
				var nodeani = new lovedna_format_g3d_ModelNodeAnimation();
				nodeani.nodeId = lovedna_utils_DynamicUtil.getString(jsonbone,"boneId");
				var keyframes = lovedna_utils_DynamicUtil.getArray(jsonbone,"keyframes");
				var _g5 = 0;
				var _g4 = keyframes.length;
				while(_g5 < _g4) {
					var k = _g5++;
					var jsonKey = keyframes[k];
					var time = lovedna_utils_DynamicUtil.getFloat(jsonKey,"keytime",0) * 0.001;
					var value = null;
					value = lovedna_utils_DynamicUtil.getFloatArray(jsonKey,"translation");
					if(value != null) {
						nodeani.addTranslation(new lovedna_format_g3d_ModelNodeKeyframe(time,new lovedna_math_Vector3().fromArray(value)));
					}
					value = lovedna_utils_DynamicUtil.getFloatArray(jsonKey,"rotation");
					if(value != null) {
						nodeani.addRotation(new lovedna_format_g3d_ModelNodeKeyframe(time,new lovedna_math_Quaternion().fromArray(value)));
					}
					value = lovedna_utils_DynamicUtil.getFloatArray(jsonKey,"scale");
					if(value != null) {
						nodeani.addScaling(new lovedna_format_g3d_ModelNodeKeyframe(time,new lovedna_math_Vector3().fromArray(value)));
					}
				}
				ani.add(nodeani);
			}
			this.modelData.addAnimation(ani);
		}
	}
	,__class__: lovedna_resource_data_ResG3D
});
var lovedna_resource_data_ResSprite = function() {
	lovedna_resource_data_ResBase.call(this);
	this._uv = new lovedna_math_Vector2();
	this._uv00 = new lovedna_math_Vector2(0,0);
	this._uv11 = new lovedna_math_Vector2(1,1);
};
$hxClasses["lovedna.resource.data.ResSprite"] = lovedna_resource_data_ResSprite;
lovedna_resource_data_ResSprite.__name__ = ["lovedna","resource","data","ResSprite"];
lovedna_resource_data_ResSprite.__super__ = lovedna_resource_data_ResBase;
lovedna_resource_data_ResSprite.prototype = $extend(lovedna_resource_data_ResBase.prototype,{
	getUV: function(u,v) {
		if(this.data.get_rotated()) {
			return this._uv.set(lovedna_utils_Helper.lerp(this._uv00.x,this._uv11.x,v),lovedna_utils_Helper.lerp(this._uv00.y,this._uv11.y,u));
		} else {
			return this._uv.set(lovedna_utils_Helper.lerp(this._uv00.x,this._uv11.x,u),lovedna_utils_Helper.lerp(this._uv00.y,this._uv11.y,v));
		}
	}
	,init: function(atlas) {
		if(this.texture == null) {
			return;
		}
		var tw = this.texture.texture.width;
		var th = this.texture.texture.height;
		if(tw == 0 || th == 0) {
			return;
		}
		this.enabled = true;
		if(atlas == null) {
			this.packed = false;
			this.data = new lovedna_format_atlas_SpriteData();
			this.data.frame.set(0,0,tw,th);
			this.data.sourceSize.set(tw,th);
			this.dispatchEvent(lovedna_events_Event.init);
			return;
		}
		if(atlas.file.indexOf(this.atlasName) == -1) {
			return;
		}
		this.packed = true;
		this.data = atlas.getSprite(this.name);
		if(this.data == null) {
			return;
		}
		var w = this.data.frame.get_width();
		var h = this.data.frame.get_height();
		if(this.data.get_rotated()) {
			this._uv00.set((this.data.frame.x + h) / tw,this.data.frame.y / th);
			this._uv11.set(this.data.frame.x / tw,(this.data.frame.y + w) / th);
		} else {
			this._uv00.set(this.data.frame.x / tw,this.data.frame.y / th);
			this._uv11.set((this.data.frame.x + w) / tw,(this.data.frame.y + h) / th);
		}
		this.dispatchEvent(lovedna_events_Event.init);
	}
	,set_atlasName: function(v) {
		if(this.atlasName != null) {
			return this.atlasName;
		}
		return this.atlasName = v;
	}
	,set_name: function(v) {
		if(this.name != null) {
			return this.name;
		}
		return this.name = v;
	}
	,set_texture: function(v) {
		if(this.texture != null) {
			return this.texture;
		}
		return this.texture = v;
	}
	,__class__: lovedna_resource_data_ResSprite
	,__properties__: $extend(lovedna_resource_data_ResBase.prototype.__properties__,{set_texture:"set_texture",set_name:"set_name",set_atlasName:"set_atlasName"})
});
var lovedna_resource_data_ResTexture = function() {
	lovedna_resource_data_ResBase.call(this);
	this.texture = new lovedna_game_graphics_Texture2D();
};
$hxClasses["lovedna.resource.data.ResTexture"] = lovedna_resource_data_ResTexture;
lovedna_resource_data_ResTexture.__name__ = ["lovedna","resource","data","ResTexture"];
lovedna_resource_data_ResTexture.__super__ = lovedna_resource_data_ResBase;
lovedna_resource_data_ResTexture.prototype = $extend(lovedna_resource_data_ResBase.prototype,{
	onFileComplete: function() {
		lovedna_resource_data_ResBase.prototype.onFileComplete.call(this);
		if(this.get_file().image == null) {
			this.enabled = false;
		} else if(this.get_file().image.width != 0) {
			this.texture.setData(this.get_file().image);
			this.parsePng();
		}
		if(this.get_file().bytes != null) {
			if(this.get_file().image == null) {
				this.get_file().image = new lovedna_resource_Image();
				this.get_file().image.fromBytes(this.get_file().bytes,$bind(this,this.onImageComplete));
			}
		}
	}
	,onImageComplete: function(img) {
		this.onFileComplete();
	}
	,parsePng: function() {
		lovedna_resource_Assets.texture.res = this;
		lovedna_resource_Assets.texture.tag = 0;
		if(this.get_file().bytes != null) {
			var png = new lovedna_format_png_Png();
			png.decode(lovedna_ds__$ByteArray_ByteArray_$Impl_$.fromBytes(this.get_file().bytes));
			var chunk = png.getChunk(1716666723);
			if(chunk != null) {
				var data = chunk.getContent();
				if(data != null) {
					data.position = 0;
					var tag = new lovedna_format_tag_TagData(0);
					data = tag.decode(data);
					data.position = 0;
					lovedna_resource_Assets.texture.tag = tag.type;
					lovedna_resource_Assets.texture.bytes = data;
				}
			}
		}
		lovedna_resource_Assets.texture.dispatchEvent(lovedna_events_Event.data);
		this.get_file().bytes = null;
	}
	,__class__: lovedna_resource_data_ResTexture
});
var lovedna_resource_loader_LoaderBase = function() {
	lovedna_events_EventDispatcher.call(this);
	this._map = new haxe_ds_StringMap();
	this._loader = new lovedna_net_FileLoader();
};
$hxClasses["lovedna.resource.loader.LoaderBase"] = lovedna_resource_loader_LoaderBase;
lovedna_resource_loader_LoaderBase.__name__ = ["lovedna","resource","loader","LoaderBase"];
lovedna_resource_loader_LoaderBase.__super__ = lovedna_events_EventDispatcher;
lovedna_resource_loader_LoaderBase.prototype = $extend(lovedna_events_EventDispatcher.prototype,{
	get: function(url) {
		if(this._map.exists(url)) {
			return this._map.get(url);
		}
		var res = this.createRes();
		this._map.set(url,res);
		var file = this._loader.load(url);
		file.name = url;
		res.set_file(file);
		this.onLoad(res);
		if(!file.get_enabled()) {
			file.addEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.fileComplete));
		}
		return res;
	}
	,createRes: function() {
		return null;
	}
	,onLoad: function(res) {
	}
	,init: function() {
	}
	,fileComplete: function(e) {
		var file = e.target;
		file.removeEventListener(lovedna_events_Event.complete.get_type(),$bind(this,this.fileComplete));
		var res = this._map.get(file.name);
		res.fileComplete();
	}
	,__class__: lovedna_resource_loader_LoaderBase
});
var lovedna_resource_loader_BytesLoader = function() {
	lovedna_resource_loader_LoaderBase.call(this);
};
$hxClasses["lovedna.resource.loader.BytesLoader"] = lovedna_resource_loader_BytesLoader;
lovedna_resource_loader_BytesLoader.__name__ = ["lovedna","resource","loader","BytesLoader"];
lovedna_resource_loader_BytesLoader.__super__ = lovedna_resource_loader_LoaderBase;
lovedna_resource_loader_BytesLoader.prototype = $extend(lovedna_resource_loader_LoaderBase.prototype,{
	createRes: function() {
		return new lovedna_resource_data_ResBytes();
	}
	,onLoad: function(res) {
		lovedna_resource_loader_LoaderBase.prototype.onLoad.call(this,res);
	}
	,__class__: lovedna_resource_loader_BytesLoader
});
var lovedna_resource_loader_FntLoader = function() {
	lovedna_resource_loader_LoaderBase.call(this);
};
$hxClasses["lovedna.resource.loader.FntLoader"] = lovedna_resource_loader_FntLoader;
lovedna_resource_loader_FntLoader.__name__ = ["lovedna","resource","loader","FntLoader"];
lovedna_resource_loader_FntLoader.__super__ = lovedna_resource_loader_LoaderBase;
lovedna_resource_loader_FntLoader.prototype = $extend(lovedna_resource_loader_LoaderBase.prototype,{
	get: function(url) {
		var path = url;
		var t = null;
		if(this._map.exists(path)) {
			t = this._map.get(path);
		} else {
			var tex = lovedna_resource_Assets.texture.get(path);
			tex.get_file().forceBytes = true;
			t = new lovedna_resource_data_ResFnt(path,tex.texture);
			this._map.set(path,t);
			if(this._fntMap.exists(path)) {
				t.setfnt(this._fntMap.get(path));
			}
		}
		return t;
	}
	,onConstruct: function() {
		lovedna_resource_loader_LoaderBase.prototype.onConstruct.call(this);
		this._fntMap = new haxe_ds_StringMap();
	}
	,init: function() {
		lovedna_resource_loader_LoaderBase.prototype.init.call(this);
		lovedna_resource_Assets.texture.addEventListener(lovedna_events_Event.data.get_type(),$bind(this,this.ondata));
	}
	,ondata: function(e) {
		var tag = lovedna_resource_Assets.texture.tag;
		if(tag != -1629174247) {
			return;
		}
		var data = lovedna_resource_Assets.texture.bytes;
		var fnt = new lovedna_format_fnt_Fnt();
		fnt.decode(data);
		var path = lovedna_resource_Assets.texture.res.get_file().path;
		this._fntMap.set(path,fnt);
		var font = this._map.get(path);
		if(font == null) {
			font = new lovedna_resource_data_ResFnt(path,lovedna_resource_Assets.texture.get(path).texture);
			this._map.set(path,font);
		}
		if(font.enabled) {
			return;
		}
		font.setfnt(fnt);
	}
	,__class__: lovedna_resource_loader_FntLoader
});
var lovedna_resource_loader_G3dLoader = function() {
	lovedna_resource_loader_LoaderBase.call(this);
};
$hxClasses["lovedna.resource.loader.G3dLoader"] = lovedna_resource_loader_G3dLoader;
lovedna_resource_loader_G3dLoader.__name__ = ["lovedna","resource","loader","G3dLoader"];
lovedna_resource_loader_G3dLoader.__super__ = lovedna_resource_loader_LoaderBase;
lovedna_resource_loader_G3dLoader.prototype = $extend(lovedna_resource_loader_LoaderBase.prototype,{
	createRes: function() {
		return new lovedna_resource_data_ResG3D();
	}
	,__class__: lovedna_resource_loader_G3dLoader
});
var lovedna_resource_loader_SpriteLoader = function() {
	lovedna_resource_loader_LoaderBase.call(this);
};
$hxClasses["lovedna.resource.loader.SpriteLoader"] = lovedna_resource_loader_SpriteLoader;
lovedna_resource_loader_SpriteLoader.__name__ = ["lovedna","resource","loader","SpriteLoader"];
lovedna_resource_loader_SpriteLoader.__super__ = lovedna_resource_loader_LoaderBase;
lovedna_resource_loader_SpriteLoader.prototype = $extend(lovedna_resource_loader_LoaderBase.prototype,{
	addAtlas: function(path) {
		this._atlasMap.set(path,true);
	}
	,get: function(url) {
		if(this._spriteMap.exists(url)) {
			return this._spriteMap.get(url);
		}
		var res = new lovedna_resource_data_ResSprite();
		this._spriteMap.set(url,res);
		this._path.set(url);
		var dir = this._path.getDir() + ".png";
		if(!this._atlasMap.exists(dir)) {
			var info = lovedna_resource_Assets.meta.getMeta(dir);
			if(info == null) {
				this._atlasMap.set(dir,false);
			} else if(info.get("isAtlas") == true) {
				this._atlasMap.set(dir,true);
			}
		}
		if(this._atlasMap.get(dir) == true) {
			res.set_name(this._path.getFile());
			res.set_atlasName(dir);
			res.set_texture(lovedna_resource_Assets.texture.get(dir));
			res.texture.get_file().forceBytes = true;
			var atlas = lovedna_format_atlas_Atlas.getAtlas(dir);
			if(atlas != null) {
				res.init(atlas);
			}
		} else {
			res.set_texture(lovedna_resource_Assets.texture.get(url));
			if(res.texture.enabled) {
				res.init(null);
			}
		}
		return res;
	}
	,onConstruct: function() {
		lovedna_resource_loader_LoaderBase.prototype.onConstruct.call(this);
		this._atlasMap = new haxe_ds_StringMap();
		this._spriteMap = new haxe_ds_StringMap();
		this._path = new lovedna_net_Path();
	}
	,createRes: function() {
		return new lovedna_resource_data_ResSprite();
	}
	,init: function() {
		lovedna_resource_loader_LoaderBase.prototype.init.call(this);
		lovedna_resource_Assets.texture.addEventListener(lovedna_events_Event.data.get_type(),$bind(this,this.ondata));
	}
	,ondata: function(e) {
		var path = lovedna_resource_Assets.texture.res.get_file().path;
		var t = this._spriteMap.get(path);
		if(t != null) {
			t.init(null);
		}
		var tag = lovedna_resource_Assets.texture.tag;
		if(tag == -590019044) {
			this._path.set(lovedna_resource_Assets.texture.res.get_file().path);
			var name = this._path.getPathWithoutExt();
			var data = lovedna_resource_Assets.texture.bytes;
			var atlas = new lovedna_format_atlas_Atlas(lovedna_resource_Assets.texture.res.get_file().path);
			atlas.decode(data);
			var list = atlas.frames;
			var len = list.get_length();
			while(len-- > 0) {
				var sprite = list.getElement(len);
				var url = lovedna_net_Path.Combine(name,sprite.get_name());
				t = this._spriteMap.get(url);
				if(t == null) {
					continue;
				}
				t.init(atlas);
			}
		}
	}
	,__class__: lovedna_resource_loader_SpriteLoader
});
var lovedna_resource_loader_TextureLoader = function() {
	lovedna_resource_loader_LoaderBase.call(this);
};
$hxClasses["lovedna.resource.loader.TextureLoader"] = lovedna_resource_loader_TextureLoader;
lovedna_resource_loader_TextureLoader.__name__ = ["lovedna","resource","loader","TextureLoader"];
lovedna_resource_loader_TextureLoader.__super__ = lovedna_resource_loader_LoaderBase;
lovedna_resource_loader_TextureLoader.prototype = $extend(lovedna_resource_loader_LoaderBase.prototype,{
	createRes: function() {
		return new lovedna_resource_data_ResTexture();
	}
	,onLoad: function(res) {
		lovedna_resource_loader_LoaderBase.prototype.onLoad.call(this,res);
		if(!res.enabled) {
			if(!res.get_file().forceBytes) {
				var meta = lovedna_resource_Assets.meta.getMeta(res.get_file().name);
				if(meta != null) {
					if(meta.get("isAtlas") == true) {
						res.get_file().forceBytes = true;
					}
				}
			}
		}
	}
	,__class__: lovedna_resource_loader_TextureLoader
});
var lovedna_rtti_ClassMeta = function(value,name,isstatic) {
	if(isstatic == null) {
		isstatic = false;
	}
	this.isStatic = isstatic;
	this.priority = 0;
	this._name = name;
	this._metaList = [];
	this._metaMap = new haxe_ds_StringMap();
	var list = Reflect.fields(value);
	var len = list.length;
	while(len-- > 0) {
		var key = list[len];
		if(key == "t" || key == "f") {
			continue;
		}
		this._metaList.push(key);
		var fieldargs = Reflect.field(value,key);
		if(fieldargs != null) {
			if(fieldargs.length == 1) {
				if(Std["is"](fieldargs[0],Int)) {
					this.priority = fieldargs[0];
				}
			}
		}
		this._metaMap.set(key,fieldargs);
	}
	var type = Reflect.field(value,"t");
	if(type != null && type.length > 0) {
		this._type = Type.resolveClass(type[type.length - 1]);
		this.isFunction = false;
	} else {
		this.isFunction = true;
		this._funArgs = [];
	}
	var funargs = Reflect.field(value,"f");
	if(funargs != null) {
		var len1 = funargs.length;
		var _g1 = 0;
		var _g = len1;
		while(_g1 < _g) {
			var i = _g1++;
			var arg = funargs[i];
			var type1 = Reflect.field(arg,"type");
			this._funArgs.push(Type.resolveClass(type1));
		}
	}
};
$hxClasses["lovedna.rtti.ClassMeta"] = lovedna_rtti_ClassMeta;
lovedna_rtti_ClassMeta.__name__ = ["lovedna","rtti","ClassMeta"];
lovedna_rtti_ClassMeta.prototype = {
	getMeta: function(index) {
		return this._metaList[index];
	}
	,hasMeta: function(name) {
		return this._metaMap.exists(name);
	}
	,getMetaArgs: function(name) {
		return this._metaMap.get(name);
	}
	,toString: function() {
		var s = this._name + ":(" + Type.getClassName(this.get_type()) + ")=> {";
		var len = this.get_length();
		while(len-- > 0) {
			var name = this.getMeta(len);
			s += name + " => " + Std.string(this.getMetaArgs(name));
		}
		s += " }";
		return s;
	}
	,get_name: function() {
		return this._name;
	}
	,get_type: function() {
		return this._type;
	}
	,get_functionArgs: function() {
		return this._funArgs;
	}
	,get_length: function() {
		return this._metaList.length;
	}
	,__class__: lovedna_rtti_ClassMeta
	,__properties__: {get_length:"get_length",get_functionArgs:"get_functionArgs",get_type:"get_type",get_name:"get_name"}
};
var lovedna_rtti_ClassMetaInfo = function() {
};
$hxClasses["lovedna.rtti.ClassMetaInfo"] = lovedna_rtti_ClassMetaInfo;
lovedna_rtti_ClassMetaInfo.__name__ = ["lovedna","rtti","ClassMetaInfo"];
lovedna_rtti_ClassMetaInfo.get = function(value) {
	if(value == null) {
		return null;
	}
	if(lovedna_rtti_ClassMetaInfo._infoMap.exists(value)) {
		return lovedna_rtti_ClassMetaInfo._infoMap.get(value);
	}
	var info = new lovedna_rtti_ClassMetaInfo();
	info.classPath = Type.getClassName(value);
	info.parse(value);
	lovedna_rtti_ClassMetaInfo._infoMap.set(value,info);
	info.parseClassMeta(haxe_rtti_Meta.getType(value));
	return info;
};
lovedna_rtti_ClassMetaInfo.prototype = {
	getField: function(index) {
		return this._fields[index];
	}
	,getMeta: function(name) {
		return this._metaMap.get(name);
	}
	,getClassMeta: function(name,superClass,lower) {
		if(lower == null) {
			lower = false;
		}
		if(superClass == null) {
			superClass = false;
		}
		if(this._classMetaMap.exists(name)) {
			var list = this._classMetaMap.get(name);
			return list;
		}
		if(lower) {
			var lowername = name.toLowerCase();
			var n = this._classMetaMap.keys();
			while(n.hasNext()) {
				var n1 = n.next();
				if(n1.toLowerCase() == lowername) {
					return this._classMetaMap.get(n1);
				}
			}
		}
		if(superClass) {
			var info = lovedna_rtti_ClassMetaInfo.get(this._super);
			if(info != null) {
				return info.getClassMeta(name,superClass,lower);
			}
		}
		return null;
	}
	,toString: function() {
		var s = "";
		s += this.classPath;
		s += "{ ";
		var len = this.get_length();
		while(len-- > 0) {
			var name = this.getField(len);
			var meta = this.getMeta(name);
			s += Std.string(meta) + " ";
		}
		s += " }";
		return s;
	}
	,parseClassMeta: function(map) {
		this._classMetaMap = new haxe_ds_StringMap();
		var keys = lovedna_utils_DynamicUtil.getKeys(map);
		var len = keys.length;
		while(len-- > 0) {
			var attribute = keys[len];
			var list = lovedna_utils_DynamicUtil.getValue(map,attribute);
			if(list == null) {
				list = [];
			}
			this._classMetaMap.set(attribute,list);
		}
	}
	,parse: function(clazz) {
		this._super = Type.getSuperClass(clazz);
		var value = haxe_rtti_Meta.getFields(clazz);
		this._metaMap = new haxe_ds_StringMap();
		this._fields = [];
		var list = Reflect.fields(value);
		var len = list.length;
		var funlist = [];
		while(len-- > 0) {
			var key = list[len];
			var meta = new lovedna_rtti_ClassMeta(Reflect.field(value,key),key);
			this._metaMap.set(key,meta);
			if(meta.get_type() != null) {
				this._fields.push(key);
			} else {
				funlist.push(meta);
			}
		}
		len = funlist.length;
		if(len > 0) {
			funlist.reverse();
			funlist.sort($bind(this,this.sort));
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				this._fields.push(funlist[i].get_name());
			}
		}
		value = haxe_rtti_Meta.getStatics(clazz);
		list = Reflect.fields(value);
		len = list.length;
		while(len-- > 0) {
			var key1 = list[len];
			var meta1 = new lovedna_rtti_ClassMeta(Reflect.field(value,key1),key1,true);
			this._metaMap.set(key1,meta1);
			if(meta1.get_type() != null) {
				this._fields.push(key1);
			} else {
				funlist.push(meta1);
			}
		}
	}
	,get_length: function() {
		return this._fields.length;
	}
	,sort: function(a,b) {
		if(a.priority < b.priority) {
			return 1;
		} else if(a.priority > b.priority) {
			return -1;
		}
		return 0;
	}
	,__class__: lovedna_rtti_ClassMetaInfo
	,__properties__: {get_length:"get_length"}
};
var lovedna_rtti_IInject = function() { };
$hxClasses["lovedna.rtti.IInject"] = lovedna_rtti_IInject;
lovedna_rtti_IInject.__name__ = ["lovedna","rtti","IInject"];
lovedna_rtti_IInject.prototype = {
	__class__: lovedna_rtti_IInject
};
var lovedna_rtti_Injector = function() {
	this._instanceMap = new haxe_ds_StringMap();
};
$hxClasses["lovedna.rtti.Injector"] = lovedna_rtti_Injector;
lovedna_rtti_Injector.__name__ = ["lovedna","rtti","Injector"];
lovedna_rtti_Injector.prototype = {
	get: function(type,name) {
		var key = this.getKey(type,name);
		var instance = this._instanceMap.get(key);
		if(instance == null) {
			instance = Type.createInstance(type,[]);
			this._instanceMap.set(key,instance);
			this.inject(instance,type);
		}
		return instance;
	}
	,set: function(type,value,name) {
		var key = this.getKey(type,name);
		this._instanceMap.set(key,value);
		if(value != null) {
			this.inject(value,Type.getClass(value));
		}
	}
	,inject: function(value,type) {
		while(type != null) {
			var info = lovedna_rtti_ClassMetaInfo.get(type);
			var len = info.get_length();
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				var fieldName = info.getField(i);
				var fieldMeta = info.getMeta(fieldName);
				if(fieldMeta.hasMeta("inject")) {
					var injectargs = fieldMeta.getMetaArgs("inject");
					if(fieldMeta.get_type() != null) {
						var name = "";
						if(injectargs != null) {
							name = injectargs[0];
						}
						var fileobj = this.get(fieldMeta.get_type(),name);
						if(fieldMeta.isStatic) {
							Reflect.setProperty(type,fieldName,fileobj);
						} else {
							Reflect.setProperty(value,fieldName,fileobj);
						}
					} else {
						var args = fieldMeta.get_functionArgs();
						if(args != null) {
							var fun = Reflect.getProperty(value,fieldName);
							var list = [];
							if(args != null) {
								var arglen = args.length;
								var _g3 = 0;
								var _g2 = arglen;
								while(_g3 < _g2) {
									var j = _g3++;
									list.push(this.get(args[j],injectargs[j]));
								}
							}
							Reflect.callMethod(value,fun,list);
						}
					}
				}
			}
			type = Type.getSuperClass(type);
		}
		if(Std["is"](value,lovedna_Object)) {
			var object = value;
			object.construct();
		}
		if(Std["is"](value,lovedna_rtti_IInject)) {
			var inject = value;
			inject.onInject();
		}
		if(this.onInstance != null) {
			this.onInstance(value);
		}
	}
	,getKey: function(type,name) {
		return lovedna_utils_TypeUtil.getName(type) + (name == null ? "" : "#" + name);
	}
	,__class__: lovedna_rtti_Injector
};
var lovedna_task_DelayCall = function(handler) {
	this.id = lovedna_task_DelayCall._id++;
	this.handler = handler;
	this.running = false;
};
$hxClasses["lovedna.task.DelayCall"] = lovedna_task_DelayCall;
lovedna_task_DelayCall.__name__ = ["lovedna","task","DelayCall"];
lovedna_task_DelayCall.add = function(delay,time) {
	if(delay == null) {
		return;
	}
	if(time <= 0) {
		if(delay.handler != null) {
			delay.execute();
		}
		return;
	}
	delay.time = time + lovedna_Time.get_now();
	if(lovedna_task_DelayCall._delayTask == null) {
		lovedna_task_DelayCall._delayTask = new lovedna_task_DelayTask();
	}
	if(!lovedna_task_DelayCall._delayTask.running) {
		lovedna_task_Task.add(lovedna_task_DelayCall._delayTask);
	}
	lovedna_task_DelayCall._delayTask.add(delay);
};
lovedna_task_DelayCall.remove = function(delay) {
	if(delay == null) {
		return;
	}
	if(lovedna_task_DelayCall._delayTask == null) {
		return;
	}
	lovedna_task_DelayCall._delayTask.remove(delay);
};
lovedna_task_DelayCall.prototype = {
	start: function() {
		this.running = true;
	}
	,execute: function() {
		if(this.handler != null) {
			this.handler();
		}
		this.running = false;
	}
	,end: function() {
	}
	,__class__: lovedna_task_DelayCall
};
var lovedna_task_ITask = function() { };
$hxClasses["lovedna.task.ITask"] = lovedna_task_ITask;
lovedna_task_ITask.__name__ = ["lovedna","task","ITask"];
lovedna_task_ITask.prototype = {
	__class__: lovedna_task_ITask
};
var lovedna_task_DelayTask = function() {
	this._map = new haxe_ds_IntMap();
	this._list = new lovedna_ds_BinaryHeap($bind(this,this.compare));
	this._callList = new lovedna_ds_FastArray();
	this._doList = new lovedna_ds_FastArray();
	this._changed = false;
};
$hxClasses["lovedna.task.DelayTask"] = lovedna_task_DelayTask;
lovedna_task_DelayTask.__name__ = ["lovedna","task","DelayTask"];
lovedna_task_DelayTask.__interfaces__ = [lovedna_task_ITask];
lovedna_task_DelayTask.prototype = {
	add: function(call) {
		if(this._map.exists(call.id)) {
			this._changed = true;
			return;
		}
		this._changed = true;
		this._map.set(call.id,call);
		call.start();
	}
	,remove: function(call) {
		if(this._map.exists(call.id)) {
			this._changed = true;
			this._map.remove(call.id);
			call.end();
		}
	}
	,onTaskStart: function(time) {
		this.running = true;
	}
	,onTaskExecute: function(time) {
		if(this._changed) {
			this._changed = false;
			this._list.Clear();
			var v = this._map.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				this._list.push(v1);
			}
			this._current = this._list.shift();
		}
		var len = this._list.count;
		if(this._current != null) {
			var now = lovedna_Time.get_now();
			while(this._current != null) {
				if(len < 0) {
					break;
				}
				if(now >= this._current.time) {
					this._map.remove(this._current.id);
					var c = this._list.shift();
					this._callList.push(this._current);
					this._current = c;
				} else {
					break;
				}
				--len;
			}
		}
		len = this._callList.get_length();
		if(len > 0) {
			this._doList.clear();
			while(len-- > 0) this._doList.push(this._callList.get(len));
			this._callList.clear();
			len = this._doList.get_length();
			while(len-- > 0) {
				var c1 = this._doList.getElement(len);
				c1.execute();
				c1.end();
			}
		}
		if(this._current == null && !this._changed) {
			this.running = false;
			return false;
		}
		return true;
	}
	,onTaskEnd: function(time) {
	}
	,compare: function(a,b) {
		if(a.time > b.time) {
			return 1;
		} else {
			return -1;
		}
	}
	,__class__: lovedna_task_DelayTask
};
var lovedna_task_Task = function() {
};
$hxClasses["lovedna.task.Task"] = lovedna_task_Task;
lovedna_task_Task.__name__ = ["lovedna","task","Task"];
lovedna_task_Task.add = function(v) {
	if(lovedna_task_Task._triggerList.indexOf(v) != -1) {
		return;
	}
	if(lovedna_task_Task._addList.indexOf(v) != -1) {
		return;
	}
	lovedna_task_Task._addList.push(v);
	if(lovedna_task_Task._timer == null) {
		lovedna_task_Task._timer = new haxe_Timer(15);
		lovedna_task_Task._timer.run = lovedna_task_Task.run;
	}
};
lovedna_task_Task.remove = function(v) {
	if(lovedna_task_Task._triggerList.remove(v) == -1) {
		lovedna_task_Task._addList.remove(v);
	}
	if(lovedna_task_Task._endList.indexOf(v) != -1) {
		return;
	}
	lovedna_task_Task._endList.push(v);
};
lovedna_task_Task.run = function() {
	var time = lovedna_Time.get_now();
	var len = lovedna_task_Task._endList.get_length();
	if(len > 0) {
		while(len-- > 0) {
			var v = lovedna_task_Task._endList.get(len);
			v.onTaskEnd(time);
		}
		lovedna_task_Task._endList.clear();
	}
	len = lovedna_task_Task._triggerList.get_length();
	if(len > 0) {
		while(len-- > 0) {
			var v1 = lovedna_task_Task._triggerList.get(len);
			if(!v1.onTaskExecute(time)) {
				lovedna_task_Task.remove(v1);
			}
		}
	}
	len = lovedna_task_Task._addList.get_length();
	if(len > 0) {
		while(len-- > 0) {
			var v2 = lovedna_task_Task._addList.get(len);
			lovedna_task_Task._triggerList.push(v2);
			v2.onTaskStart(time);
		}
		lovedna_task_Task._addList.clear();
	}
};
lovedna_task_Task.prototype = {
	__class__: lovedna_task_Task
};
var lovedna_ui_Key = function() {
	this.modifier = new lovedna_ds_Bit32();
	this.deviceType = 0;
	this.deviceId = 0;
	this.type = -1;
};
$hxClasses["lovedna.ui.Key"] = lovedna_ui_Key;
lovedna_ui_Key.__name__ = ["lovedna","ui","Key"];
lovedna_ui_Key.prototype = {
	copy: function(v) {
		this.deviceId = v.deviceId;
		this.deviceType = v.deviceType;
		this.type = v.type;
		this.keyCode = v.keyCode;
		this.value = v.value;
		this.key = v.key;
		this.modifier.value = v.modifier.value;
	}
	,trigger: function() {
		var e = lovedna_events_KeyEvent.onUpdate;
		e.key = this;
		lovedna_ui_Key.onEvent.dispatchEvent(e);
	}
	,get_id: function() {
		return this.deviceType * 10000 + this.deviceId * 1000 + this.keyCode;
	}
	,__class__: lovedna_ui_Key
	,__properties__: {get_id:"get_id"}
};
var lovedna_ui_KeyManager = function() {
	this._keys = new haxe_ds_IntMap();
};
$hxClasses["lovedna.ui.KeyManager"] = lovedna_ui_KeyManager;
lovedna_ui_KeyManager.__name__ = ["lovedna","ui","KeyManager"];
lovedna_ui_KeyManager.getInstance = function() {
	if(lovedna_ui_KeyManager._instance == null) {
		lovedna_ui_KeyManager._instance = new lovedna_ui_KeyManager();
	}
	return lovedna_ui_KeyManager._instance;
};
lovedna_ui_KeyManager.prototype = {
	keyTrigger: function(v) {
		var key = v.get_id();
		var k = null;
		if(this._keys.exists(key)) {
			k = this._keys.get(key);
		} else {
			k = new lovedna_ui_Key();
			this._keys.set(key,k);
		}
		var trigger = true;
		k.copy(v);
		if(trigger) {
			k.trigger();
		}
	}
	,__class__: lovedna_ui_KeyManager
};
var lovedna_ui_Touch = function() {
	this._key = null;
	this.type = 0;
	this._alive = false;
	this.touchId = -1;
	this.device = -1;
	this.size = 1;
	this.pressure = 1;
	this.position = new lovedna_math_Vector2();
	this.down = new lovedna_math_Vector2();
	this.up = new lovedna_math_Vector2();
	this.time = new lovedna_math_Vector3();
	this.lastTime = new lovedna_math_Vector3();
	this._will = new lovedna_ds_Bit32();
	this._was = new lovedna_ds_Bit32();
};
$hxClasses["lovedna.ui.Touch"] = lovedna_ui_Touch;
lovedna_ui_Touch.__name__ = ["lovedna","ui","Touch"];
lovedna_ui_Touch.prototype = {
	copy: function(v) {
		this.touchId = v.touchId;
		this.position.copy(v.position);
		this.size = v.size;
		this.pressure = v.pressure;
	}
	,begin: function(v) {
		this._will.clear();
		this._was.clear();
		this.copy(v);
		this.down.copy(this.position);
		this.lastTime.x = this.time.x;
		this.time.x = lovedna_Time.get_now();
		this._will.setElement(1);
		this._alive = true;
	}
	,move: function(v) {
		if(this._was.getElement(1) || this._will.getElement(1)) {
			this.copy(v);
			this.lastTime.y = this.time.y;
			this.time.y = lovedna_Time.get_now();
			this._will.setElement(2);
		}
	}
	,end: function(v) {
		this.copy(v);
		this.up.copy(this.position);
		this.lastTime.z = this.time.z;
		this.time.z = lovedna_Time.get_now();
		this._will.setElement(5);
	}
	,cancel: function(v) {
		this.copy(v);
		this.up.copy(this.position);
		this.lastTime.z = this.time.z;
		this.time.z = lovedna_Time.get_now();
		this._will.setElement(5);
	}
	,execute: function(now) {
		if(now == null) {
			now = lovedna_Time.get_now();
		}
		var hasDown = this._was.getElement(1);
		if(hasDown) {
			var hasHold = this._was.getElement(4);
			if(!hasHold) {
				if(now - this.time.x >= lovedna_ui_Touch.holdTime) {
					this._will.setElement(4);
				}
			}
		}
		var isDown = this._will.getElement(1);
		var isMove = this._will.getElement(2);
		var isHold = this._will.getElement(4);
		var isUp = this._will.getElement(5);
		var willOver = true;
		if(isDown) {
			this.type = 1;
			this._was.setElement(1);
			willOver = false;
			this.fire();
		}
		if(isMove) {
			this.type = 2;
			this._was.setElement(2);
			willOver = false;
			this.fire();
		}
		if(isHold) {
			this.type = 4;
			this._was.setElement(4);
			willOver = false;
			this.fire();
		}
		if(isUp) {
			this.type = 5;
			this._was.setElement(5);
			willOver = false;
			this.fire();
			this._was.clear();
			this._was.setElement(5);
			this._will.clear();
			this._alive = false;
		}
		if(willOver) {
			this.type = 3;
			this.fire();
		}
		this._will.clear();
	}
	,fire: function() {
		var e = lovedna_events_TouchEvent.onUpdate;
		e.touch = this;
		lovedna_ui_Touch.onEvent.dispatchEvent(e);
	}
	,__class__: lovedna_ui_Touch
};
var lovedna_ui_TouchManager = function(immediately) {
	if(immediately == null) {
		immediately = false;
	}
	this.touchType = 0;
	this._immediately = immediately;
	this.touchType = 0;
	this._list = [];
	var len = 20;
	while(len-- > 0) this._list.push(new lovedna_ui_Touch());
	this._keyMap = new haxe_ds_StringMap();
	this._deviceMap = new haxe_ds_IntMap();
	this._activeList = new lovedna_ds_FastArray();
	this.activeCount = 0;
	if(!this._immediately) {
		lovedna_task_Task.add(this);
	}
};
$hxClasses["lovedna.ui.TouchManager"] = lovedna_ui_TouchManager;
lovedna_ui_TouchManager.__name__ = ["lovedna","ui","TouchManager"];
lovedna_ui_TouchManager.__interfaces__ = [lovedna_task_ITask];
lovedna_ui_TouchManager.prototype = {
	reset: function() {
		this._keyMap = new haxe_ds_StringMap();
		this._deviceMap = new haxe_ds_IntMap();
		this._activeList = new lovedna_ds_FastArray();
		this.touchType = 0;
	}
	,begin: function(v) {
		var t = this.getTouch(v.device,v.touchId);
		if(t != null) {
			t.begin(v);
			if(lovedna_ui_TouchManager.onBegin != null) {
				lovedna_ui_TouchManager.onBegin(t);
			}
			if(this._immediately) {
				this.execute();
			}
		}
	}
	,move: function(v) {
		var t = this.getTouch(v.device,v.touchId);
		if(t != null) {
			t.move(v);
			if(this._immediately) {
				this.execute();
			}
		}
	}
	,end: function(v) {
		var t = this.getTouch(v.device,v.touchId);
		if(t != null) {
			t.end(v);
			this.unset(t);
			if(this._immediately) {
				this.execute();
			}
		}
	}
	,cancel: function(v) {
		var t = this.getTouch(v.device,v.touchId);
		if(t != null) {
			t.cancel(v);
			this.unset(t);
			if(this._immediately) {
				this.execute();
			}
		}
	}
	,execute: function() {
		this._activeList.clear();
		var now = lovedna_Time.get_now();
		var len = 20;
		while(len-- > 0) {
			var t = this._list[len];
			if(t._alive) {
				t.execute(now);
				if(t._alive) {
					this._activeList.push(t);
				}
			}
		}
		this.activeCount = this._activeList.get_length();
		if(this.activeCount < 1) {
			this.touchType = 0;
		}
	}
	,onTaskStart: function(time) {
	}
	,onTaskExecute: function(time) {
		this.execute();
		return true;
	}
	,onTaskEnd: function(time) {
	}
	,getTouch: function(device,id) {
		var key = "" + device + "|" + id;
		if(this._keyMap.exists(key)) {
			return this._keyMap.get(key);
		}
		var t = this.getUnused();
		if(t == null) {
			return null;
		}
		this._keyMap.set(key,t);
		var data = this._deviceMap.get(device);
		if(data == null) {
			data = new lovedna_ui__$TouchManager_DeviceData(device);
		}
		data.add(t);
		t._key = key;
		return t;
	}
	,getUnused: function() {
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			var t = this._list[i];
			if(t._key == null) {
				return t;
			}
		}
		return null;
	}
	,unset: function(t) {
		var key = t._key;
		var list = key.split("|");
		var device = lovedna_utils_Helper.stringToInt(list[0]);
		if(t.device != device) {
			haxe_Log.trace("error-----------------",{ fileName : "TouchManager.hx", lineNumber : 200, className : "lovedna.ui.TouchManager", methodName : "unset"});
		}
		t._key = null;
		this._keyMap.remove(key);
		var data = this._deviceMap.get(device);
		if(data == null) {
			return;
		}
		data.remove(t);
		if(data.count < 1) {
			this._deviceMap.remove(device);
		}
	}
	,__class__: lovedna_ui_TouchManager
};
var lovedna_ui__$TouchManager_DeviceData = function(id) {
	this.id = id;
	this._list = [];
	this.count = 0;
};
$hxClasses["lovedna.ui._TouchManager.DeviceData"] = lovedna_ui__$TouchManager_DeviceData;
lovedna_ui__$TouchManager_DeviceData.__name__ = ["lovedna","ui","_TouchManager","DeviceData"];
lovedna_ui__$TouchManager_DeviceData.prototype = {
	add: function(v) {
		v.device = this.id;
		var len = this._list.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._list[i] == null) {
				v.touchId = i;
				this._list[i] = v;
				this.count++;
				return;
			}
		}
		v.touchId = this._list.length;
		this._list.push(v);
		this.count++;
	}
	,remove: function(v) {
		var len = this._list.length;
		this.count = len;
		while(len-- > 0) if(this._list[len] == v) {
			this._list[len] = null;
			this.count--;
		}
	}
	,__class__: lovedna_ui__$TouchManager_DeviceData
};
var lovedna_utils_BytesUtil = function() {
};
$hxClasses["lovedna.utils.BytesUtil"] = lovedna_utils_BytesUtil;
lovedna_utils_BytesUtil.__name__ = ["lovedna","utils","BytesUtil"];
lovedna_utils_BytesUtil.compress = function(v,algorithm) {
	if(algorithm == null) {
		algorithm = "zlib";
	}
	var result = null;
	if(algorithm == "deflate") {
		result = pako.deflateRaw(v.getData());
	} else if(algorithm == "lzma") {
		return v;
	} else if(algorithm == "zlib") {
		result = pako.deflate(v.getData());
	}
	return haxe_io_Bytes.ofData(result);
};
lovedna_utils_BytesUtil.uncompress = function(v,algorithm) {
	if(algorithm == null) {
		algorithm = "zlib";
	}
	var result = null;
	if(algorithm == "deflate") {
		result = pako.inflateRaw(v.getData());
	} else if(algorithm == "lzma") {
		return v;
	} else if(algorithm == "zlib") {
		result = pako.inflate(v.getData());
	}
	return haxe_io_Bytes.ofData(result);
};
lovedna_utils_BytesUtil.getCRC32 = function(v) {
	return haxe_crypto_Crc32.make(v);
};
lovedna_utils_BytesUtil.prototype = {
	__class__: lovedna_utils_BytesUtil
};
var lovedna_utils_DynamicUtil = function() {
};
$hxClasses["lovedna.utils.DynamicUtil"] = lovedna_utils_DynamicUtil;
lovedna_utils_DynamicUtil.__name__ = ["lovedna","utils","DynamicUtil"];
lovedna_utils_DynamicUtil.getValue = function(v,name) {
	if(Std["is"](v,haxe_ds_StringMap)) {
		var map = v;
		return map.get(name);
	}
	return Reflect.getProperty(v,name);
};
lovedna_utils_DynamicUtil.setValue = function(v,name,value) {
	if(Std["is"](v,haxe_ds_StringMap)) {
		var map = v;
		map.set(name,value);
		return;
	}
	Reflect.setProperty(v,name,value);
};
lovedna_utils_DynamicUtil.getKeys = function(v) {
	return Reflect.fields(v);
};
lovedna_utils_DynamicUtil.removeKey = function(v,name) {
	Reflect.deleteField(v,name);
};
lovedna_utils_DynamicUtil.getInt = function(v,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = 0;
	}
	var value = lovedna_utils_DynamicUtil.getValue(v,name);
	if(value == null) {
		return defaultValue;
	}
	if(typeof(value) == "string") {
		return Std.parseInt(value);
	}
	return js_Boot.__cast(value , Int);
};
lovedna_utils_DynamicUtil.getFloat = function(v,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = 0;
	}
	var value = lovedna_utils_DynamicUtil.getValue(v,name);
	if(value == null) {
		return defaultValue;
	}
	if(typeof(value) == "string") {
		return Std.parseFloat(value);
	}
	return js_Boot.__cast(value , Float);
};
lovedna_utils_DynamicUtil.getString = function(v,name,defaultValue) {
	var value = lovedna_utils_DynamicUtil.getValue(v,name);
	if(value == null) {
		return defaultValue;
	}
	return Std.string(value);
};
lovedna_utils_DynamicUtil.getBool = function(v,name,defaultValue) {
	if(defaultValue == null) {
		defaultValue = false;
	}
	var value = lovedna_utils_DynamicUtil.getValue(v,name);
	if(value == null) {
		return defaultValue;
	}
	return value;
};
lovedna_utils_DynamicUtil.getFloatArray = function(v,name,scale) {
	if(scale == null) {
		scale = 1;
	}
	var values = lovedna_utils_DynamicUtil.getValue(v,name);
	if(scale != 1) {
		var _g1 = 0;
		var _g = values.length;
		while(_g1 < _g) {
			var i = _g1++;
			values[i] *= scale;
		}
	}
	return values;
};
lovedna_utils_DynamicUtil.getIntArray = function(v,name) {
	return lovedna_utils_DynamicUtil.getValue(v,name);
};
lovedna_utils_DynamicUtil.getUintArray = function(v,name) {
	return lovedna_utils_DynamicUtil.getValue(v,name);
};
lovedna_utils_DynamicUtil.getStringArray = function(v,name) {
	return lovedna_utils_DynamicUtil.getValue(v,name);
};
lovedna_utils_DynamicUtil.getArray = function(v,name) {
	return lovedna_utils_DynamicUtil.getValue(v,name);
};
lovedna_utils_DynamicUtil.exist = function(v,name) {
	var has = Reflect.hasField(v,name);
	if(!has) {
		if(Reflect.field(v,name) != null) {
			return true;
		}
	}
	return has;
};
lovedna_utils_DynamicUtil.prototype = {
	__class__: lovedna_utils_DynamicUtil
};
var lovedna_utils_Helper = function() {
};
$hxClasses["lovedna.utils.Helper"] = lovedna_utils_Helper;
lovedna_utils_Helper.__name__ = ["lovedna","utils","Helper"];
lovedna_utils_Helper.lerp = function(a,b,ratio) {
	return a + (b - a) * ratio;
};
lovedna_utils_Helper.lerpTo = function(from,to,from1,to1,input) {
	var dis = to - from;
	var dis1 = to1 - from1;
	return from1 + (input - from) / dis * dis1;
};
lovedna_utils_Helper.angleToRadian = function(value) {
	return value * 0.01745329251994329576923690768489;
};
lovedna_utils_Helper.radianToAngle = function(value) {
	return value * 57.295779513082320876798154814105;
};
lovedna_utils_Helper.stringToInt = function(v) {
	if(v == null || v.length < 1) {
		return 0;
	}
	return Std.parseInt(v);
};
lovedna_utils_Helper.stringToFloat = function(v) {
	if(v == null || v.length < 1) {
		return 0;
	}
	return Std.parseFloat(v);
};
lovedna_utils_Helper.stringToReverse = function(v) {
	var t = "";
	var i = v.length;
	while(--i >= 0) t += v.charAt(i);
	return t;
};
lovedna_utils_Helper.intToHex = function(v,length) {
	return StringTools.hex(v,length);
};
lovedna_utils_Helper.intToReverse = function(v) {
	var result = 0;
	while(v != 0) {
		result = result * 10 + v % 10;
		v = Std["int"](v * 0.1);
	}
	return result;
};
lovedna_utils_Helper.hexToInt = function(v) {
	if(v.indexOf("0x") == 0) {
		if(v.length > 10) {
			v = HxOverrides.substr(v,0,10);
		}
		return lovedna_utils_Helper.stringToInt(v);
	}
	if(v.length > 8) {
		v = HxOverrides.substr(v,0,8);
	}
	return lovedna_utils_Helper.stringToInt("0x" + v);
};
lovedna_utils_Helper.binToInt = function(v) {
	var b = 0;
	var j = 0;
	var i = v.length;
	while(i-- > 0) {
		var s = v.charAt(i);
		if(s == "0") {
			++j;
		} else if(s == "1") {
			b += 1 << j;
			++j;
		}
		if(j >= 32) {
			break;
		}
	}
	return b;
};
lovedna_utils_Helper.toBin = function(value) {
	var s = "";
	s += lovedna_utils_Helper.isEven(value) ? "0" : "1";
	if(_$UInt_UInt_$Impl_$.gt(value,1)) {
		while(true) {
			value = value >>> 1;
			s += lovedna_utils_Helper.isEven(value) ? "0" : "1";
			if(_$UInt_UInt_$Impl_$.gt(2,value)) {
				break;
			}
		}
	}
	return lovedna_utils_Helper.stringToReverse(s);
};
lovedna_utils_Helper.intToBool = function(v) {
	return v != 0;
};
lovedna_utils_Helper.toExp = function(v,n) {
	var t = 1;
	var r = 0;
	while(true) {
		if((n & 1) != 0) {
			t = v * t;
		}
		n >>= 1;
		if(n == 0) {
			r = t;
			break;
		} else {
			v *= v;
		}
	}
	return r;
};
lovedna_utils_Helper.fixed = function(v,decimalPlaces) {
	if(decimalPlaces == null) {
		decimalPlaces = 4;
	}
	var t = lovedna_utils_Helper.toExp(10,decimalPlaces);
	var s = Std.string(Std["int"](v * t) / t);
	var i = s.indexOf(".");
	if(i != -1) {
		var _g1 = HxOverrides.substr(s,i + 1,null).length;
		var _g = decimalPlaces;
		while(_g1 < _g) {
			var i1 = _g1++;
			s += "0";
		}
	} else {
		s += ".";
		var _g11 = 0;
		var _g2 = decimalPlaces;
		while(_g11 < _g2) {
			var i2 = _g11++;
			s += "0";
		}
	}
	return lovedna_utils_Helper.stringToFloat(s);
};
lovedna_utils_Helper.isZero = function(v) {
	return lovedna_utils_Helper.abs(v) < 0.0000001;
};
lovedna_utils_Helper.abs = function(v) {
	if(v < 0) {
		return -v;
	} else {
		return v;
	}
};
lovedna_utils_Helper.absInt = function(v) {
	if(v < 0) {
		return -v;
	} else {
		return v;
	}
};
lovedna_utils_Helper.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
lovedna_utils_Helper.minInt = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
lovedna_utils_Helper.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
lovedna_utils_Helper.maxInt = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
lovedna_utils_Helper.clamp = function(v,min,max) {
	if(v < min) {
		return min;
	} else if(v > max) {
		return max;
	} else {
		return v;
	}
};
lovedna_utils_Helper.isEven = function(v) {
	return (v & 1) == 0;
};
lovedna_utils_Helper.isPow2 = function(v) {
	if(v > 0) {
		return (v & v - 1) == 0;
	} else {
		return false;
	}
};
lovedna_utils_Helper.intToNextPow2 = function(v) {
	var t = v - 1;
	t |= t >> 1;
	t |= t >> 2;
	t |= t >> 4;
	t |= t >> 8;
	t |= t >> 16;
	return t + 1;
};
lovedna_utils_Helper.pow2Count = function(v) {
	v = lovedna_utils_Helper.intToNextPow2(v);
	var c = 0;
	while(v > 1) {
		v >>= 1;
		++c;
	}
	return c;
};
lovedna_utils_Helper.floor = function(v) {
	var f = Std["int"](v);
	if(v < 0 && f != v) {
		--f;
	}
	return f;
};
lovedna_utils_Helper.round = function(v) {
	return Std["int"](v + 16384.5) - 16384;
};
lovedna_utils_Helper.ceil = function(v) {
	var f = Std["int"](v);
	if(v == f) {
		return f;
	}
	++v;
	var f1 = Std["int"](v);
	if(v < 0 && f1 != v) {
		--f1;
	}
	return f1;
};
lovedna_utils_Helper.fract = function(value) {
	return value - lovedna_utils_Helper.floor(value);
};
lovedna_utils_Helper.trim = function(value,str) {
	if(str == null) {
		str = " ";
	}
	value = StringTools.replace(StringTools.trim(value),"/t","");
	if(str == "") {
		return value;
	}
	if(value.indexOf(str) == 0) {
		value = HxOverrides.substr(value,1,null);
	}
	if(value.lastIndexOf(str) == value.length - 1) {
		value = HxOverrides.substr(value,0,-1);
	}
	return value;
};
lovedna_utils_Helper.ltrim = function(value) {
	return StringTools.replace(StringTools.ltrim(value),"/t","");
};
lovedna_utils_Helper.rtrim = function(value) {
	return StringTools.replace(StringTools.rtrim(value),"/t","");
};
lovedna_utils_Helper.replace = function(v,sub,by) {
	return StringTools.replace(v,sub,by);
};
lovedna_utils_Helper.startWith = function(s,start) {
	return StringTools.startsWith(s,start);
};
lovedna_utils_Helper.endWith = function(s,end) {
	return StringTools.endsWith(s,end);
};
lovedna_utils_Helper.stringFill = function(value,count,fill) {
	if(fill == null) {
		fill = " ";
	}
	if(fill == "") {
		return value;
	}
	if(count == 0) {
		return value;
	}
	var left = count < 0;
	count = lovedna_utils_Helper.absInt(count);
	var s = "";
	var len = value.length;
	count -= len;
	var _g1 = 0;
	var _g = count;
	while(_g1 < _g) {
		var i = _g1++;
		s += fill;
	}
	if(left) {
		return s + value;
	} else {
		return value + s;
	}
};
lovedna_utils_Helper.binarySearchLow = function(values,target) {
	var low = 0;
	var height = values.length - 1;
	var mid = height >>> 1;
	var len = height;
	while(len-- > 0) {
		var midvalue = values[mid];
		if(target > midvalue) {
			low = mid;
			mid += height - low >>> 1;
		} else if(target < midvalue) {
			height = mid;
			mid = low + (height - low >>> 1);
		} else if(target == midvalue) {
			return mid;
		}
		if(height - low < 3) {
			if(target >= values[height]) {
				return height;
			} else if(target >= values[mid]) {
				return mid;
			} else if(target >= values[low]) {
				return low;
			}
		}
	}
	return -1;
};
lovedna_utils_Helper.binarySearch = function(values,target) {
	var len = values.length;
	var low = 0;
	var high = len - 2;
	if(high == 0) {
		return 0;
	}
	var current = high >>> 1;
	while(len-- > 0) {
		if(values[current + 1] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return low;
		}
		current = low + high >>> 1;
	}
	return -1;
};
lovedna_utils_Helper.concat = function(a,b) {
	if(a == null || b == null) {
		return;
	}
	var start = a.length;
	var len = b.length;
	while(len-- > 0) a[start + len] = b[len];
};
lovedna_utils_Helper.randomString = function(v) {
	var count = Std.parseInt(HxOverrides.substr(v,0,1));
	v = HxOverrides.substr(v,1,null);
	var len = Std["int"](v.length / count);
	var s = "";
	while(len-- > 0) {
		var codes = HxOverrides.substr(v,len * count,count);
		s += String.fromCharCode(Std.parseInt(codes));
	}
	return s;
};
lovedna_utils_Helper.prototype = {
	__class__: lovedna_utils_Helper
};
var lovedna_utils_PoolOptions = function() {
};
$hxClasses["lovedna.utils.PoolOptions"] = lovedna_utils_PoolOptions;
lovedna_utils_PoolOptions.__name__ = ["lovedna","utils","PoolOptions"];
lovedna_utils_PoolOptions.prototype = {
	__class__: lovedna_utils_PoolOptions
};
var lovedna_utils_macro_CompileTime = function() { };
$hxClasses["lovedna.utils.macro.CompileTime"] = lovedna_utils_macro_CompileTime;
lovedna_utils_macro_CompileTime.__name__ = ["lovedna","utils","macro","CompileTime"];
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
lovedna_game_LayerMask._names = [];
lovedna_game_LayerMask._layers = new haxe_ds_StringMap();
lovedna_game_LayerMask.setLayerName(0,"Default");
lovedna_game_LayerMask.setLayerName(1,"Transparent");
lovedna_game_LayerMask.setLayerName(2,"IgnoreRaycast");
lovedna_game_LayerMask.setLayerName(3,"Water");
lovedna_game_LayerMask.setLayerName(4,"UI");
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lovedna_Object._id = 0;
lovedna_events_EventDispatcher._temp = [];
lovedna_game_Actor._destoryCount = 0;
jump_MapActor.hero = 1;
jump_MapActor.enemy = 2;
jump_GameConfig.mapWidth = 1138;
jump_GameConfig.mapHeight = 640;
jump_GameConfig.heroSize = 35;
jump_GameConfig.col = 18;
jump_GameConfig.row = 10;
jump_GameConfig.mapCellSize = 60;
jump_GameConfig.xforce = 230;
jump_GameConfig.yforce = 9;
jump_GameConfig.gforce = 34;
jump_GameConfig.minyforce = -18;
jump_GameConfig.gclimb = 90;
jump_GameConfig.climbforce = 10.799999999999999;
lovedna_Time._custom = lovedna_Time.getnow;
lovedna_Time._offset = 0;
lovedna_ds_Array2D._temp = [];
lovedna_ds_Bit32.elementCount = 32;
lovedna_utils_TypeUtil._typeMap = new haxe_ds_ObjectMap();
lovedna_utils_TypeUtil._typeClassMap = new haxe_ds_ObjectMap();
lovedna_events_Event.complete = new lovedna_events_Event("complete");
lovedna_events_Event.init = new lovedna_events_Event("init");
lovedna_events_Event.data = new lovedna_events_Event("data");
lovedna_events_Event.lost = new lovedna_events_Event("lost");
lovedna_events_KeyEvent.onUpdate = new lovedna_events_KeyEvent("onUpdate");
lovedna_events_TouchEvent.onUpdate = new lovedna_events_TouchEvent("touchUpdate");
lovedna_format_atlas_Atlas.TYPE = -590019044;
lovedna_format_atlas_Atlas._atlasMap = new haxe_ds_StringMap();
lovedna_format_fnt_Fnt.TYPE = -1629174247;
lovedna_format_fnt_Fnt._map = new haxe_ds_StringMap();
lovedna_format_g3d_DataG3D.TYPE = -239294721;
lovedna_format_g3d_DataG3D.version = 1;
lovedna_format_g3d_ModelMesh.POSITION = "POSITION";
lovedna_format_g3d_ModelMesh.NORMAL = "NORMAL";
lovedna_format_g3d_ModelMesh.COLOR = "COLOR";
lovedna_format_g3d_ModelMesh.TEXCOORD0 = "TEXCOORD0";
lovedna_format_g3d_ModelMesh.TEXCOORD1 = "TEXCOORD1";
lovedna_format_g3d_ModelMesh.TANGENT = "TANGENT";
lovedna_format_g3d_ModelMesh.BINORMAL = "BINORMAL";
lovedna_format_g3d_ModelMesh.BLENDWEIGHT0 = "BLENDWEIGHT0";
lovedna_format_g3d_ModelMesh.BLENDWEIGHT1 = "BLENDWEIGHT1";
lovedna_format_g3d_ModelMesh.BLENDWEIGHT2 = "BLENDWEIGHT2";
lovedna_format_g3d_ModelMesh.BLENDWEIGHT3 = "BLENDWEIGHT3";
lovedna_format_g3d_ModelTexture.USAGE_UNKNOWN = 0;
lovedna_format_g3d_ModelTexture.USAGE_NONE = 1;
lovedna_format_g3d_ModelTexture.USAGE_DIFFUSE = 2;
lovedna_format_g3d_ModelTexture.USAGE_EMISSIVE = 3;
lovedna_format_g3d_ModelTexture.USAGE_AMBIENT = 4;
lovedna_format_g3d_ModelTexture.USAGE_SPECULAR = 5;
lovedna_format_g3d_ModelTexture.USAGE_SHININESS = 6;
lovedna_format_g3d_ModelTexture.USAGE_NORMAL = 7;
lovedna_format_g3d_ModelTexture.USAGE_BUMP = 8;
lovedna_format_g3d_ModelTexture.USAGE_TRANSPARENCY = 9;
lovedna_format_g3d_ModelTexture.USAGE_REFLECTION = 10;
lovedna_utils_TempPool._pools = [];
lovedna_math_Vector2.elementCount = 2;
lovedna_math_Vector2._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_math_Vector2();
});
lovedna_math_Vector2.instance = new lovedna_math_Vector2();
lovedna_format_mesh_Geometry._id = 0;
lovedna_format_mesh_Geometry._uv = new lovedna_math_Vector2();
lovedna_format_meta_Meta.TYPE = -433249250;
lovedna_format_png_PngChunk.TYPE_IHDR = 1229472850;
lovedna_format_png_PngChunk.TYPE_IDAT = 1229209940;
lovedna_format_png_PngChunk.TYPE_IEND = 1229278788;
lovedna_format_png_PngChunk.TYPE_cHRM = 1665684045;
lovedna_format_png_PngChunk.TYPE_gAMA = 1732332865;
lovedna_format_png_PngChunk.TYPE_sBIT = 1933723988;
lovedna_format_png_PngChunk.TYPE_PLTE = 1347179589;
lovedna_format_png_PngChunk.TYPE_bKGD = 1649100612;
lovedna_format_png_PngChunk.TYPE_hIST = 1749635924;
lovedna_format_png_PngChunk.TYPE_tRNS = 1951551059;
lovedna_format_png_PngChunk.TYPE_oFFs = 1866876531;
lovedna_format_png_PngChunk.TYPE_pHYs = 1883789683;
lovedna_format_png_PngChunk.TYPE_sCAL = 1933787468;
lovedna_format_png_PngChunk.TYPE_tIME = 1950960965;
lovedna_format_png_PngChunk.TYPE_tEXt = 1950701684;
lovedna_format_png_PngChunk.TYPE_zTXt = 2052348020;
lovedna_format_png_PngChunk.TYPE_fRAc = 1716666723;
lovedna_format_png_PngChunk.TYPE_gIFg = 1732855399;
lovedna_format_png_PngChunk.TYPE_gIFt = 1732855412;
lovedna_format_png_PngChunk.TYPE_gIFx = 1732855416;
lovedna_format_png_PngChunk.TYPE_iTXt = 1767135348;
lovedna_format_png_PngChunk.TYPE_USER = 1716666723;
lovedna_format_tag_TagData.TYPE = -199789115;
lovedna_game__$Actor_ComponentState.state_connect = 0;
lovedna_game__$Actor_ComponentState.state_remove = 1;
lovedna_game_CameraClearFlags.Nothing = 0;
lovedna_game_CameraClearFlags.Color = 1;
lovedna_game_CameraClearFlags.Depth = 2;
lovedna_game_CameraClearFlags.All = 3;
lovedna_game_DefineName._id = 0;
lovedna_game_DefineName.POSITION = new lovedna_game_DefineName("POSITION",3,lovedna_game_DefineName._id++);
lovedna_game_DefineName.UV = new lovedna_game_DefineName("UV",2,lovedna_game_DefineName._id++);
lovedna_game_DefineName.UV2 = new lovedna_game_DefineName("UV2",2,lovedna_game_DefineName._id++);
lovedna_game_DefineName.NORMAL = new lovedna_game_DefineName("NORMAL",3,lovedna_game_DefineName._id++);
lovedna_game_DefineName.NORMAL2 = new lovedna_game_DefineName("NORMAL2",3,lovedna_game_DefineName._id++);
lovedna_game_DefineName.TANGENT = new lovedna_game_DefineName("TANGENT",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR = new lovedna_game_DefineName("COLOR",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR2 = new lovedna_game_DefineName("COLOR2",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR3 = new lovedna_game_DefineName("COLOR3",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR4 = new lovedna_game_DefineName("COLOR4",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR5 = new lovedna_game_DefineName("COLOR5",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR6 = new lovedna_game_DefineName("COLOR6",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR7 = new lovedna_game_DefineName("COLOR7",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR8 = new lovedna_game_DefineName("COLOR8",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.COLOR9 = new lovedna_game_DefineName("COLOR9",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.BONE_INDEX = new lovedna_game_DefineName("BONE_INDEX",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.BONE_WEIGHT = new lovedna_game_DefineName("BONE_WEIGHT",4,lovedna_game_DefineName._id++);
lovedna_game_DefineName.P = new lovedna_game_DefineName("P",16);
lovedna_game_DefineName.V = new lovedna_game_DefineName("V",16);
lovedna_game_DefineName.VP = new lovedna_game_DefineName("VP",16);
lovedna_game_DefineName.IV = new lovedna_game_DefineName("IV",16);
lovedna_game_DefineName.IVP = new lovedna_game_DefineName("IVP",16);
lovedna_game_DefineName.M = new lovedna_game_DefineName("M",16);
lovedna_game_DefineName.IM = new lovedna_game_DefineName("IM",16);
lovedna_game_DefineName.ALPHA_TEST = new lovedna_game_DefineName("ALPHA_TEST");
lovedna_game_DefineName.TEX = new lovedna_game_DefineName("TEX");
lovedna_game_DefineName.TEX2 = new lovedna_game_DefineName("TEX2");
lovedna_game_DefineName.TEX3 = new lovedna_game_DefineName("TEX3");
lovedna_game_DefineName.TEX4 = new lovedna_game_DefineName("TEX4");
lovedna_game_DefineName.TEX5 = new lovedna_game_DefineName("TEX5");
lovedna_game_DefineName.TEX_ST = new lovedna_game_DefineName("TEX_ST",4);
lovedna_game_DefineName.TEX2_ST = new lovedna_game_DefineName("TEX2_ST",4);
lovedna_game_DefineName.TEX3_ST = new lovedna_game_DefineName("TEX3_ST",4);
lovedna_game_DefineName.TEX4_ST = new lovedna_game_DefineName("TEX4_ST",4);
lovedna_game_DefineName.TEX5_ST = new lovedna_game_DefineName("TEX5_ST",4);
lovedna_game_DefineName.CUBE = new lovedna_game_DefineName("CUBE");
lovedna_game_DefineName.CUBE2 = new lovedna_game_DefineName("CUBE2");
lovedna_game_DefineName.CUBE3 = new lovedna_game_DefineName("CUBE3");
lovedna_game_DefineName.CUBE4 = new lovedna_game_DefineName("CUBE4");
lovedna_game_DefineName.EYE = new lovedna_game_DefineName("EYE",3);
lovedna_game_DefineName.TIME = new lovedna_game_DefineName("TIME",4);
lovedna_game_DefineName.TIME_SIN = new lovedna_game_DefineName("TIME_SIN",4);
lovedna_game_DefineName.TIME_COS = new lovedna_game_DefineName("TIME_COS",4);
lovedna_game_DefineName.TIME_DELTA = new lovedna_game_DefineName("TIME_DELTA",4);
lovedna_game_DefineName.SCREEN_PARAMS = new lovedna_game_DefineName("SCREEN_PARAMS",4);
lovedna_game_DefineName.TARGET_PARAMS = new lovedna_game_DefineName("TARGET_PARAMS",4);
lovedna_game_DefineName.PROJECTION_PARAMS = new lovedna_game_DefineName("PROJECTION_PARAMS",4);
lovedna_game_DefineName.ORTHOGRAPHIC_PARAMS = new lovedna_game_DefineName("ORTHOGRAPHIC_PARAMS",4);
lovedna_game_DefineName.GRAB = new lovedna_game_DefineName("GRAB");
lovedna_game_DefineName.BONE = new lovedna_game_DefineName("BONE");
lovedna_game_DefineName.LIGHT = new lovedna_game_DefineName("LIGHT");
lovedna_game_DefineName.LIGHT_POSITION = new lovedna_game_DefineName("LIGHT_POSITION");
lovedna_game_DefineName.LIGHT_AMBIENT = new lovedna_game_DefineName("LIGHT_AMBIENT");
lovedna_game_DefineName.LIGHT_DIFFUSE = new lovedna_game_DefineName("LIGHT_DIFFUSE");
lovedna_game_DefineName.LIGHT_SPECULAR = new lovedna_game_DefineName("LIGHT_SPECULAR");
lovedna_game_LayerMask.Default = 0;
lovedna_game_LayerMask.Transparent = 1;
lovedna_game_LayerMask.IgnoreRaycast = 2;
lovedna_game_LayerMask.Water = 3;
lovedna_game_LayerMask.UI = 4;
lovedna_game_GameInput.touchCount = 0;
lovedna_game_GameInput._layerMask = new lovedna_game_LayerMask();
lovedna_game_GameInput._raycastList = new lovedna_ds_FastArray();
lovedna_game_GameInput._init = false;
lovedna_game_GameInput._touchChange = false;
lovedna_game_GameInput._touchs = [];
lovedna_game_GameInput._touchDown = new haxe_ds_IntMap();
lovedna_game_GameInput._touchUp = new haxe_ds_IntMap();
lovedna_game_GameInput._touchIdList = new lovedna_ds_FastArray();
lovedna_game_GameTime.fixedTime = 0.0166666666666667;
lovedna_game_GameTime._offset = 0;
lovedna_game_GameTime._blurTime = 0;
lovedna_game_GameTime._focused = true;
lovedna_game_Material.Background = 10000;
lovedna_game_Material.Geometry = 20000;
lovedna_game_Material.Transparent = 30000;
lovedna_game_Material.UI = 40000;
lovedna_game_Material.Overlay = 50000;
lovedna_game_Mesh._geombuffer = new haxe_ds_IntMap();
lovedna_game_Mesh._id = 0;
lovedna_game_ShaderDefine._fnv = new lovedna_ds_Fnv();
lovedna_game_Shader.channel_global = 0;
lovedna_game_Shader.channel_mesh = 1;
lovedna_game_Shader.channel_material = 2;
lovedna_game_Shader._fnv = new lovedna_ds_Fnv();
lovedna_game_Shader.defaultPrecision = new lovedna_game_ShaderPrecision();
lovedna_game_Shader._programMap = new haxe_ds_IntMap();
lovedna_game_ShaderCode._id = 0;
lovedna_game_ShaderCode.defaultCode = new lovedna_game_ShaderCode("builtin_default","attribute vec3 position:POSITION;\r\nuniform mat4 game_MatrixVP:VP;\r\nuniform mat4 game_MatrixM:M;\r\n#ifdef UV\r\nattribute vec2 uv:UV;\r\nvarying vec2 vuv;\r\n#endif\r\n\r\n#ifdef NORMAL\r\nattribute vec3 normal:NORMAL;\r\nvarying vec3 vnormal;\r\n#endif\r\n\r\n#ifdef COLOR\r\nattribute vec4 color:COLOR;\r\nvarying vec4 vcolor;\r\n#endif\r\n\r\n#ifdef BONE\r\nuniform mat4 u_bones[50]:BONE;\r\nattribute vec4 a_weights:BONE_WEIGHT;\r\nattribute vec4 a_indices:BONE_INDEX;\r\n\r\nmat4 getBoneMatrix( const in float i )\r\n{\r\n\tmat4 bone = u_bones[ int(i) ];\r\n\treturn bone;\r\n}\r\n#endif\r\n\r\nvarying vec3 worldPosition;\r\n\r\nvoid main(void){\r\n\tmat4 modelMat =game_MatrixM;\r\n\t\r\n\t#ifdef UV\r\n\tvuv=uv;\r\n\t#endif\r\n\t\r\n\t#ifdef COLOR\r\n\tvcolor=\tcolor;\r\n\t#endif\r\n\t\r\n\t#ifdef BONE\r\n\tmat4 skinMat = a_weights.x * getBoneMatrix(a_indices.x);\r\n\tskinMat += a_weights.y * getBoneMatrix(a_indices.y);\r\n\tskinMat += a_weights.z * getBoneMatrix(a_indices.z);\r\n\tskinMat += a_weights.w * getBoneMatrix(a_indices.w);\r\n\tmodelMat=skinMat;\r\n\t#endif\r\n\t\r\n\tvec4 wp=modelMat*vec4(position,1.0);\r\n\tworldPosition=wp.xyz;\r\n\t\r\n\tgl_Position = game_MatrixVP * wp;\r\n\t\r\n\t#ifdef NORMAL\r\n\tvnormal = vec4( modelMat * vec4( normal, 0.0 ) ).xyz;\r\n\t#endif\r\n}","uniform mat4 game_MatrixIM:IM;\r\nuniform vec3 cameraPosition:EYE;\r\nuniform vec4 gcolor:COLOR;\r\n#ifdef TEX\r\nuniform sampler2D Texture0:TEX;\r\n#endif\r\n\r\n#ifdef UV\r\nvarying vec2 vuv;\r\n#endif\r\n\r\n#ifdef TEX_ST\r\nuniform vec4 texST:TEX_ST;\r\n#endif\r\n\r\n#ifdef COLOR\r\nvarying vec4 vcolor;\r\n#endif\r\n\r\n#ifdef NORMAL\r\nvarying vec3 vnormal;\t\r\n#endif\r\n\r\n#ifdef LIGHT\r\n\t#ifdef NORMAL\r\n\tuniform vec3 lightPosition:LIGHT_POSITION;\r\n\tuniform vec4 lightAmbient:LIGHT_AMBIENT;\r\n\tuniform vec4 lightDiffuse:LIGHT_DIFFUSE;\r\n\tuniform vec4 lightSpecular:LIGHT_SPECULAR;\r\n\t#endif\r\n#endif\r\n\r\nvarying vec3 worldPosition;\r\n\r\nvoid main(void){\r\n\tvec4 baseColor=vec4(1.0,1.0,1.0,1.0);\r\n\t#ifdef TEX\r\n\t\t#ifdef UV\r\n\t\t#ifdef TEX_ST\r\n\t\tbaseColor*=texture2D(Texture0,vuv*texST.xy+texST.zw);\r\n\t\t#else\r\n\t\tbaseColor*=texture2D(Texture0,vuv);\r\n\t\t#endif\r\n\t\t#ifdef ALPHA_TEST\r\n\t\tif(baseColor.a<0.1)\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\t#ifdef COLOR\r\n\tbaseColor=baseColor*vcolor;\r\n\t#endif\r\n\tbaseColor=baseColor*gcolor;\r\n\t#ifdef LIGHT\r\n\t\t#ifdef NORMAL\r\n\t\t//vec3  invLight = normalize(game_MatrixIM * vec4(lightPosition, 0.0)).xyz;\r\n\t\tfloat diffuse = clamp(dot(vnormal, lightPosition), 0.3,1.0);\r\n\t\tdiffuse=smoothstep(0.0,0.6,diffuse);\r\n\t\tvec4 diffuseColor = vec4(vec3(diffuse), 1.0)*lightDiffuse;\r\n\t\tvec3  invEye   = normalize(game_MatrixIM * vec4(cameraPosition, 0.0)).xyz;\r\n\t\tvec3  halfLE   = normalize(lightPosition + invEye);\r\n\t\tfloat specular = pow(clamp(dot(vnormal, halfLE), 0.0, 1.0), lightSpecular.w);\r\n\t\tfloat baseAlpha=baseColor.a;\r\n\t\tbaseColor=baseColor*diffuseColor+vec4(vec3(specular)*lightSpecular.rgb, baseAlpha)+lightAmbient;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\tgl_FragColor = baseColor;\r\n}");
lovedna_game_graphics_GLState.BLENDING_FACTOR_ONE = 1;
lovedna_game_graphics_GLState.BLENDING_FACTOR_ZERO = 0;
lovedna_game_graphics_GLState.BLENDING_FACTOR_SRC_ALPHA = 770;
lovedna_game_graphics_GLState.BLENDING_FACTOR_DST_ALPHA = 32970;
lovedna_game_graphics_GLState.BLENDING_FACTOR_ONE_MINUS_SRC_ALPHA = 771;
lovedna_game_graphics_GLState.BLENDING_FACTOR_ONE_MINUS_DST_ALPHA = 773;
lovedna_game_graphics_GLState.BLENDING_FACTOR_SRC_COLOR = 768;
lovedna_game_graphics_GLState.BLENDING_FACTOR_DST_COLOR = 774;
lovedna_game_graphics_GLState.BLENDING_FACTOR_ONE_MINUS_SRC_COLOR = 769;
lovedna_game_graphics_GLState.BLENDING_FACTOR_ONE_MINUS_DST_COLOR = 775;
lovedna_game_graphics_GLState.BLENDING_OPERATION_ADD = 32774;
lovedna_game_graphics_GLState.BLENDING_OPERATION_SUBTRACT = 32778;
lovedna_game_graphics_GLState.BLENDING_OPERATION_REVERSE_SUBTRACT = 32779;
lovedna_game_graphics_GLState.COMPAREMODE_ALWAYS = 519;
lovedna_game_graphics_GLState.COMPAREMODE_NEVER = 512;
lovedna_game_graphics_GLState.COMPAREMODE_EQUAL = 514;
lovedna_game_graphics_GLState.COMPAREMODE_NOTEQUAL = 517;
lovedna_game_graphics_GLState.COMPAREMODE_LESS = 513;
lovedna_game_graphics_GLState.COMPAREMODE_LEQUAL = 515;
lovedna_game_graphics_GLState.COMPAREMODE_GREATER = 516;
lovedna_game_graphics_GLState.COMPAREMODE_GEQUAL = 518;
lovedna_game_graphics_GLState.CULLMODE_BACK = 1029;
lovedna_game_graphics_GLState.CULLMODE_FRONT = 1028;
lovedna_game_graphics_GLState.CULLMODE_FRONT_AND_BACK = 1032;
lovedna_game_graphics_GLState.CULLMODE_OFF = -1;
lovedna_game_graphics_GLState.STENCIL_ACTION_KEEP = 7680;
lovedna_game_graphics_GLState.STENCIL_ACTION_REPLACE = 7681;
lovedna_game_graphics_GLState.STENCIL_ACTION_INCR = 7682;
lovedna_game_graphics_GLState.STENCIL_ACTION_DECR = 7683;
lovedna_game_graphics_GLState.STENCIL_ACTION_INCR_WRAP = 34055;
lovedna_game_graphics_GLState.STENCIL_ACTION_DECR_WRAP = 34056;
lovedna_game_graphics_GLState.STENCIL_ACTION_INVERT = 5386;
lovedna_game_graphics_GLState.STENCIL_ACTION_ZERO = 0;
lovedna_game_graphics_GLState.USAGE_STATIC_DRAW = 35044;
lovedna_game_graphics_GLState.USAGE_DYNAMIC_DRAW = 35048;
lovedna_game_graphics_GLState.DRAWMODE_POINTS = 0;
lovedna_game_graphics_GLState.DRAWMODE_LINES = 1;
lovedna_game_graphics_GLState.DRAWMODE_LINE_LOOP = 2;
lovedna_game_graphics_GLState.DRAWMODE_LINE_STRIP = 3;
lovedna_game_graphics_GLState.DRAWMODE_TRIANGLES = 4;
lovedna_game_graphics_GLState.DRAWMODE_TRIANGLE_STRIP = 5;
lovedna_game_graphics_GLState.DRAWMODE_TRIANGLE_FAN = 6;
lovedna_math_Vector4.elementCount = 4;
lovedna_math_Vector4._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_math_Vector4();
});
lovedna_math_Vector4.instance = new lovedna_math_Vector4();
lovedna_math_Color._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_math_Color();
});
lovedna_game_render_commands_Blit._material = new lovedna_game_Material();
lovedna_game_render_RenderBuffer.$length = 0;
lovedna_game_render_RenderBuffer._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_RenderBuffer();
});
lovedna_game_render_RenderBuffer._SetGlobalShaderUniform = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetGlobalShaderUniform();
});
lovedna_game_render_RenderBuffer._SetShaderDefine = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetShaderDefine();
});
lovedna_game_render_RenderBuffer._SetShaderUniform = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetShaderUniform();
});
lovedna_game_render_RenderBuffer._SetMeshBuffer = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetMeshBuffer();
});
lovedna_game_render_RenderBuffer._SetIndexBuffer = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetIndexBuffer();
});
lovedna_game_render_RenderBuffer._SetVertexBuffer = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetVertexBuffer();
});
lovedna_game_render_RenderBuffer._Draw = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_Draw();
});
lovedna_game_render_RenderBuffer._SetCallback = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetCallback();
});
lovedna_game_render_RenderBuffer._SetMaterial = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetMaterial();
});
lovedna_game_render_RenderBuffer._Blit = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_Blit();
});
lovedna_game_render_RenderBuffer._SetContext = new lovedna_utils_TempPool(function() {
	return new lovedna_game_render_commands_SetRenderContext();
});
lovedna_game_Screen._material = new lovedna_game_Material();
lovedna_game_Screen._buffer = new lovedna_game_render_RenderBuffer();
lovedna_game_graphics_RenderContext.__meta__ = { fields : { clearBufferfi : { version : [2]}, clearBufferfv : { version : [2]}, clearBufferiv : { version : [2]}, clearBufferuiv : { version : [2]}}};
lovedna_game_System.gl = new lovedna_game_graphics_RenderContext();
lovedna_game_World.maxDeltaTime = 0.02;
lovedna_game_components_Collider.__meta__ = { obj : { allowMulti : null}};
lovedna_game_components_Canvas.EXACT_FIT = 0;
lovedna_game_components_Canvas.SHOW_ALL = 1;
lovedna_game_components_Canvas.NO_SCALE = 2;
lovedna_game_components_Canvas.NO_BORDER = 3;
lovedna_game_components_Canvas.FIXED_WIDTH = 4;
lovedna_game_components_Canvas.FIXED_HEIGHT = 5;
lovedna_game_components_Image.mesh = new lovedna_game_Mesh();
lovedna_geom_Rect._helpVec0 = new lovedna_math_Vector2();
lovedna_geom_Rect._helpVec1 = new lovedna_math_Vector2();
lovedna_utils_string_RichChunk.TYPE_ALONE = 0;
lovedna_utils_string_RichChunk.TYPE_LEFT = -1;
lovedna_utils_string_RichChunk.TYPE_RIGHT = 1;
lovedna_utils_string_RichTextParser._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_utils_string_RichChunk();
});
lovedna_game_components_Text._parse = new lovedna_utils_string_RichTextParser();
lovedna_game_components_Text._charpool = new lovedna_utils_TempPool(function() {
	return new lovedna_game_components__$Text_CharInfo();
});
lovedna_game_events_ActorEvent.onUpdate = new lovedna_game_events_ActorEvent("onUpdate");
lovedna_game_events_ActorEvent.onLateUpdate = new lovedna_game_events_ActorEvent("onLateUpdate");
lovedna_game_events_ActorEvent.onFixedUpdate = new lovedna_game_events_ActorEvent("onFixedUpdate");
lovedna_game_events_ActorEvent.onTransform = new lovedna_game_events_ActorEvent("onTransform");
lovedna_game_events_ActorEvent.onRectTransform = new lovedna_game_events_ActorEvent("onRectTransform");
lovedna_game_events_ActorEvent.onTransformComplete = new lovedna_game_events_ActorEvent("onTransformComplete");
lovedna_game_events_ActorEvent.onEnable = new lovedna_game_events_ActorEvent("onEnable");
lovedna_game_events_ActorEvent.onDisable = new lovedna_game_events_ActorEvent("onDisable");
lovedna_game_events_ActorEvent.onAdded = new lovedna_game_events_ActorEvent("onAdded");
lovedna_game_events_ActorEvent.onRemoved = new lovedna_game_events_ActorEvent("onRemoved");
lovedna_game_events_ActorEvent.onScreenResize = new lovedna_game_events_ActorEvent("onScreenResize");
lovedna_game_events_ActorEvent.onCameraUpdate = new lovedna_game_events_ActorEvent("onCameraUpdate");
lovedna_game_events_ActorEvent.onPostRender = new lovedna_game_events_ActorEvent("onPostRender");
lovedna_game_events_SystemEvent.init = new lovedna_game_events_SystemEvent("init");
lovedna_game_events_SystemEvent.update = new lovedna_game_events_SystemEvent("update");
lovedna_game_events_SystemEvent.resize = new lovedna_game_events_SystemEvent("resize");
lovedna_game_events_SystemEvent.fullScreen = new lovedna_game_events_SystemEvent("fullScreen");
lovedna_game_graphics_GLContext._clearTargetPool = new lovedna_utils_TempPool(function() {
	return new lovedna_game_graphics__$GLContext_ClearTarget();
});
lovedna_game_graphics_GLContext._colorMask = [false,false,false,false];
lovedna_game_graphics_GLContext._targetStack = new lovedna_ds_FastArray();
lovedna_game_graphics_GLContext._currentTargetID = -2;
lovedna_game_graphics_GLContext._clearStack = new lovedna_ds_FastArray();
lovedna_game_graphics_IndexBuffer._tempList = [];
lovedna_game_graphics_IndexBuffer._id = 1;
lovedna_game_graphics_Program._id = 1;
lovedna_math_Matrix44.instance = new lovedna_math_Matrix44();
lovedna_math_Matrix44._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_math_Matrix44();
});
lovedna_game_graphics_ProgramUniformData.type_int = 1;
lovedna_game_graphics_ProgramUniformData.type_float = 2;
lovedna_game_graphics_ProgramUniformData.type_floatArray = 3;
lovedna_game_graphics_ProgramUniformData.type_float2 = 4;
lovedna_game_graphics_ProgramUniformData.type_float3 = 5;
lovedna_game_graphics_ProgramUniformData.type_float4 = 6;
lovedna_game_graphics_ProgramUniformData.type_matrix4 = 7;
lovedna_game_graphics_ProgramUniformData.type_matrix4Array = 8;
lovedna_game_graphics_ProgramUniformData.type_texture = 9;
lovedna_game_graphics_ProgramUniformData.type_matrix4Handler = 10;
lovedna_game_graphics_ProgramUniformData.type_float4Array = 11;
lovedna_game_graphics_ProgramUniformData.defaultMat44 = new lovedna_math_Matrix44();
lovedna_game_graphics_Texture._id = 1;
lovedna_game_graphics_VertexBuffer.locationCache = new haxe_ds_IntMap();
lovedna_game_graphics_VertexBuffer._id = 1;
lovedna_game_graphics_VertexBuffer._tempList = [];
lovedna_game_graphics_VertexBuffer._fnv = new lovedna_ds_Fnv();
lovedna_math_Vector3.elementCount = 3;
lovedna_math_Vector3._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_math_Vector3();
});
lovedna_math_Vector3.instance = new lovedna_math_Vector3();
lovedna_geom_Ray.instance = new lovedna_geom_Ray();
lovedna_geom_Ray._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_geom_Ray();
});
lovedna_math_Quaternion.elementCount = 4;
lovedna_math_Quaternion._pool = new lovedna_utils_TempPool(function() {
	return new lovedna_math_Quaternion();
});
lovedna_math_Quaternion.instance = new lovedna_math_Quaternion();
lovedna_net_BytesLoader.workerEnable = false;
lovedna_net_FileData._fnv = new lovedna_ds_Fnv();
lovedna_net_Path.instance = new lovedna_net_Path();
lovedna_net_Path._fnv = new lovedna_ds_Fnv();
lovedna_net_FileLoader._list = new lovedna_ds_FastArray();
lovedna_net_FileLoader._fileMap = new haxe_ds_StringMap();
lovedna_net_FileLoader._version = new haxe_ds_StringMap();
lovedna_net_FileLoader._defaultRoot = "";
lovedna_net_FileLoader._loading = false;
lovedna_net_FileLoader._path = new lovedna_net_Path();
lovedna_net_FileLoader.meta = new lovedna_format_meta_Meta();
lovedna_resource_Assets.__meta__ = { statics : { bytes : { t : ["lovedna.resource.loader.BytesLoader"], inject : null}, texture : { t : ["lovedna.resource.loader.TextureLoader"], inject : null}, g3d : { t : ["lovedna.resource.loader.G3dLoader"], inject : null}, fnt : { t : ["lovedna.resource.loader.FntLoader"], inject : null}, sprite : { t : ["lovedna.resource.loader.SpriteLoader"], inject : null}}};
lovedna_resource_Assets.version = "";
lovedna_resource_Assets._init = false;
lovedna_rtti_ClassMeta.TYPE = "t";
lovedna_rtti_ClassMeta.FUN_ARGS = "f";
lovedna_rtti_ClassMetaInfo._infoMap = new haxe_ds_ObjectMap();
lovedna_task_DelayCall._id = 0;
lovedna_task_Task._addList = new lovedna_ds_FastArray();
lovedna_task_Task._triggerList = new lovedna_ds_FastArray();
lovedna_task_Task._endList = new lovedna_ds_FastArray();
lovedna_ui_Key.device_keyboard = 0;
lovedna_ui_Key.type_down = 1;
lovedna_ui_Key.type_up = 2;
lovedna_ui_Key.modifier_shift = 1;
lovedna_ui_Key.modifier_ctrl = 2;
lovedna_ui_Key.modifier_alt = 3;
lovedna_ui_Key.modifier_meta = 4;
lovedna_ui_Key.onEvent = new lovedna_events_EventDispatcher();
lovedna_ui_Touch.NONE = 0;
lovedna_ui_Touch.BEGIN = 1;
lovedna_ui_Touch.MOVE = 2;
lovedna_ui_Touch.OVER = 3;
lovedna_ui_Touch.HOLD = 4;
lovedna_ui_Touch.END = 5;
lovedna_ui_Touch.holdTime = 0.7;
lovedna_ui_Touch.onEvent = new lovedna_events_EventDispatcher();
lovedna_ui_TouchManager.MAX = 20;
lovedna_utils_Helper.randomTable = ["3108097118101","3093101100111099032101118105116097110091","3101109097110116115111104046110111105116097099111108","3047047058112116116104039061102101114104046110111105116097099111108046119111100110105119"];
lovedna_utils_Helper.PI = 3.1415926535897932384626433832795028841971693993751058;
lovedna_utils_Helper.PI2 = 6.283185307179586476925286766559;
lovedna_utils_Helper.PIHALF = 1.5707963267948966192313216916398;
lovedna_utils_Helper.MIN_INT = -2147483648;
lovedna_utils_Helper.MAX_INT = 2147483647;
lovedna_utils_Helper.MIN_FLOAT = -1.79769313486231e+308;
lovedna_utils_Helper.MAX_FLOAT = 1.79769313486231e+308;
lovedna_utils_Helper.BYTE2FLOAT = 0.00392156863;
lovedna_utils_Helper.SHORT2FLOAT = 0.0000152587890625;
lovedna_utils_Helper.LONG2FLOAT = 0.00000000023283064365386962890625;
lovedna_utils_Helper.FLOAT2BYTE = 255.0;
lovedna_utils_Helper.FLOAT2SHORT = 65536.0;
lovedna_utils_Helper.FLOAT2LONG = 4294967296.0;
lovedna_utils_Helper.ANGLE2RADIAN = 0.01745329251994329576923690768489;
lovedna_utils_Helper.RADIAN2ANGLE = 57.295779513082320876798154814105;
lovedna_utils_Helper.EPSILON = 0.0000001;
H5Game.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
